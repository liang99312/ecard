/*
 * FunctionModifyMngPanel.java
 *
 * Created on 2008年9月29日, 上午11:08
 */
package org.jhrcore.right;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.jdesktop.swingx.JXTaskPane;
import org.jhrcore.client.BaseMainFrame;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.client.system.right.FuntionModifyPanel;
import org.jhrcore.entity.right.FuntionRight;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.ui.BeanPanel;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.util.UtilTool;

/**

 * @author  yangzhou
 */
public class FuntionModifyMngPanel2 extends JPanel {

    private JButton btnAdd = new JButton("新增功能");
    private JButton btnEdit = new JButton("修改功能名称");
    private JButton btnCanedit = new JButton("取消编辑");
    private JButton btnDel = new JButton("删除");
    private JButton btnSave = new JButton("保存");
    private JButton btnSQL = new JButton("生成SQL");
    private boolean canModify = false;
    private FuntionRight cur_funtionRight;
    private FuntionModifyPanel funtionModifyPanel;
    private BeanPanel beanPanel = new BeanPanel();
    private DefaultMutableTreeNode cur_node;
    private String module_code = "SysFuntionModify";

    /** Creates new form FunctionModifyMngPanel */
    public FuntionModifyMngPanel2() {
        initComponents();
        initOthers();
        setupEvents();
    }

    public void setFunctionRight() {
        ComponentUtil.setSysFuntion(this, module_code);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        rightPanel = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();
        pnlMain = new javax.swing.JPanel();

        leftPanel.setPreferredSize(new java.awt.Dimension(200, 0));
        leftPanel.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(leftPanel);

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        pnlMain.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(rightPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        toolbar.add(btnAdd);
        toolbar.add(btnEdit);
        toolbar.add(btnCanedit);
        toolbar.add(btnSave);
        toolbar.add(btnDel);
        toolbar.add(btnSQL);
        beanPanel.setColumns(1);
        List<String> disable_fields = new ArrayList<String>();
//        disable_fields.add("fun_code");
//        disable_fields.add("fun_parent_code");
//        disable_fields.add("fun_module_flag");
        beanPanel.setDisable_fields(disable_fields);
        pnlMain.add(beanPanel, BorderLayout.CENTER);
        funtionModifyPanel = new FuntionModifyPanel();
        leftPanel.add(funtionModifyPanel, BorderLayout.CENTER);
        btnCanedit.setEnabled(false);
    }

    private void setupEvents() {
        btnSQL.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if(cur_node == null){
                    return;
                }
                if(cur_funtionRight == null){
                    return;
                }
                List list = CommUtil.fetchEntities("from FuntionRight where fun_code like '" + cur_funtionRight.getFun_code() + "%' order by fun_code");
                if("0".equals(cur_funtionRight.getFun_code())){
                    list = CommUtil.fetchEntities("from FuntionRight order by fun_code");
                }
                String sql_str = "";
                String oracle_str = "";
                String role_str = "delete from roleFuntion where funtionRight_key in (select funtionRight_key from funtionRight where fun_code like '" + cur_funtionRight.getFun_code() + "%');\r\n";
                role_str += "delete from funtionRight where fun_code like '" + cur_funtionRight.getFun_code() + "%';\r\n";
                sql_str += role_str;
                oracle_str += role_str;
                for(Object obj : list){
                    FuntionRight fr = (FuntionRight)obj;
                    String tmp_str1 = "insert into FuntionRight (funtionright_key,fun_code,fun_level,fun_module_flag,fun_name,fun_parent_code,fun_language,granted,module_flag,visible) select top 1 '" + fr.getFun_module_flag() + "','" + fr.getFun_code() +"',"+ fr.getFun_level() + ",'"+ fr.getFun_module_flag() +"','" +fr.getFun_name() +"','" + fr.getFun_parent_code() +"','"  + fr.getFun_language() +"',1,1,1 from FuntionRight where not exists (select 1 from funtionRight where fun_module_flag ='" + fr.getFun_module_flag() +"');\r\n";
                    String tmp_str2 = "insert into FuntionRight (funtionright_key,fun_code,fun_level,fun_module_flag,fun_name,fun_parent_code,fun_language,granted,module_flag,visible) select '" + fr.getFun_module_flag() + "','" + fr.getFun_code() +"',"+ fr.getFun_level() + ",'"+ fr.getFun_module_flag() +"','" +fr.getFun_name() +"','" + fr.getFun_parent_code() +"','"  + fr.getFun_language() +"',1,1,1 from FuntionRight where not exists (select 1 from funtionRight where fun_module_flag ='" + fr.getFun_module_flag() +"') and rownum < 2;\r\n";
                    sql_str += tmp_str1;
                    oracle_str += tmp_str2;
                }
                Date now = new Date();
                DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                String now_string = format.format(now);
                System.out.println(sql_str);
                System.out.println(oracle_str);

                File f = new File("c:/sql/sql server/sqlserver" + cur_funtionRight + now_string + ".txt"); //这里修改

                FileOutputStream fos = null;
                try {
                    fos = new FileOutputStream("c:/sql/sql server/sqlserver" + cur_funtionRight + now_string + ".txt");
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(FuntionModifyMngPanel2.class.getName()).log(Level.SEVERE, null, ex);
                }
                OutputStreamWriter osw = new OutputStreamWriter(fos);
                BufferedWriter bw = new BufferedWriter(osw);
                try {
                    bw.write(sql_str);
                } catch (IOException ex) {
                    Logger.getLogger(FuntionModifyMngPanel2.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    bw.close();
                    //                FileInputStream fis = new FileInputStream("a.txt");
                    //                InputStreamReader isr = new InputStreamReader(fis);
                    //                BufferedReader br = new BufferedReader(isr);
                    //                System.out.println(br.readLine());
                    //                br.close();
                } catch (IOException ex) {
                    Logger.getLogger(FuntionModifyMngPanel2.class.getName()).log(Level.SEVERE, null, ex);
                }
                File f1 = new File("c:/sql/oracle/oracle" + cur_funtionRight + now_string + ".txt"); //这里修改

                FileOutputStream fos1 = null;
                try {
                    fos1 = new FileOutputStream("c:/sql/oracle/oracle" + cur_funtionRight + now_string + ".txt");
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(FuntionModifyMngPanel2.class.getName()).log(Level.SEVERE, null, ex);
                }
                OutputStreamWriter osw1 = new OutputStreamWriter(fos1);
                BufferedWriter bw1 = new BufferedWriter(osw1);
                try {
                    bw1.write(oracle_str);
                } catch (IOException ex) {
                    Logger.getLogger(FuntionModifyMngPanel2.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    bw1.close();
                    //                FileInputStream fis = new FileInputStream("a.txt");
                    //                InputStreamReader isr = new InputStreamReader(fis);
                    //                BufferedReader br = new BufferedReader(isr);
                    //                System.out.println(br.readLine());
                    //                br.close();
                } catch (IOException ex) {
                    Logger.getLogger(FuntionModifyMngPanel2.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(ContextManager.getMainFrame(), "生成成功", "提示", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        funtionModifyPanel.getFunTree().addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                Object obj = e.getPath().getLastPathComponent();
                if (obj == null) {
                    return;
                }
                if (obj instanceof DefaultMutableTreeNode) {
                    cur_node = (DefaultMutableTreeNode) obj;
                    Object tmp_cur_funtionRight = cur_node.getUserObject();
                    if (tmp_cur_funtionRight instanceof FuntionRight) {
                        cur_funtionRight = (FuntionRight) tmp_cur_funtionRight;
                        changRightPanel(cur_funtionRight, canModify);
                    }
                }

            }
        });// 添加到数据中去,点选节点事件
        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addObject();
            }
        });
        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delObject();
            }
        });
        btnEdit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                canModify = true;
                changRightPanel(cur_funtionRight, canModify);
            }
        });
        btnCanedit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                canModify = false;
                changRightPanel(cur_funtionRight, canModify);
            }
        });
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveObject();
//                canModify = false;
                changRightPanel(cur_funtionRight, canModify);
            }
        });
//        btnUpdate.addActionListener(new ActionListener() {
//
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                if (JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent(btnDel),
//                        "该操作将会初始化所有功能菜单编码，确定要同步菜单吗", "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) != JOptionPane.OK_OPTION) {
//                    return;
//                }
//                ValidateSQLResult result = RightUtil.initFuntion();
//                if (result.getResult() == 0) {
//                    JOptionPane.showMessageDialog(null, "同步成功，请重启HR服务");
//                } else {
//                    FormulaTextDialog.showErrorMsg(result.getMsg());
//                }
//            }
//        });

        Object obj = funtionModifyPanel.getFunTree().getLastSelectedPathComponent();
        if (obj instanceof DefaultMutableTreeNode) {
            cur_node = (DefaultMutableTreeNode) obj;
            changRightPanel(((DefaultMutableTreeNode) obj).getUserObject(), canModify);
        }
    }

    private void addObject() {
        DefaultMutableTreeNode parent = (DefaultMutableTreeNode) funtionModifyPanel.getFunTree().getLastSelectedPathComponent();
        FuntionRight funtionRight = (FuntionRight) UtilTool.createUIDEntity(FuntionRight.class);
        Object obj = parent.getUserObject();
        if (obj instanceof FuntionRight) {
            funtionRight.setFun_code(SysUtil.getNewFuntionCode(cur_funtionRight.getFun_code()));
            funtionRight.setFun_parent_code(cur_funtionRight.getFun_code());
            funtionRight.setFun_level(cur_funtionRight.getFun_level() + 1);
        } else {
            funtionRight.setFun_level(0);
            funtionRight.setFun_code("1");
            funtionRight.setFun_parent_code("ROOT");
        }
        funtionRight.setModule_flag(true);
        if (BeanPanel.edit(funtionRight)) {
            CommUtil.saveEntity(funtionRight);
            parent.add(new DefaultMutableTreeNode(funtionRight));
            funtionModifyPanel.getFunTree().updateUI();
        }

    }

    private void saveObject() {
        if (cur_node == null) {
            return;
        }
        if (cur_funtionRight != null) {
            DefaultMutableTreeNode node = cur_node;
            ValidateSQLResult result = CommUtil.updateEntity(cur_funtionRight);
            if (result.getResult() == 0) {
                FuntionRight fr = UserContext.getFuntion_keys().get(cur_funtionRight.getFun_module_flag());
                if (fr != null) {
                    String old_group = fr.getFun_name();
                    if ("0".equals(cur_funtionRight.getFun_parent_code())) {
                        Hashtable<String, JXTaskPane> ts = BaseMainFrame.getBaseMainFrame().getTaskPanes();
                        JXTaskPane t = ts.get(old_group);
                        if (t != null) {
//                            MainFrame.getMainFrame().updateTitle(old_group, cur_funtionRight.getFun_name(), null, null);
                            t.setTitle(cur_funtionRight.getFun_name());
                            t.updateUI();
                        }
                    } else if (cur_funtionRight.getFun_level() == 2) {
                        DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
//                        MainFrame.getMainFrame().updateTitle(((FuntionRight) parent.getUserObject()).getFun_name(), ((FuntionRight) parent.getUserObject()).getFun_name(), fr, cur_funtionRight);
                    }
                    fr.setFun_name(cur_funtionRight.getFun_name());
                    UserContext.getFuntion_keys().put(cur_funtionRight.getFun_module_flag(), fr);
                }
                JOptionPane.showMessageDialog(null, "OK!");
                node.setUserObject(cur_funtionRight);
                funtionModifyPanel.getFunTree().getSelectionModel().clearSelection();
                funtionModifyPanel.getFunTree().addSelectionPath(new TreePath(node.getPath()));
                funtionModifyPanel.getFunTree().updateUI();
            } else {
                JOptionPane.showMessageDialog(
                        ContextManager.getMainFrame(), "保存失败！", // message
                        "错误", // title
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void changRightPanel(Object obj, boolean canModify) {
        if (obj instanceof FuntionRight) {
            cur_funtionRight = (FuntionRight) obj;
        } else {
            cur_funtionRight = null;
            return;
        }

        btnEdit.setEnabled(UserContext.hasFunctionRight("SysFuntionModify.btnEdit") && !canModify);
        btnCanedit.setEnabled(UserContext.hasFunctionRight("SysFuntionModify.btnCanedit") && canModify);
        btnSave.setEnabled(UserContext.hasFunctionRight("SysFuntionModify.btnSave") && canModify);
        beanPanel.setBean(cur_funtionRight);
        beanPanel.setEditable(canModify);
        beanPanel.bind();
        rightPanel.updateUI();
        toolbar.updateUI();
    }

    private void delObject() {
        if (cur_node == null) {
            return;
        }
        if (cur_node.getUserObject() instanceof FuntionRight) {
            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) cur_node.getParent();
            DefaultMutableTreeNode node = cur_node.getPreviousSibling();
            if (node == null) {
                node = (DefaultMutableTreeNode) cur_node.getParent();
            }
            parent.remove(cur_node);
            if (cur_funtionRight != null) {
                String sql = "delete from roleFuntion where funtionright_key in (select funtionright_key from funtionright where fun_code like '" + cur_funtionRight.getFun_code() + "%');";
                sql += "delete FuntionRight where fun_code like '" + cur_funtionRight.getFun_code() + "%';";
                CommUtil.excuteSQLs(sql, ";");
                CommUtil.excuteHQL("delete FuntionRight f where f.fun_code like '" + cur_funtionRight.getFun_code() + "%'");
            }
            funtionModifyPanel.getFunTree().getSelectionModel().clearSelection();
            funtionModifyPanel.getFunTree().addSelectionPath(new TreePath(node.getPath()));
            funtionModifyPanel.getFunTree().updateUI();
        }
    }

    public String getModuleCode() {
        return module_code;
    }
}
