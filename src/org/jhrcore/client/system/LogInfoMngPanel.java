/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LogInfoMngPanel.java
 *
 * Created on 2010-11-19, 10:42:00
 */
package org.jhrcore.client.system;

import com.foundercy.pf.control.listener.IPickFieldOrderListener;
import com.foundercy.pf.control.listener.IPickQueryExListener;
import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.DateUtil;
import org.jhrcore.comm.HrLog;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.entity.base.LogInfo;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.entity.right.FuntionRight;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.client.system.right.FuntionModifyPanel;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.task.IModulePanel;
import org.jhrcore.ui.JhrDatePicker;
import org.jhrcore.util.ImageUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author YuPing
 */
public class LogInfoMngPanel extends javax.swing.JPanel implements IModulePanel {

    private FuntionModifyPanel funtionModifyPanel;
    private List<TempFieldInfo> logInfos;
    private FTable ftable;
    private String order_sql = "li.log_date desc";
    private String cur_moduleName = "";
    public static final String module_code = "SysLogMng";
    private JButton btnDel = new JButton("删除");
    private JhrDatePicker jdpStart = new JhrDatePicker();
    private JhrDatePicker jdpEnd = new JhrDatePicker();
    private JLabel lblStart = new JLabel(" 查询日期起: ");
    private JLabel lblEnd = new JLabel(" 止: ");
    private JLabel lblSearch = new JLabel(" 查找: ");
    private JCheckBox jcbCurColumn = new JCheckBox("当前列");
    private JTextField jtfSearch = new JTextField();
    private JButton btnSearch = new JButton("", ImageUtil.getSearchIcon());
    private HrLog log = new HrLog(module_code);

    /** Creates new form LogInfoMngPanel */
    public LogInfoMngPanel() {
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        leftPnl = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        mainPnl = new javax.swing.JPanel();

        jSplitPane1.setDividerLocation(150);

        leftPnl.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(leftPnl);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        mainPnl.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
            .addComponent(mainPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JPanel leftPnl;
    private javax.swing.JPanel mainPnl;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        logInfos = EntityBuilder.getCommFieldInfoListOf(LogInfo.class, EntityBuilder.COMM_FIELD_VISIBLE);
        ftable = new FTable(LogInfo.class, true, true, false, module_code);
        ftable.setRight_allow_flag(true);
        ftable.setAll_fields(logInfos, logInfos, module_code);
        mainPnl.add(new JScrollPane(ftable), BorderLayout.CENTER);
        funtionModifyPanel = new FuntionModifyPanel(true);
        leftPnl.add(funtionModifyPanel, BorderLayout.CENTER);
        order_sql = SysUtil.getOrderString(ftable.getCurOrderScheme(), "li", order_sql, logInfos);
        initBar();
    }

    private void initBar() {
        jdpStart.setDate(DateUtil.getCurMonthFirstDay());
        jdpEnd.setDate(new Date());
        jToolBar2.add(lblStart);
        jToolBar2.add(jdpStart);
        jToolBar2.add(lblEnd);
        jToolBar2.add(jdpEnd);
        jToolBar2.add(lblSearch);
        jToolBar2.add(jtfSearch);
        jToolBar2.add(jcbCurColumn);
        jToolBar2.add(btnSearch);
        jToolBar2.add(btnDel);
        ComponentUtil.setSize(jtfSearch, 120, 22);
        ComponentUtil.setSize(btnSearch, 24, 24);
    }

    private void setupEvents() {
        funtionModifyPanel.getFunTree().addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode parent2 = (DefaultMutableTreeNode) funtionModifyPanel.getFunTree().getLastSelectedPathComponent();
                String path = getPathName(parent2);
                if (path.indexOf(".") > 0) {
                    cur_moduleName = path.substring(path.indexOf(".") + 1);
                } else {
                    cur_moduleName = null;
                }
                fetchMain(null, null);
            }
        });
        ftable.addPickFieldOrderListener(new IPickFieldOrderListener() {

            @Override
            public void pickOrder(ShowScheme showScheme) {
                order_sql = SysUtil.getOrderString(showScheme, "li", order_sql, logInfos);
                fetchMain(ftable.getCur_query_scheme(), null);
            }
        });

        ftable.addPickQueryExListener(new IPickQueryExListener() {

            @Override
            public void pickQuery(QueryScheme qs) {
                fetchMain(qs, null);
            }
        });
        ActionListener al = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String val = jtfSearch.getText().trim().toUpperCase();
                if (val.equals("")) {
                    fetchMain(ftable.getCur_query_scheme(), null);
                    return;
                }
                val = SysUtil.getQuickSearchText(val);
                String s_where = "";
                if (jcbCurColumn.isSelected()) {
                    s_where = ftable.getQuickSearchSQL("li", val);
                } else {
                    s_where = " li.messgae like '" + val + "' ";
                }
                fetchMain(ftable.getCur_query_scheme(), s_where);
            }
        };
        btnSearch.addActionListener(al);
        jtfSearch.addActionListener(al);
        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                List<String> keys = ftable.getSelectKeys();
                if (keys.isEmpty()) {
                    return;
                }
                if (JOptionPane.showConfirmDialog(ContextManager.getMainFrame(),
                        "确定要删除选中的记录吗", "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) != JOptionPane.OK_OPTION) {
                    return;
                }
                ValidateSQLResult vs = CommUtil.excuteSQLs("delete from LogInfo where logInfo_key in", keys);
                if (vs.getResult() == 0) {
                    ftable.deleteSelectedRows();
                    JOptionPane.showMessageDialog(null, "删除成功");
                    log.info("删除日志成功");
                } else {
                    MsgUtil.showHRDelErrorMsg(vs);
                }
            }
        });
        ComponentUtil.initTreeSelection(funtionModifyPanel.getFunTree());
    }

    /**
     * 界面查询主函数
     * @param qs：查询方案，为NULL表示未使用查询方案
     * @param s_where：快速定位条件
     */
    private void fetchMain(QueryScheme qs, String s_where) {
        String hql = "select logInfo_key from LogInfo li where 1=1 ";
        if (cur_moduleName != null) {
            hql += " and li.loggerName like '" + cur_moduleName + "%'";
        }
        hql += " and li.log_date between " + DateUtil.toStringForQuery(jdpStart.getDate(), "yyyy-MM-dd HH:mm:ss") + " and " + DateUtil.toStringForQuery(DateUtil.getNextDay(jdpEnd.getDate()));
        if (s_where != null && !s_where.trim().equals("")) {
            hql += " and (" + s_where + ")";
        }
        if (qs != null) {
            ftable.setCur_query_scheme(qs);
            hql = qs.buildHql(hql, "li");
        }
        if (!UserContext.isSA) {
            hql += " and li.person_key='" + UserContext.person_key + "'";
        }
        hql += "order by " + order_sql;
        PublicUtil.getProps_value().setProperty(LogInfo.class.getName(), "from LogInfo where logInfo_key in ");
        ftable.setObjects(CommUtil.fetchEntities(hql));
        this.refresh();
    }

    private String getPathName(DefaultMutableTreeNode parent) {
        if (parent == null) {
            return "";
        }
        if (parent.isRoot()) {
            Object obj = parent.getUserObject();
            if (obj instanceof FuntionRight) {
                FuntionRight fr = (FuntionRight) obj;
                return fr.getFun_name();
            } else {
                return "";
            }
        } else {
            Object obj = parent.getUserObject();
            if (obj instanceof FuntionRight) {
                FuntionRight fr = (FuntionRight) obj;
                return getPathName((DefaultMutableTreeNode) parent.getParent()) + "." + fr.getFun_name();
            } else {
                return "";
            }
        }
    }

    @Override
    public void setFunctionRight() {
        ComponentUtil.setSysFuntion(this, module_code);
    }

    @Override
    public void pickClose() {
    }

    @Override
    public void refresh() {
        ContextManager.setStatusBar(ftable.getObjects().size());
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
