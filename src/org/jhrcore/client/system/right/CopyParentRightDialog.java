/*
 * CopyParentRightDialog.java
 *
 * Created on 2008年10月27日, 下午2:11
 */
package org.jhrcore.client.system.right;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import org.jhrcore.util.SysUtil;
import org.jhrcore.entity.right.Role;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.RightImpl;
import org.jhrcore.ui.CheckTreeNode;
import org.jhrcore.ui.TreeSelectMod;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author  Owner
 */
public class CopyParentRightDialog extends JDialog {

    private Role parent_role;
    private List<Role> roles = new ArrayList<Role>();
    private boolean click_ok = false;
    private CheckTreeNode rootNode = new CheckTreeNode("所有子级");

    public CopyParentRightDialog(Role role, List<Role> roles) {
        super();
        setTitle("复制父级角色权限");
        parent_role = role;
        this.roles.addAll(roles);
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        cxboxCode = new javax.swing.JCheckBox();
        cxboxFuntion = new javax.swing.JCheckBox();
        cxboxField = new javax.swing.JCheckBox();
        cxboxRecord = new javax.swing.JCheckBox();
        cxboxReport = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        pnlMain.setBorder(javax.swing.BorderFactory.createTitledBorder("选择角色"));
        pnlMain.setPreferredSize(new java.awt.Dimension(190, 0));
        pnlMain.setLayout(new java.awt.BorderLayout());

        cxboxCode.setSelected(true);
        cxboxCode.setText("关联代码");

        cxboxFuntion.setSelected(true);
        cxboxFuntion.setText("功能权限");

        cxboxField.setSelected(true);
        cxboxField.setText("表与字段");

        cxboxRecord.setSelected(true);
        cxboxRecord.setText("记录权限");

        cxboxReport.setSelected(true);
        cxboxReport.setText("报表权限");

        btnOk.setText("确定");

        btnCancel.setText("取消");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(248, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cxboxFuntion)
                    .addComponent(cxboxField)
                    .addComponent(cxboxRecord)
                    .addComponent(cxboxReport)
                    .addComponent(cxboxCode)))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cxboxFuntion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cxboxField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cxboxRecord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cxboxReport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cxboxCode))
                    .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JCheckBox cxboxCode;
    private javax.swing.JCheckBox cxboxField;
    private javax.swing.JCheckBox cxboxFuntion;
    private javax.swing.JCheckBox cxboxRecord;
    private javax.swing.JCheckBox cxboxReport;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel pnlMain;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        SysUtil.sortListByStr(roles, "role_code");
        rootNode.removeAllChildren();
        CheckTreeNode tmp = rootNode;
        for (Object obj : roles) {
            Role role = (Role) obj;
            while (tmp != rootNode && !((Role) tmp.getUserObject()).getRole_code().equals(
                    role.getParent_code())) {
                tmp = (CheckTreeNode) tmp.getParent();
            }
            CheckTreeNode cur = new CheckTreeNode(role);
            tmp.add(cur);
            tmp = cur;
        }
        JTree tree = new JTree(rootNode);
        HRRendererView.getRoleMap().initTree(tree, TreeSelectMod.nodeCheckChildFollowMod);
        pnlMain.add(new JScrollPane(tree), BorderLayout.CENTER);
    }

    private void setupEvents() {
        CloseAction.doCloseAction(btnCancel);
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                copyRight();
            }
        });
    }

    private void copyRight() {
        String dstRoleKey = "";
        Enumeration enumt = rootNode.breadthFirstEnumeration();
        while (enumt.hasMoreElements()) {
            CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
            if (node.isSelected() && node.getUserObject() instanceof Role) {
                dstRoleKey += ((Role) node.getUserObject()).getRole_key() + ";";
            }
        }
        if (dstRoleKey.equals("")) {
            JOptionPane.showMessageDialog(null, "未选择任何角色", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String code = "";
        if (cxboxFuntion.isSelected()) {
            code += "fun;";
        }
        if (cxboxField.isSelected()) {
            code += "field;";
        }
        if (cxboxRecord.isSelected()) {
            code += "entity;";
        }
        if (cxboxCode.isSelected()) {
            code += "code;";
        }
        if (cxboxReport.isSelected()) {
            code += "report;";
        }
        if (code.equals("")) {
            JOptionPane.showMessageDialog(null, "未选择任何权限", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ValidateSQLResult validateSQLResult = RightImpl.copyRight(parent_role.getRole_key(), dstRoleKey, code);
        if (validateSQLResult.getResult() != 0) {
            MsgUtil.showHRSaveErrorMsg(validateSQLResult);
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "权限复制成功!");
            dispose();
        }
    }

    public boolean isClick_ok() {
        return click_ok;
    }
}
