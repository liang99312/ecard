/*
 * CopyRight.java
 *
 * Created on 2008年10月27日, 上午10:49
 */
package org.jhrcore.client.system.right;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.entity.right.Role;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.RightImpl;
import org.jhrcore.ui.RoleModel;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.renderer.RenderderMap;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author  Owner
 */
public class CopyRightDialog extends JDialog {

    private Role role;
    private JTree roleTree;
    private boolean click_ok = false;

    public CopyRightDialog(Role role) {
        super();
        this.role = role;
        this.setTitle("复制权限");
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();
        cxboxRecord = new javax.swing.JCheckBox();
        cxboxReport = new javax.swing.JCheckBox();
        cxboxCode = new javax.swing.JCheckBox();
        cxboxField = new javax.swing.JCheckBox();
        cxboxFuntion = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        pnlMain.setLayout(new java.awt.BorderLayout());
        jScrollPane1.setViewportView(pnlMain);

        cxboxRecord.setSelected(true);
        cxboxRecord.setText("表记录增删权限");

        cxboxReport.setSelected(true);
        cxboxReport.setText("报表权限");

        cxboxCode.setSelected(true);
        cxboxCode.setText("关联代码");

        cxboxField.setSelected(true);
        cxboxField.setText("表与字段");

        cxboxFuntion.setSelected(true);
        cxboxFuntion.setText("功能权限");

        btnOk.setText("确定");

        btnCancel.setText("取消");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cxboxRecord)
                    .addComponent(cxboxFuntion))
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cxboxReport)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cxboxField)
                        .addGap(62, 62, 62)
                        .addComponent(cxboxCode)))
                .addGap(26, 26, 26))
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(241, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addGap(34, 34, 34))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxboxFuntion)
                    .addComponent(cxboxField)
                    .addComponent(cxboxCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxboxRecord)
                    .addComponent(cxboxReport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnCancel))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JCheckBox cxboxCode;
    private javax.swing.JCheckBox cxboxField;
    private javax.swing.JCheckBox cxboxFuntion;
    private javax.swing.JCheckBox cxboxRecord;
    private javax.swing.JCheckBox cxboxReport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel pnlMain;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        roleTree = new JTree(new RoleModel());
        RenderderMap map = new RenderderMap();
        map.setIcon("Role", "code");
        map.initTree(roleTree);
        pnlMain.add(roleTree, BorderLayout.CENTER);
    }

    private void setupEvents() {
        CloseAction.doCloseAction(btnCancel);
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) roleTree.getLastSelectedPathComponent();
                if (node == null) {
                    return;
                }
                if (node != null) {
                    Object obj = node.getUserObject();
                    if (!(obj instanceof Role)) {
                        return;
                    }
                    Role parent_role = (Role) obj;
                    if (parent_role.getRole_key().equals(role.getRole_key())) {
                        JOptionPane.showMessageDialog(null, "不允许复制自身权限", "错误", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (!(role.getParent_code().equals(parent_role.getParent_code()) || role.getParent_code().equals(parent_role.getRole_code()))) {
                        JOptionPane.showMessageDialog(null, "仅允许复制父级或同级权限", "错误", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    String code = "";
                    if (cxboxFuntion.isSelected()) {
                        code += "fun;";
                    }
                    if (cxboxField.isSelected()) {
                        code += "field;";
                    }
                    if (cxboxRecord.isSelected()) {
                        code += "entity;";
                    }
                    if (cxboxCode.isSelected()) {
                        code += "code;";
                    }
                    if (cxboxReport.isSelected()) {
                        code += "report;";
                    }
                    if (code.equals("")) {
                        JOptionPane.showMessageDialog(null, "未选择任何权限", "错误", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    copyRight(parent_role, role, code);
                }
            }
        });
        this.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                dispose();
            }
        });

    }

    /**
     * 该方法用于将目标角色的权限按权限码复制给被赋权角色
     * @param srcRole:目标角色
     * @param dstRole：被赋权角色
     * @param code：权限码：完整fun;field;entity;code;report;:功能、字段、表、编码、报表，权限码可能包含其中1个或多个
     */
    private void copyRight(Role srcRole, Role dstRole, String code) {
        ValidateSQLResult result = RightImpl.copyRight(srcRole.getRole_key(), dstRole.getRole_key(), code);
        if (result.getResult() == 0) {
            JOptionPane.showMessageDialog(null, "复制成功");
            click_ok = true;
            dispose();
        } else {
            MsgUtil.showHRSaveErrorMsg(result);
        }
    }

    public boolean isClick_ok() {
        return click_ok;
    }
}
