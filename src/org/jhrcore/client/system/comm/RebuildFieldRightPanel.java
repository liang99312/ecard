/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RebuildFieldRightPanel.java
 *
 * Created on 2009-3-2, 16:00:17
 */
package org.jhrcore.client.system.comm;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.base.FieldDef;
import org.jhrcore.entity.right.Role;
import org.jhrcore.entity.right.RoleField;
import org.jhrcore.mutil.RightUtil;
import org.jhrcore.ui.CheckTreeNode;
import org.jhrcore.ui.ModelFrame;
import org.jhrcore.ui.TreeSelectMod;
import org.jhrcore.ui.renderer.HRRendererView;

/**
 *
 * @author DB2INST3
 */
public class RebuildFieldRightPanel extends javax.swing.JPanel {

    private DefaultMutableTreeNode cur_node;
    private JTree field_tree;
    private JTree role_tree;

    /** Creates new form RebuildFieldRightPanel */
    public RebuildFieldRightPanel(DefaultMutableTreeNode node) {
        cur_node = node;
        initComponents();
        initOthers();
        setupEvents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlField = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        pnlRole = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jrbAll = new javax.swing.JRadioButton();
        jrbView = new javax.swing.JRadioButton();
        jrbNone = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnGiveRight = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setText("需要授权的字段：");

        pnlField.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("授予角色：");

        pnlRole.setLayout(new java.awt.BorderLayout());

        jLabel3.setText("权限级别：");

        buttonGroup1.add(jrbAll);
        jrbAll.setText("完全权限");

        buttonGroup1.add(jrbView);
        jrbView.setText("浏览权限");

        buttonGroup1.add(jrbNone);
        jrbNone.setText("无权限");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pnlField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnlRole, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jrbAll)
                            .addComponent(jrbView)
                            .addComponent(jrbNone))
                        .addContainerGap(69, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(107, 107, 107)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(101, 101, 101))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jrbAll)
                        .addGap(18, 18, 18)
                        .addComponent(jrbView)
                        .addGap(18, 18, 18)
                        .addComponent(jrbNone))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnlRole, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                        .addComponent(pnlField, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE))))
        );

        btnGiveRight.setText("授权");

        btnClose.setText("关闭");

        jLabel4.setText("注意：授予权限不超过当前用户自身权限");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(btnGiveRight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClose)
                .addGap(62, 62, 62))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGiveRight)
                        .addComponent(btnClose))
                    .addComponent(jLabel4))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnGiveRight;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton jrbAll;
    private javax.swing.JRadioButton jrbNone;
    private javax.swing.JRadioButton jrbView;
    private javax.swing.JPanel pnlField;
    private javax.swing.JPanel pnlRole;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        DefaultMutableTreeNode field_root_node = getFieldRoot(cur_node);
        CheckTreeNode rootNode = new CheckTreeNode(field_root_node.getUserObject());
        if (!(field_root_node.getUserObject() instanceof FieldDef)) {
            Enumeration enumt = cur_node.breadthFirstEnumeration();
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                if (node.getUserObject() instanceof FieldDef) {
                    FieldDef fd = (FieldDef) node.getUserObject();
                    if (fd.getNew_flag() == 1) {
                        continue;
                    }
                    CheckTreeNode cNode = new CheckTreeNode(fd);
                    rootNode.add(cNode);
                }
            }
        }
        field_tree = new JTree(rootNode);
        HRRendererView.getCommMap().initTree(field_tree, TreeSelectMod.nodeCheckChildFollowMod);
        field_tree.setShowsRootHandles(true);
        pnlField.add(new JScrollPane(field_tree), BorderLayout.CENTER);
        List listRole = new ArrayList();
        String sql = "from Role r left join fetch r.roleFields";
        if (!UserContext.isSA) {
            sql += " where " + UserContext.role_right_str;
        }
        listRole.addAll(CommUtil.fetchEntities(sql + " order by r.role_code"));
        CheckTreeNode rootNode1 = new CheckTreeNode("全部角色");
        CheckTreeNode tmp = rootNode1;
        for (Object obj : listRole) {
            Role role = (Role) obj;
            while (tmp != rootNode1 && !((Role) tmp.getUserObject()).getRole_code().equals(
                    role.getParent_code())) {
                tmp = (CheckTreeNode) tmp.getParent();
            }
            CheckTreeNode cur = new CheckTreeNode(role);
            tmp.add(cur);
            tmp = cur;
        }
        role_tree = new JTree(rootNode1);
        HRRendererView.getCommMap().initTree(role_tree, TreeSelectMod.nodeCheckChildFollowMod);
        role_tree.setRootVisible(false);
        role_tree.setShowsRootHandles(true);
        role_tree.expandRow(0);
        pnlRole.add(new JScrollPane(role_tree), BorderLayout.CENTER);
    }

    private void setupEvents() {
        btnGiveRight.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Enumeration enumt = ((CheckTreeNode) field_tree.getModel().getRoot()).breadthFirstEnumeration();
                List<CheckTreeNode> field_list = new ArrayList<CheckTreeNode>();
                while (enumt.hasMoreElements()) {
                    CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
                    if (node.isSelected()) {
                        if (node.getUserObject() instanceof FieldDef) {
                            field_list.add(node);
                        }
                    }
                }
                List<Role> role_list = new ArrayList<Role>();
                Enumeration enumt1 = ((CheckTreeNode) role_tree.getModel().getRoot()).breadthFirstEnumeration();
                while (enumt1.hasMoreElements()) {
                    CheckTreeNode node = (CheckTreeNode) enumt1.nextElement();
                    if (node.isSelected()) {
                        Object obj = node.getUserObject();
                        if (obj instanceof Role) {
                            role_list.add((Role) obj);
                        }
                    }
                }
                int fun_flag = 0;
                if (jrbAll.isSelected()) {
                    fun_flag = 1;
                } else if (jrbView.isSelected()) {
                    fun_flag = 2;
                } else {
                    fun_flag = 0;
                }
                RightUtil.giveFieldRight(role_list, field_list, fun_flag, new Hashtable<String, Hashtable<String, RoleField>>(), (DefaultMutableTreeNode) field_tree.getModel().getRoot());
            }
        });
        btnClose.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ModelFrame.close();
            }
        });
    }

    private DefaultMutableTreeNode getFieldRoot(DefaultMutableTreeNode node) {
        Object obj = node.getUserObject();
        if (obj instanceof EntityDef) {
            return new DefaultMutableTreeNode(obj);
        } else if (obj instanceof FieldDef) {
            return new DefaultMutableTreeNode(obj);
        } else {
            return new DefaultMutableTreeNode(((DefaultMutableTreeNode) node.getParent()).getUserObject());
        }
    }
}
