/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FieldRegulaSetPanel.java
 *
 * Created on 2009-10-2, 10:53:17
 */
package org.jhrcore.client.system.comm;

import com.foundercy.pf.control.table.FTable;
import com.foundercy.pf.control.table.RowChangeListner;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.log4j.Logger;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.comm.CodeManager;
import org.jhrcore.comm.FieldTrigerManager;
import org.jhrcore.entity.Code;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.base.FieldDef;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.SysImpl;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.HrTextPane;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class FieldRegulaSetPanel extends JPanel implements IModuleCode {

    private FTable ftable_not_null;//取值唯一
    private FTable ftable_info;//关联提示
    private FTable ftable_update;//关联更新
    private FTable ftable_update_entity;
    private FTable ftable_update_code;
    private FTable ftable_init;//初始化脚本
    private List<FieldDef> fieldDefs;
    private EntityDef entity_def;
    private JButton btnSave = new JButton("保存");
    private JButton btnDel = new JButton("删除");
    private JButton btnClose = new JButton("关闭");
    private HrTextPane jtaFormulaTextInfo = null;
    private HrTextPane jtaFormulaTextInfoMsg = null;
    private HrTextPane jtaFormulaTextUpdate = null;
    private HrTextPane jtaFormulaTextUpdateEntity = null;
    private HrTextPane jtaFormulaTextInit = null;
    private DocumentListener info_doc_listener;
    private DocumentListener info_msg_doc_listener;
    private DocumentListener update_doc_listener;
    private DocumentListener update_doc_entity_listener;
    private DocumentListener init_doc_entity_listener;
    private int tabIndex = 0;
    private FieldDef cur_field;
    private Logger log = Logger.getLogger(FieldRegulaSetPanel.class.getName());
    private boolean info_change_flag = false;
    private boolean update_change_flag = false;
    private boolean update_entity_change_flag = false;
    private boolean init_change_flag = false;
    private List<String> info_fields = new ArrayList<String>();
    private boolean listener_flag = false;
    private FieldDef cur_fd;
    private FieldDef update_change_def;
    private FieldDef info_change_def;
    private FieldDef cur_entity_fd;
    private FieldDef not_null_change_def;
    private final String module_code = "";

    /** Creates new form FieldRegulaSetPanel */
    public FieldRegulaSetPanel(List<FieldDef> fieldDefs) {
        this.fieldDefs = fieldDefs;
        entity_def = fieldDefs.get(0).getEntityDef();
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jtpMain = new javax.swing.JTabbedPane();
        pnl_not_null = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        pnlInfoLeft = new javax.swing.JPanel();
        pnlInfoRight = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        pnlMsg = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnClearInfo = new javax.swing.JButton();
        btnCheckInfo = new javax.swing.JButton();
        pnlTextInfo = new javax.swing.JPanel();
        pnl_relation = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlLeft = new javax.swing.JPanel();
        pnlUpdateRight = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnClearUpdate = new javax.swing.JButton();
        btnCheckUpdate = new javax.swing.JButton();
        pnlTextUpdate = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jSplitPane4 = new javax.swing.JSplitPane();
        pnlField = new javax.swing.JPanel();
        pnlUpdateRight1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnClearUpdate1 = new javax.swing.JButton();
        btnCheckUpdateEntity = new javax.swing.JButton();
        jcbUse = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jSplitPane5 = new javax.swing.JSplitPane();
        pnlTextUpdate1 = new javax.swing.JPanel();
        pnlCode = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jSplitPane6 = new javax.swing.JSplitPane();
        pnlLeft1 = new javax.swing.JPanel();
        pnlUpdateRight2 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        btnClearUpdate2 = new javax.swing.JButton();
        btnCheckUpdate1 = new javax.swing.JButton();
        jcbInitUse = new javax.swing.JCheckBox();
        pnlInitText = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();

        pnl_not_null.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnl_not_null.setLayout(new java.awt.BorderLayout());
        jtpMain.addTab("取值唯一", pnl_not_null);

        jSplitPane2.setDividerLocation(350);
        jSplitPane2.setDividerSize(2);

        pnlInfoLeft.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlInfoLeft.setLayout(new java.awt.BorderLayout());
        jSplitPane2.setLeftComponent(pnlInfoLeft);

        jSplitPane3.setDividerLocation(125);
        jSplitPane3.setDividerSize(2);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlMsg.setBorder(javax.swing.BorderFactory.createTitledBorder("提示信息："));
        pnlMsg.setLayout(new java.awt.BorderLayout());
        jSplitPane3.setTopComponent(pnlMsg);

        btnClearInfo.setText("清空");

        btnCheckInfo.setText("确认校验");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(btnClearInfo)
                .addGap(44, 44, 44)
                .addComponent(btnCheckInfo)
                .addContainerGap(113, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClearInfo)
                    .addComponent(btnCheckInfo)))
        );

        pnlTextInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("脚本编辑区："));
        pnlTextInfo.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlTextInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTextInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))
        );

        jSplitPane3.setRightComponent(jPanel5);

        javax.swing.GroupLayout pnlInfoRightLayout = new javax.swing.GroupLayout(pnlInfoRight);
        pnlInfoRight.setLayout(pnlInfoRightLayout);
        pnlInfoRightLayout.setHorizontalGroup(
            pnlInfoRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
        );
        pnlInfoRightLayout.setVerticalGroup(
            pnlInfoRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(pnlInfoRight);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );

        jtpMain.addTab("校验提示", jPanel4);

        jSplitPane1.setDividerLocation(350);
        jSplitPane1.setDividerSize(2);

        pnlLeft.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlLeft.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(pnlLeft);

        btnClearUpdate.setText("清空");

        btnCheckUpdate.setText("确认校验");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(146, Short.MAX_VALUE)
                .addComponent(btnClearUpdate)
                .addGap(44, 44, 44)
                .addComponent(btnCheckUpdate)
                .addGap(115, 115, 115))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClearUpdate)
                    .addComponent(btnCheckUpdate))
                .addContainerGap(6, Short.MAX_VALUE))
        );

        pnlTextUpdate.setBorder(javax.swing.BorderFactory.createTitledBorder("脚本编辑区："));
        pnlTextUpdate.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout pnlUpdateRightLayout = new javax.swing.GroupLayout(pnlUpdateRight);
        pnlUpdateRight.setLayout(pnlUpdateRightLayout);
        pnlUpdateRightLayout.setHorizontalGroup(
            pnlUpdateRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlTextUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
        );
        pnlUpdateRightLayout.setVerticalGroup(
            pnlUpdateRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUpdateRightLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTextUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(pnlUpdateRight);

        javax.swing.GroupLayout pnl_relationLayout = new javax.swing.GroupLayout(pnl_relation);
        pnl_relation.setLayout(pnl_relationLayout);
        pnl_relationLayout.setHorizontalGroup(
            pnl_relationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        pnl_relationLayout.setVerticalGroup(
            pnl_relationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );

        jtpMain.addTab("关联更新", pnl_relation);

        jSplitPane4.setDividerLocation(350);
        jSplitPane4.setDividerSize(2);

        pnlField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlField.setLayout(new java.awt.BorderLayout());
        jSplitPane4.setLeftComponent(pnlField);

        btnClearUpdate1.setText("清空");

        btnCheckUpdateEntity.setText("确认校验");

        jcbUse.setText("启用");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jcbUse)
                .addGap(38, 38, 38)
                .addComponent(btnClearUpdate1)
                .addGap(18, 18, 18)
                .addComponent(btnCheckUpdateEntity)
                .addContainerGap(157, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckUpdateEntity)
                    .addComponent(jcbUse)
                    .addComponent(btnClearUpdate1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane5.setDividerLocation(250);
        jSplitPane5.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane5.setOneTouchExpandable(true);

        pnlTextUpdate1.setBorder(javax.swing.BorderFactory.createTitledBorder("脚本编辑区："));
        pnlTextUpdate1.setLayout(new java.awt.BorderLayout());
        jSplitPane5.setTopComponent(pnlTextUpdate1);

        pnlCode.setBorder(javax.swing.BorderFactory.createTitledBorder("当前字段的编码列表："));
        pnlCode.setLayout(new java.awt.BorderLayout());
        jSplitPane5.setRightComponent(pnlCode);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlUpdateRight1Layout = new javax.swing.GroupLayout(pnlUpdateRight1);
        pnlUpdateRight1.setLayout(pnlUpdateRight1Layout);
        pnlUpdateRight1Layout.setHorizontalGroup(
            pnlUpdateRight1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlUpdateRight1Layout.setVerticalGroup(
            pnlUpdateRight1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUpdateRight1Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane4.setRightComponent(pnlUpdateRight1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );

        jtpMain.addTab("关联编码过滤", jPanel6);

        jSplitPane6.setDividerLocation(350);
        jSplitPane6.setDividerSize(2);

        pnlLeft1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlLeft1.setLayout(new java.awt.BorderLayout());
        jSplitPane6.setLeftComponent(pnlLeft1);

        btnClearUpdate2.setText("清空");

        btnCheckUpdate1.setText("确认校验");

        jcbInitUse.setText("启用");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jcbInitUse)
                .addGap(38, 38, 38)
                .addComponent(btnClearUpdate2)
                .addGap(44, 44, 44)
                .addComponent(btnCheckUpdate1)
                .addContainerGap(115, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClearUpdate2)
                    .addComponent(btnCheckUpdate1)
                    .addComponent(jcbInitUse))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pnlInitText.setBorder(javax.swing.BorderFactory.createTitledBorder("脚本编辑区："));
        pnlInitText.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout pnlUpdateRight2Layout = new javax.swing.GroupLayout(pnlUpdateRight2);
        pnlUpdateRight2.setLayout(pnlUpdateRight2Layout);
        pnlUpdateRight2Layout.setHorizontalGroup(
            pnlUpdateRight2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlInitText, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
        );
        pnlUpdateRight2Layout.setVerticalGroup(
            pnlUpdateRight2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUpdateRight2Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlInitText, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
        );

        jSplitPane6.setRightComponent(pnlUpdateRight2);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );

        jtpMain.addTab("初始化脚本", jPanel9);

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 801, Short.MAX_VALUE)
            .addComponent(jtpMain, javax.swing.GroupLayout.DEFAULT_SIZE, 801, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtpMain, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckInfo;
    private javax.swing.JButton btnCheckUpdate;
    private javax.swing.JButton btnCheckUpdate1;
    private javax.swing.JButton btnCheckUpdateEntity;
    private javax.swing.JButton btnClearInfo;
    private javax.swing.JButton btnClearUpdate;
    private javax.swing.JButton btnClearUpdate1;
    private javax.swing.JButton btnClearUpdate2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JSplitPane jSplitPane6;
    private javax.swing.JCheckBox jcbInitUse;
    private javax.swing.JCheckBox jcbUse;
    private javax.swing.JTabbedPane jtpMain;
    private javax.swing.JPanel pnlCode;
    private javax.swing.JPanel pnlField;
    private javax.swing.JPanel pnlInfoLeft;
    private javax.swing.JPanel pnlInfoRight;
    private javax.swing.JPanel pnlInitText;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlLeft1;
    private javax.swing.JPanel pnlMsg;
    private javax.swing.JPanel pnlTextInfo;
    private javax.swing.JPanel pnlTextUpdate;
    private javax.swing.JPanel pnlTextUpdate1;
    private javax.swing.JPanel pnlUpdateRight;
    private javax.swing.JPanel pnlUpdateRight1;
    private javax.swing.JPanel pnlUpdateRight2;
    private javax.swing.JPanel pnl_not_null;
    private javax.swing.JPanel pnl_relation;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        initToolBar();
        ftable_not_null = new FTable(FieldDef.class, false, false);
        List<String> not_null_fields = new ArrayList<String>();
        not_null_fields.add("field_caption");
        not_null_fields.add("unique_flag");
        not_null_fields.add("not_null");
        not_null_fields.add("save_flag");
        not_null_fields.add("not_null_save_check");
        List<String> not_null_disable_fields = new ArrayList<String>();
        not_null_disable_fields.add("field_caption");
        ftable_not_null.setFields(not_null_fields);
        ftable_not_null.setDisable_fields(not_null_disable_fields);
        ftable_not_null.setEditable(true);
        pnl_not_null.add(ftable_not_null, BorderLayout.CENTER);
        //---------------------选项卡2------------------------
        ftable_info = new FTable(FieldDef.class, false, false);
        info_fields.add("field_name");
        info_fields.add("field_caption");
        info_fields.add("regula_save_flag");
        info_fields.add("regula_use_flag");
        info_fields.add("regula_save_check");
        ftable_info.setFields(info_fields);
        List<String> update_disable_fields = new ArrayList<String>();
        update_disable_fields.add("field_name");
        update_disable_fields.add("field_caption");
        ftable_info.setDisable_fields(update_disable_fields);
        ftable_info.setEditable(true);
        pnlInfoLeft.add(ftable_info, BorderLayout.CENTER);
        jtaFormulaTextInfoMsg = new HrTextPane();
        pnlMsg.add(jtaFormulaTextInfoMsg, BorderLayout.CENTER);
        jtaFormulaTextInfo = new HrTextPane();
        pnlTextInfo.add(jtaFormulaTextInfo, BorderLayout.CENTER);
        //---------------------选项卡3------------------------
        ftable_update = new FTable(FieldDef.class, false, false, false);
        List<String> update_fields = new ArrayList<String>();
        update_fields.add("field_name");
        update_fields.add("field_caption");
        update_fields.add("relation_flag");
        update_fields.add("relation_add_flag");
        update_fields.add("relation_edit_flag");
        update_fields.add("relation_save_flag");
        ftable_update.setFields(update_fields);
        ftable_update.setDisable_fields(update_disable_fields);
        ftable_update.setEditable(true);
        pnlLeft.add(ftable_update, BorderLayout.CENTER);
        jtaFormulaTextUpdate = new HrTextPane();
        pnlTextUpdate.add(jtaFormulaTextUpdate, BorderLayout.CENTER);
        //---------------------选项卡4------------------------
        jtaFormulaTextUpdateEntity = new HrTextPane();
        jtaFormulaTextUpdateEntity.setText(entity_def.getLimit_script());
        pnlTextUpdate1.add(jtaFormulaTextUpdateEntity, BorderLayout.CENTER);
        List<String> updateEntity_fields = new ArrayList<String>();
        updateEntity_fields.add("field_name");
        updateEntity_fields.add("field_caption");
        updateEntity_fields.add("field_type");
        updateEntity_fields.add("code_type_name");
        ftable_update_entity = new FTable(FieldDef.class, updateEntity_fields, false, false, false, "FieldRegulaSet");
        pnlField.add(ftable_update_entity, BorderLayout.CENTER);
        JPanel pnl1 = new JPanel(new BorderLayout());
        pnl1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ftable_update_code = new FTable(Code.class, false, false, false);
        pnl1.add(ftable_update_code, BorderLayout.CENTER);
        pnlCode.add(pnl1, BorderLayout.CENTER);
        jcbUse.setSelected(entity_def.isLimit_flag());
        //----------------------选项卡5
        jtaFormulaTextInit = new HrTextPane();
        jtaFormulaTextInit.setText(entity_def.getInit_script());
        jcbInitUse.setSelected(entity_def.isInit_flag());
        pnlInitText.add(jtaFormulaTextInit);
        ftable_init = new FTable(FieldDef.class, updateEntity_fields, false, false, false, "FieldRegulaSet");
        pnlLeft1.add(ftable_init);
    }

    private void setupEvents() {
        info_doc_listener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                info_change_def = cur_field;
                info_change_flag = true;
            }
        };
        info_msg_doc_listener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                info_change_def = cur_field;
            }
        };
        jtaFormulaTextInfoMsg.getTextPane().getDocument().addDocumentListener(info_msg_doc_listener);
        jtaFormulaTextInfo.getTextPane().getDocument().addDocumentListener(info_doc_listener);
        update_doc_listener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                update_change_def = cur_fd;
                update_change_flag = true;
            }
        };
        update_doc_entity_listener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                update_entity_change_flag = true;
            }
        };
        init_doc_entity_listener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                init_change_flag = true;
            }
        };
        jtaFormulaTextInit.getTextPane().getDocument().addDocumentListener(init_doc_entity_listener);
        jtaFormulaTextUpdateEntity.getTextPane().getDocument().addDocumentListener(update_doc_entity_listener);
        jtaFormulaTextUpdate.getTextPane().getDocument().addDocumentListener(update_doc_listener);
        ftable_info.addRowChangeListner(new RowChangeListner() {

            @Override
            public void rowChanged(Object obj) {
                cur_field = (FieldDef) obj;
                info_change_def = cur_field;
            }
        });
        ftable_info.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (info_change_flag || info_change_def != null) {
                    if (info_change_flag) {
                        if (JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent(btnSave), "脚本或提示有改动，是否保存", "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.OK_OPTION) {
                            saveObject(1);
                        } else {
                            if (cur_field == null || cur_field.getField_key() == null) {
                                return;
                            }
                            FieldDef fielddef = (FieldDef) CommUtil.fetchEntityBy("from FieldDef fd join fetch fd.entityDef where fd.field_key='" + cur_field.getField_key() + "'");
                            for (Object obj : ftable_info.getObjects()) {
                                FieldDef fd = (FieldDef) obj;
                                if (fd.getField_key().equals(fielddef.getField_key())) {
                                    fd = fielddef;
                                    break;
                                }
                            }
                        }
                    } else {
                        saveObject(1);
                    }
                }
                cur_field = (FieldDef) ftable_info.getCurrentRow();
                jtaFormulaTextInfo.setText(cur_field == null ? "" : cur_field.getRegula_text());
                jtaFormulaTextInfoMsg.setText(cur_field == null ? "" : cur_field.getRegula_msg());
                setEditState();
                info_change_def = null;
                info_change_flag = false;
            }
        });
        ftable_update.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (update_change_flag || update_change_def != null) {
                    if (update_change_flag) {
                        if (JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent(btnSave), "脚本有改动，是否保存", "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.OK_OPTION) {
                            saveObject(2);
                        } else {
                            if (cur_fd == null || cur_fd.getField_key() == null) {
                                return;
                            }
                            FieldDef fielddef = (FieldDef) CommUtil.fetchEntityBy("from FieldDef fd join fetch fd.entityDef ed where fd.field_key='" + cur_field.getField_key() + "'");
                            for (Object obj : ftable_update.getObjects()) {
                                FieldDef fd = (FieldDef) obj;
                                if (fd.getField_key().equals(fielddef.getField_key())) {
                                    fd = fielddef;
                                    break;
                                }
                            }
                        }
                    } else {
                        saveObject(2);
                    }
                }
                cur_fd = (FieldDef) ftable_update.getCurrentRow();
                jtaFormulaTextUpdate.setText(cur_fd.getRelation_text());
                update_change_flag = false;
                update_change_def = null;
            }
        });
        ftable_update.addRowChangeListner(new RowChangeListner() {

            @Override
            public void rowChanged(Object obj) {
                cur_fd = (FieldDef) obj;
                update_change_def = (FieldDef) obj;
            }
        });
        ftable_not_null.addRowChangeListner(new RowChangeListner() {

            @Override
            public void rowChanged(Object obj) {
                not_null_change_def = (FieldDef) obj;
            }
        });
        ftable_not_null.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                Runnable run2 = new Runnable() {

                    @Override
                    public void run() {
                        if (not_null_change_def != null) {
                            saveObject(tabIndex);
                        }
                    }
                };
                SwingUtilities.invokeLater(run2);
            }
        });
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveObject(tabIndex);
            }
        });
        jcbUse.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                update_entity_change_flag = true;
                saveObject(tabIndex);
            }
        });
        jtpMain.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                String msg = "";
                if (tabIndex == 0 && not_null_change_def != null) {
                    msg = "取值唯一设置有改动";
                } else if (tabIndex == 1 && info_change_flag) {
                    msg = "脚本或提示有改动";
                } else if (tabIndex == 2 && update_change_flag) {
                    msg = "脚本有改动";
                } else if (tabIndex == 3 && update_entity_change_flag) {
                    msg = "脚本有改动";
                } else if (tabIndex == 4 && init_change_flag) {
                    msg = "脚本有改动";
                }
                if (!msg.equals("")) {
                    if (JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent(btnSave), msg + "，是否保存", "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.OK_OPTION) {
                        saveObject(tabIndex);
                    }
                } else if (tabIndex == 1 && info_change_def != null) {
                    saveObject(tabIndex);
                } else if (tabIndex == 2 && update_change_def != null) {
                    saveObject(tabIndex);
                }
                info_change_def = null;
                update_change_def = null;
                info_change_flag = false;
                update_change_flag = false;
                tabIndex = jtpMain.getSelectedIndex();
                if (tabIndex == 3) {
                    update_entity_change_flag = false;
                }
                setEditState();
            }
        });
        CloseAction.doCloseAction(btnClose);
        btnCheckInfo.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cur_field != null) {
                    cur_field.setUsed_flag(true);
                }
                save("info", true);
                info_change_def = null;
                info_change_flag = false;
            }
        });
        btnCheckUpdate.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if ((FieldDef) ftable_update.getCurrentRow() != null) {
                    ((FieldDef) ftable_update.getCurrentRow()).setRelation_flag(true);
                }
                save("update", true);
                update_change_def = null;
                update_change_flag = false;
            }
        });
        btnClearInfo.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                info_change_flag = true;
                jtaFormulaTextInfo.setText("");
            }
        });
        btnClearUpdate.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                update_change_flag = true;
                jtaFormulaTextUpdate.setText("");
            }
        });
        btnClearUpdate1.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                update_entity_change_flag = true;
                jtaFormulaTextUpdateEntity.setText("");
            }
        });
        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delObject(tabIndex);
            }
        });
        btnCheckUpdateEntity.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                save("updateEntity", true);
            }
        });
        btnCheckUpdate1.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                save("init", true);
            }
        });
        btnClearUpdate2.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                init_change_flag = true;
                jtaFormulaTextInit.setText("");
            }
        });
        ftable_update_entity.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                Object obj = ftable_update_entity.getCurrentRow();
                if (cur_entity_fd == obj) {
                    return;
                }
                cur_entity_fd = (FieldDef) obj;
                refreshCode(cur_entity_fd);
            }
        });
        ftable_not_null.setObjects(fieldDefs);
        ftable_update_entity.setObjects(fieldDefs);
        ftable_update.setObjects(fieldDefs);
        ftable_info.setObjects(fieldDefs);
        ftable_init.setObjects(fieldDefs);
        ComponentUtil.refreshJSplitPane(jSplitPane1, "FieldRegulaSetPanel.jSplitPane1");
        ComponentUtil.refreshJSplitPane(jSplitPane2, "FieldRegulaSetPanel.jSplitPane2");
        ComponentUtil.refreshJSplitPane(jSplitPane3, "FieldRegulaSetPanel.jSplitPane3");
        ComponentUtil.refreshJSplitPane(jSplitPane4, "FieldRegulaSetPanel.jSplitPane4");
        ComponentUtil.refreshJSplitPane(jSplitPane5, "FieldRegulaSetPanel.jSplitPane5");
        ComponentUtil.refreshJSplitPane(jSplitPane6, "FieldRegulaSetPanel.jSplitPane6");
        setEditState();
    }

    private void refreshCode(FieldDef fd) {
        if (fd.getCode_type_name() == null || fd.getCode_type_name().trim().equals("")) {
            ftable_update_code.deleteAllRows();
            return;
        }
        List<Code> codes = CodeManager.getCodeManager().getCodeListBy(fd.getCode_type_name());
        ftable_update_code.setObjects(codes);
    }
    //关联更新和关联提示的保存

    private ValidateSQLResult save(String type, boolean save_flag) {
        ValidateSQLResult result = null;
        if (type.equals("updateEntity")) {
            String package_path = EntityBuilder.getPackage(entity_def);
            Object bean = UtilTool.createUIDEntity(package_path + entity_def.getEntityName());
            entity_def.setLimit_script(jtaFormulaTextUpdateEntity.getText());
            entity_def.setLimit_flag(jcbUse.isSelected());
            if (entity_def.isLimit_flag() || save_flag) {
                result = CodeManager.getCodeManager().validateTriger(jtaFormulaTextUpdateEntity.getText(), bean);
                entity_def.setLimit_flag(result != null && result.getResult() == 0);
                jcbUse.setSelected(entity_def.isLimit_flag());
            }
        } else if (type.equals("init")) {
            entity_def.setInit_flag(jcbInitUse.isSelected());
            entity_def.setInit_script(jtaFormulaTextInit.getText());
            if (entity_def.isInit_flag() || save_flag) {
                entity_def.setInit_flag(true);
//                result = checkSQL(entity_def.getInit_script());
//                entity_def.setInit_flag(result != null && result.getResult() == 0);
                jcbInitUse.setSelected(entity_def.isInit_flag());
            }
        } else if (type.equals("info")) {
            ftable_info.editingStopped();
            info_change_flag = false;
            if (info_change_def == null) {
                info_change_def = cur_field;
            }
            if (info_change_def == null || info_change_def.getField_key() == null) {
                return null;
            }
            info_change_def.setRegula_text(jtaFormulaTextInfo.getText());
            info_change_def.setRegula_msg(jtaFormulaTextInfoMsg.getText());
            if (info_change_def.isRegula_use_flag() || save_flag) {
                result = checkSQL(jtaFormulaTextInfo.getText());
                info_change_def.setRegula_use_flag(result != null && result.getResult() == 0);
            }
            cur_field = info_change_def;
            ftable_info.updateUI();
        } else {
            ftable_update.editingStopped();
            update_change_flag = false;
            if (cur_fd == null) {
                return null;
            }
            update_change_def = cur_fd;
            update_change_def.setRelation_text(jtaFormulaTextUpdate.getText());
            if (update_change_def.isRelation_flag() || save_flag) {
                result = checkSQL(jtaFormulaTextUpdate.getText());
                update_change_def.setRelation_flag(result != null && result.getResult() == 0);
            }
            cur_fd = update_change_def;
            ftable_update.updateUI();
        }
        if (result != null) {
            if (result.getResult() != 0) {
                MsgUtil.showHRMsg(result, "语法校验错误");
                result.setResult(2);
            } else {
                result = save(type);
                if (save_flag) {
                    ShowSaveMsg(result);
                }
            }
        } else {
            result = save(type);
        }

        return result;
    }

    private ValidateSQLResult save(String type) {
        Object obj = null;
        if (type.equals("updateEntity") || type.equals("init")) {
            obj = entity_def;
        } else if (type.equals("info")) {
            obj = info_change_def;
        } else {
            if (update_change_def.isRelation_save_flag()) {
                update_change_def.setRelation_add_flag(false);
                update_change_def.setRelation_edit_flag(false);
            }
            obj = update_change_def;
        }
        ValidateSQLResult result = SysImpl.saveFieldRegula(obj);
        return result;
    }
    //校验过程，返回判断结果
    //type:"info"表示关联提示,"update"表示关联更新   

    private ValidateSQLResult checkSQL(String text) {
        Object bean = null;
        try {
            bean = Class.forName(EntityBuilder.getPackage(entity_def) + entity_def.getEntityName()).newInstance();
        } catch (InstantiationException ex) {
            log.error(ex);
        } catch (IllegalAccessException ex) {
            log.error(ex);
        } catch (ClassNotFoundException ex) {
            log.error(ex);
        }
        if (bean == null) {
            return null;
        }
        Object val;
        if (cur_field.getField_type().equals("Integer") || cur_field.getField_type().equals("Float")) {
            val = 0;
        } else {
            val = "";
        }
        ValidateSQLResult result = FieldTrigerManager.getFieldTrigerManager().validateTriger(text, bean, val, val);
        return result;
    }
    //保存主函数

    private void saveObject(int tabIndex) {
        ftable_not_null.stopEditing();
        ftable_info.stopEditing();
        ftable_update.stopEditing();
        ValidateSQLResult result = null;
        if (tabIndex == 0) {
            if (not_null_change_def == null) {
                return;
            }
            result = SysImpl.saveFieldRegula(not_null_change_def);
            if (result.getResult() == 0) {
                not_null_change_def.setNew_flag(0);
            }
            not_null_change_def = null;
        } else if (tabIndex == 1) {
            result = save("info", false);
        } else if (tabIndex == 2) {
            result = save("update", false);
        } else if (tabIndex == 3) {
            result = save("updateEntity", false);
        } else {
            result = save("init", false);
        }
        FieldTrigerManager.getFieldTrigerManager().refreshTriger();
        if (result == null) {
            return;
        }
        ShowSaveMsg(result);
    }

    private void ShowSaveMsg(ValidateSQLResult result) {
        if (result.getResult() == 0) {
            MsgUtil.showHRSaveSuccessMsg(this);
            if (tabIndex == 1) {
                cur_field.setNew_flag(0);
                ftable_info.updateUI();
            } else if (tabIndex == 2) {
                cur_fd.setNew_flag(0);
            } else if (tabIndex == 3) {
                CodeManager.getCodeManager().getHt_limit_script().clear();
            }
        } else if (result.getResult() != 2) {
            MsgUtil.showHRSaveErrorMsg(result);
        }
    }
    //删除

    private void delObject(int tabIndex) {
        if (tabIndex == 0) {
            return;
        }
        if (tabIndex == 1 && (cur_field == null || cur_field.getField_key() == null)) {
            return;
        }
        if (JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent(btnSave), "确定要删除当前选择的脚本规则吗", "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) != JOptionPane.OK_OPTION) {
            return;
        }
        Object obj = null;
        if (tabIndex == 3) {
            entity_def.setLimit_script("");
            entity_def.setLimit_flag(false);
            obj = entity_def;
        } else if (tabIndex == 1) {
            cur_field.setRegula_text("");
            cur_field.setRegula_msg("");
            cur_field.setRegula_use_flag(false);
            cur_field.setRegula_save_flag(false);
            obj = cur_field;
        } else {
            cur_fd.setRelation_flag(false);
            cur_fd.setRelation_text("");
            obj = cur_fd;
        }
        ValidateSQLResult result = SysImpl.saveFieldRegula(obj);
        if (result.getResult() == 0) {
            if (tabIndex == 3) {
                jtaFormulaTextUpdateEntity.setText("");
                update_entity_change_flag = false;
            } else if (tabIndex == 1) {
                ftable_info.setCurrentRow(cur_field);
                ftable_info.updateUI();
                jtaFormulaTextInfo.setText("");
                jtaFormulaTextInfoMsg.setText("");
                info_change_flag = false;
                info_change_def = null;
            } else {
                ftable_update.setCurrentRow(cur_fd);
                ftable_update.updateUI();
                jtaFormulaTextUpdate.setText("");
                update_change_flag = false;
                update_change_def = null;
            }
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnSave), "删除成功");
        } else {
            MsgUtil.showHRDelErrorMsg(result);
        }
    }

    private void setEditState() {
        if (tabIndex == 0) {
            btnDel.setEnabled(false);
        } else {
            btnDel.setEnabled(true);
        }
        if (tabIndex == 1) {
            cur_field = (FieldDef) ftable_info.getCurrentRow();
            if (!listener_flag) {
                listener_flag = true;
            }
        }
    }

    private void initToolBar() {
        toolbar.add(btnSave);
        toolbar.add(btnDel);
        toolbar.add(btnClose);
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
