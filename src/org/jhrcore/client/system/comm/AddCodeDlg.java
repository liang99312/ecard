/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddCodeDlg.java
 *
 * Created on 2009-12-23, 9:23:02
 */
package org.jhrcore.client.system.comm;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.PinYinMa;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.Code;
import org.jhrcore.entity.IObjectAttribute;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.right.RoleCode;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.SysImpl;
import org.jhrcore.ui.BeanPanel;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author Administrator
 */
public class AddCodeDlg extends javax.swing.JDialog {

    /** Creates new form AddCodeDlg */
    private DefaultMutableTreeNode curNode;
    private Hashtable<String, HashSet<String>> code_tags = new Hashtable<String, HashSet<String>>();
    private List<DefaultMutableTreeNode> select_nodes;
    private Code addcode = null;
    private BeanPanel beanPanel = new BeanPanel();
    private List<IPickCodeAddListener> listeners = new ArrayList<IPickCodeAddListener>();
    private String root_id = null;

    public void addPickDeptAddListener(IPickCodeAddListener listener) {
        listeners.add(listener);
    }

    public void delPickDeptAddListener(IPickCodeAddListener listener) {
        listeners.remove(listener);
    }

    public AddCodeDlg(DefaultMutableTreeNode curNode, List<DefaultMutableTreeNode> select_nodes, String root_id) {
        this.curNode = curNode;
        this.select_nodes = select_nodes;
        this.root_id = root_id;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        checkRe = new javax.swing.JCheckBox();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        pnlMain = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        checkRe.setText("保存后重新生成");

        btnOk.setText("确定");

        btnCancel.setText("取消");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkRe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addGap(22, 22, 22))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkRe)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap())
        );

        pnlMain.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JCheckBox checkRe;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel pnlMain;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        if (curNode.getLevel() <= 1) {
            refreshRootCodeId();
        } else {
            refreshCodeId(curNode);
        }
        pnlMain.add(beanPanel, BorderLayout.CENTER);
        beanPanel.setEditable(true);
        beanPanel.setColumns(1);
        List<String> fields = new ArrayList<String>();
        fields.add("code_id");
        fields.add("parent_id");
        fields.add("code_name");
        List<String> disable_fields = new ArrayList<String>();
        disable_fields.add("parent_id");
        beanPanel.setFields(fields);
        beanPanel.setDisable_fields(disable_fields);
        if (root_id != null) {
            addRoot();
        } else {
            addObj();
        }
    }

    private void setupEvents() {
        CloseAction.doCloseAction(btnCancel);
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (!save()) {
                    return;
                }
                if (checkRe.isSelected()) {
                    addcode = null;
                    addObj();
                } else {
                    dispose();
                }
            }
        });

    }

    private boolean save() {
        if (addcode.getCode_id() == null || addcode.getCode_id().trim().equals("") || addcode.getCode_name() == null || addcode.getCode_name().trim().equals("")) {
            JOptionPane.showMessageDialog(
                    JOptionPane.getFrameForComponent(btnOk), "编码和名称均不可为空", // message
                    "错误", // title
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        Object parent_obj = curNode.getUserObject();
        Code parent_code1 = null;
        if (parent_obj instanceof Code) {
            parent_code1 = (Code) parent_obj;
            addcode.setCode_tag(parent_code1.getCode_tag().substring(0, 2) + addcode.getCode_id());
            addcode.setCode_type(parent_code1.getCode_type());
        } else {
            if (addcode.getCode_id().length() != 2) {
                JOptionPane.showMessageDialog(
                        JOptionPane.getFrameForComponent(btnOk), "顶级编码长度必须为2", // message
                        "错误", // title
                        JOptionPane.ERROR_MESSAGE);
                return false;
            }
            addcode.setCode_type(addcode.getCode_name());
            addcode.setCode_tag(addcode.getCode_id());
        }
        if (!addcode.getParent_id().equals("ROOT") && !addcode.getCode_id().startsWith(addcode.getParent_id()) && addcode.getCode_level() > 2) {
            JOptionPane.showMessageDialog(
                    JOptionPane.getFrameForComponent(btnOk), "编码必须以父级编码开头,并且和父编码不能相同", // message
                    "错误", // title
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (addcode.getCode_id().equals(addcode.getParent_id())) {
            JOptionPane.showMessageDialog(
                    JOptionPane.getFrameForComponent(btnOk), "编码和父编码不能相同", // message
                    "错误", // title
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        String hql = "select 1 from Code d where lower(d.code_id)='" + addcode.getCode_id().toLowerCase() + "' and ";
        if (parent_code1 != null) {
            hql += "lower(d.code_tag) like '" + parent_code1.getCode_tag().toLowerCase() + "%' and d.code_level=" + addcode.getCode_level();
        } else {
            hql += "d.parent_id='ROOT'";
        }
        boolean bexists = CommUtil.exists(hql);
        if (bexists) {
            JOptionPane.showMessageDialog(
                    JOptionPane.getFrameForComponent(btnOk), "该编码已经存在", // message
                    "错误", // title
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (CommUtil.exists("select 1 from Code where code_type ='" + addcode.getCode_type() + "' and code_name ='" + addcode.getCode_name() + "' and code_level=" + addcode.getCode_level() + " and parent_id='" + addcode.getParent_id() + "'")) {
            JOptionPane.showMessageDialog(
                    JOptionPane.getFrameForComponent(btnOk), "编码名称重复！", // message
                    "错误", // title
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        addcode.setEditType(1);
        if (!addcode.getParent_id().equals("ROOT")) {
            addcode.setCode_tag(parent_code1.getCode_tag().substring(0, 2) + addcode.getCode_id());
        } else {
            if (SysUtil.isNum(addcode.getCode_id())) {
                JOptionPane.showMessageDialog(
                        JOptionPane.getFrameForComponent(btnOk), "顶级编码不能是纯数字！", // message
                        "错误", // title
                        JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        addcode.setPym(PinYinMa.ctoE(addcode.getCode_name()));
        RoleCode rc = null;
        if (!UserContext.isSA && "ROOT".equals(addcode.getParent_id())) {
            rc = (RoleCode) UtilTool.createUIDEntity(RoleCode.class);
            rc.setAdd_flag(true);
            rc.setCode(addcode);
            rc.setDel_flag(true);
            rc.setEdit_flag(true);
            rc.setRole(UserContext.cur_role);
        }
        ValidateSQLResult result = SysImpl.saveCode(addcode, rc);
        if (result.getResult() == 0) {
            if (rc != null) {
                UserContext.codeRights.put(addcode.getCode_id(), rc);
            }
            DefaultMutableTreeNode tmp_parent = curNode;
            addcode.setNew_flag(0);
            while (tmp_parent.getUserObject() instanceof Code) {
                tmp_parent = (DefaultMutableTreeNode) tmp_parent.getParent();
            }
            int grades = curNode.getLevel();
            updateGrades(tmp_parent, grades);
            for (IPickCodeAddListener listener : listeners) {
                listener.AddCode(addcode);
            }
            return true;
        } else {
            MsgUtil.showHRSaveErrorMsg(result);
        }
        return false;
    }

    private void refreshRootCodeId() {
        HashSet<String> root_codes = new HashSet<String>();
        for (DefaultMutableTreeNode node : select_nodes) {
            Enumeration enumt = node.children();
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode child_node = (DefaultMutableTreeNode) enumt.nextElement();
                Code code = (Code) child_node.getUserObject();
                root_codes.add(code.getCode_id().toUpperCase());
            }
        }
        code_tags.put("ROOT", root_codes);
    }

    private void refreshCodeId(DefaultMutableTreeNode node) {
        Enumeration enumt = node.breadthFirstEnumeration();
        Code parent_code = (Code) node.getUserObject();
        HashSet<String> child_codes = new HashSet<String>();
        while (enumt.hasMoreElements()) {
            DefaultMutableTreeNode child_node = (DefaultMutableTreeNode) enumt.nextElement();
            if (node == child_node) {
                continue;
            }
            Code child_code = (Code) child_node.getUserObject();
            child_codes.add(child_code.getCode_id().toUpperCase());
        }
        code_tags.put(parent_code.getCode_id(), child_codes);
    }

    private void updateGrades(DefaultMutableTreeNode parent, int grades) {
        for (int i = 0; i < parent.getChildCount(); i++) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) parent.getChildAt(i);
            Code code = (Code) node.getUserObject();
            code.setGrades(grades);
            updateGrades(node, grades);
        }
    }
    //产生一个新编码

    private void addObj() {
        Code parent_code = null;
        addcode = (Code) UtilTool.createUIDEntity(Code.class);
        beanPanel.setBean(addcode);
        addcode.setEditType(IObjectAttribute.EDITTYPE_NEW);
        addcode.setCode_level(curNode.getLevel());
        DefaultMutableTreeNode tmp_parent = curNode;
        HashSet<String> exist_codes = new HashSet<String>();
        int code_len = 2;
        String tmp_code_id = "";
        if (!(tmp_parent.getUserObject() instanceof Code)) {
            addcode.setParent_id("ROOT");
            addcode.setGrades(1);
            exist_codes.addAll(code_tags.get("ROOT"));
            tmp_code_id = SysUtil.getNewCode("", exist_codes, code_len, 1);
            if (tmp_code_id == null) {
                return;
            }
            addcode.setCode_id(tmp_code_id);
            exist_codes.add(tmp_code_id);
            code_tags.put("ROOT", exist_codes);
        } else {
            DefaultMutableTreeNode root_node = curNode;
            while (!((Code) root_node.getUserObject()).getParent_id().equals("ROOT")) {
                root_node = (DefaultMutableTreeNode) root_node.getParent();
            }
            parent_code = (Code) tmp_parent.getUserObject();
            if (code_tags.get(((Code) root_node.getUserObject()).getCode_id()) != null) {
                exist_codes.addAll(code_tags.get(((Code) root_node.getUserObject()).getCode_id()));
            }
            Enumeration enumt = curNode.children();
            if (enumt.hasMoreElements()) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                Code child_code = (Code) node.getUserObject();
                if (curNode.getLevel() == 2) {
                    code_len = child_code.getCode_id().length();
                } else {
                    code_len = child_code.getCode_id().length() - parent_code.getCode_id().length();
                }
            }
            if (curNode.getLevel() == 2) {
                tmp_code_id = SysUtil.getNewCode("", exist_codes, code_len, 1);
                exist_codes.add(tmp_code_id.toUpperCase());
            } else {
                int childs = curNode.getChildCount();
                childs = childs == 0 ? 1 : childs + 1;
                tmp_code_id = SysUtil.getNewCode(parent_code.getCode_id(), exist_codes, code_len, childs);
                exist_codes.add(tmp_code_id);
            }
            if (tmp_code_id == null) {
                return;
            }
            addcode.setParent_id(parent_code.getCode_id());
            addcode.setCode_id(tmp_code_id);
            code_tags.put(((Code) root_node.getUserObject()).getCode_id(), exist_codes);
            addcode.setCode_type(parent_code.getCode_type());
            addcode.setCode_tag(parent_code.getCode_tag().substring(0, 2) + addcode.getCode_id());
            addcode.setGrades(parent_code.getCode_level() + 1);
        }
        addcode.setUsed(isUsed(tmp_parent));
        beanPanel.bind();
    }

    private void addRoot() {
        addcode = (Code) UtilTool.createUIDEntity(Code.class);
        beanPanel.setBean(addcode);
        addcode.setEditType(IObjectAttribute.EDITTYPE_NEW);
        addcode.setCode_level(1);
        addcode.setCode_id(root_id);
        addcode.setParent_id("ROOT");
        addcode.setGrades(1);
        addcode.setUsed(true);
        beanPanel.bind();
    }

    private boolean isUsed(DefaultMutableTreeNode node) {
        while (!(node.getUserObject() instanceof String)) {
            node = (DefaultMutableTreeNode) node.getParent();
        }
        return node.getUserObject().equals("已选");
    }
}
