/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jhrcore.client.ecard.ui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.entity.ecard.Ecard;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.ComponentUtil;

/**
 *
 * @author Jane
 */
public class CardPanel extends javax.swing.JPanel {

    private CardTreeModel model;
    private JTree tree;
    private Set<DefaultMutableTreeNode> selected_nodes = new HashSet<DefaultMutableTreeNode>();
    private String search_text = "";
    private Ecard cur_card;
    private String c_type = "";

    public CardPanel() {
        initComponents();
        initOthers();
        setupEvents();
    }
    
    public CardPanel(String str) {
        this.c_type = str;
        initComponents();
        initOthers();
        setupEvents();
    }

    private void initOthers() {
        model = new CardTreeModel(c_type);
        tree = new JTree(model);
        tree.setRootVisible(true);
        tree.setShowsRootHandles(true);
        HRRendererView.getEcardMap(tree).initTree(tree);
        pnlCard.add(new JScrollPane(tree), BorderLayout.CENTER);
    }

    private void setupEvents() {
        ActionListener alSearch = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                searchNode();
            }
        };
        btnSearch.addActionListener(alSearch);
        tf_search.addActionListener(alSearch);
    }

    public void searchNode() {
        String val = tf_search.getText();
        if (val.equals("")) {
            return;
        }
        if (!search_text.equals(val)) {
            selected_nodes.clear();
        }
        search_text = val;
        DefaultMutableTreeNode node = locateEmp(search_text);
        if (node == null) {
            selected_nodes.clear();
            node = locateEmp(search_text);
        }
        if (node == null) {
            return;
        }
        ComponentUtil.initTreeSelection(tree, node);
        cur_card = (Ecard) node.getUserObject();
    }

    public DefaultMutableTreeNode locateEmp(String val) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getModel().getRoot();
        DefaultMutableTreeNode resultNode = null;
        Enumeration deptEnum = node.depthFirstEnumeration();

        Pattern p = Pattern.compile(val);
        try {
            while (deptEnum.hasMoreElements()) {
                DefaultMutableTreeNode tmpNode = (DefaultMutableTreeNode) deptEnum.nextElement();
                if (!(tmpNode.getUserObject() instanceof Ecard)) {
                    continue;
                }
                Ecard e1 = (Ecard) tmpNode.getUserObject();
                String field_val = null;
                Matcher m;
                field_val = e1.getEcard_user();
                if (field_val != null) {
                    m = p.matcher(field_val);
                    if (m.find()) {
                        if (selected_nodes.contains(tmpNode)) {
                            continue;
                        } else {
                            resultNode = tmpNode;
                            selected_nodes.add(resultNode);
                            break;
                        }
                    }
                }
                field_val = e1.getEcard_code();
                if (field_val != null) {
                    p = Pattern.compile(val);
                    m = p.matcher(field_val);
                    if (m.find()) {
                        if (selected_nodes.contains(tmpNode)) {
                            continue;
                        } else {
                            resultNode = tmpNode;
                            selected_nodes.add(resultNode);
                            break;
                        }
                    }
                }
            }

        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }
        return resultNode;
    }

    public JTree getCardTree() {
        return tree;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar2 = new javax.swing.JToolBar();
        jLabel2 = new javax.swing.JLabel();
        tf_search = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        pnlCard = new javax.swing.JPanel();

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);
        jToolBar2.setMaximumSize(new java.awt.Dimension(2147483647, 24));
        jToolBar2.setMinimumSize(new java.awt.Dimension(73, 24));
        jToolBar2.setPreferredSize(new java.awt.Dimension(73, 24));

        jLabel2.setText(" ≤È’“£∫");
        jToolBar2.add(jLabel2);
        jToolBar2.add(tf_search);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/search.png"))); // NOI18N
        btnSearch.setFocusable(false);
        btnSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(btnSearch);

        pnlCard.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCard, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JPanel pnlCard;
    private javax.swing.JTextField tf_search;
    // End of variables declaration//GEN-END:variables
}
