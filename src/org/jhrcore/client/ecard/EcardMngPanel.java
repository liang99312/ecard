/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EcardMngPanel.java
 *
 * Created on 2012-3-6, 9:35:08
 */
package org.jhrcore.client.ecard;

import com.foundercy.pf.control.listener.IPickColumnSumListener;
import com.foundercy.pf.control.listener.IPickFieldOrderListener;
import com.foundercy.pf.control.listener.IPickFieldSetListener;
import com.foundercy.pf.control.listener.IPickQueryExListener;
import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.DbUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.client.ecard.ui.AddEcardPanel;
import org.jhrcore.client.ecard.ui.CardPanel;
import org.jhrcore.mutil.ReportUtil;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.ecard.Ecard;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.BeanPanel;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.ModelFrame;
import org.jhrcore.ui.task.IModulePanel;
import org.jhrcore.ui.listener.CommEditAction;
import org.jhrcore.ui.listener.IPickWindowCloseListener;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.ImageUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author admin
 */
public class EcardMngPanel extends javax.swing.JPanel implements IModulePanel {

    private JButton btnAdd = new JButton("新增");
    private JButton btnEdit = new JButton("编辑");
    private JButton btnView = new JButton("浏览");
    private JButton btnSave = new JButton("保存");
    private JButton btnCancel = new JButton("取消");
    private JButton btnDel = new JButton("删除");
    private JButton btnReport = new JButton("常用报表");
    private JButton btnTool = new JButton("工具");
    private JLabel jLabel7 = new JLabel(" 查找：");
    private JTextField comBoxSearch = new JTextField();
    private JCheckBox chbCurColumn = new JCheckBox("当前列", false);
    private JButton btnSearch = new JButton("", ImageUtil.getSearchIcon());
    private JMenu mEditWay = new JMenu("编辑方式");
    private JMenuItem miCardEdit = new JMenuItem("卡片编辑");
    private JMenuItem miTableEdit = new JMenuItem("网格编辑");
    private JMenuItem miExport = new JMenuItem("导出Excel");
    private List pay_system_list = new ArrayList();
    private JPopupMenu menu = new JPopupMenu();
    private FTable ftable;
    private List<TempFieldInfo> all_infos = new ArrayList<TempFieldInfo>();
    private List<TempFieldInfo> default_infos = new ArrayList<TempFieldInfo>();
    private List<TempFieldInfo> default_orders = new ArrayList<TempFieldInfo>();
    private String order_sql = "ecard_code";
    private Object curEcard = null;
    private BeanPanel beanPanel = new BeanPanel();
    private boolean editable = false;
    private boolean editStyle = false;//false:网格；true：卡片
    public static final String module_code = "EcardMng";
    private String sum_sql;
    private CardPanel cardPanel = null;
    private Object curTreeNode;

    /**
     * Creates new form EcardMngPanel
     */
    public EcardMngPanel() {
        initComponents();
        initOthers();
        setupEvents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        pnlLeft = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        toolBar = new javax.swing.JToolBar();
        jtpMain = new javax.swing.JTabbedPane();
        jspRight = new javax.swing.JSplitPane();
        pnlTable = new javax.swing.JPanel();
        pnlCard = new javax.swing.JPanel();

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOneTouchExpandable(true);

        pnlLeft.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(pnlLeft);

        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.setMaximumSize(new java.awt.Dimension(1240, 24));
        toolBar.setMinimumSize(new java.awt.Dimension(106, 24));
        toolBar.setPreferredSize(new java.awt.Dimension(106, 24));

        jspRight.setDividerLocation(250);
        jspRight.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jspRight.setOneTouchExpandable(true);

        pnlTable.setLayout(new java.awt.BorderLayout());
        jspRight.setTopComponent(pnlTable);

        pnlCard.setLayout(new java.awt.BorderLayout());
        jspRight.setRightComponent(pnlCard);

        jtpMain.addTab("基本信息", jspRight);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
            .addComponent(jtpMain)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtpMain, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jspRight;
    private javax.swing.JTabbedPane jtpMain;
    private javax.swing.JPanel pnlCard;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        cardPanel = new CardPanel("noCard");
        pnlLeft.add(cardPanel, BorderLayout.CENTER);
        initToolBar();
        final Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, -1);
        ftable = new FTable(Ecard.class, true, true, true, "EcardMngPanel"){

            @Override
            public Color getCellForegroud(String fileName, Object cellValue, Object row_obj) {
                if (row_obj != null && (row_obj instanceof Ecard)) {
                    Ecard e = (Ecard) row_obj;
                    if(e.getEcard_ddate() != null && e.getEcard_ddate().after(c.getTime())){
                        return Color.RED;
                    }
                }
                return null;
            }
        };
        List<TempFieldInfo> shift_infos = EntityBuilder.getCommFieldInfoListOf(Ecard.class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : shift_infos) {
            default_infos.add(tfi);
            all_infos.add(tfi);
        }
        ftable.setAll_fields(all_infos, default_infos, default_orders, "EcardMngPanel");
        order_sql = SysUtil.getSQLOrderString(ftable.getCurOrderScheme(), order_sql, all_infos);
        ftable.setRight_allow_flag(true);
        pnlTable.add(ftable);
        pnlCard.add(new JScrollPane(beanPanel));
        beanPanel.setColumns(3);
    }

    private void setupEvents() {
        cardPanel.getCardTree().addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                curTreeNode = e.getPath().getLastPathComponent();
                if (curTreeNode != null) {
                    fetchMainData(null, null);
                }
            }
        });
        ftable.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                CommEditAction.doRowSaveAction(curEcard, editable);
                if (curEcard == ftable.getCurrentRow()) {
                    return;
                }
                curEcard = ftable.getCurrentRow();
                BeanPanel.refreshUIForTable(ftable, beanPanel, editable && editStyle);
                ContextManager.setStatusBar(ftable.getObjects().size());
            }
        });
        ftable.addPickFieldOrderListener(new IPickFieldOrderListener() {

            @Override
            public void pickOrder(ShowScheme showScheme) {
                order_sql = SysUtil.getSQLOrderString(showScheme, order_sql, all_infos);
                fetchMainData(ftable.getCur_query_scheme(), null);
            }
        });
        ftable.addPickQueryExListener(new IPickQueryExListener() {

            @Override
            public void pickQuery(QueryScheme qs) {
                fetchMainData(qs, null);
            }
        });
        ftable.addPickFieldSetListener(new IPickFieldSetListener() {

            @Override
            public void pickField(ShowScheme showScheme) {
                BeanPanel.refreshUIForTable(ftable, beanPanel, editable && editStyle);
            }
        });
        ftable.addPickColumnSumListener(new IPickColumnSumListener() {

            @Override
            public String pickSumSQL() {
                return sum_sql + "@sql";
            }
        });

        btnEdit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                setEditState(true, editStyle);
            }
        });
        btnView.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                CommEditAction.doViewAction(curEcard, ftable, beanPanel);
                setEditState(false, editStyle);
            }
        });
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                CommEditAction.doCancelAction(curEcard, ftable, beanPanel);
                setEditState(editable, editStyle);
            }
        });
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                CommEditAction.doSaveAction(curEcard, ftable, beanPanel);
                setEditState(editable, editStyle);
            }
        });
        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delObj();
            }
        });
        ActionListener search_listener = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                doQuickSearch(comBoxSearch.getText());
            }
        };
        btnSearch.addActionListener(search_listener);
        comBoxSearch.addActionListener(search_listener);

        btnReport.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ReportUtil.buildCommReportMenu(btnReport, module_code, null);
            }
        });
        miExport.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ftable.exportData();
            }
        });
        ComponentUtil.refreshJSplitPane(jspRight, "EcardMngPanel.jspRight");
        fetchMainData(null, null);

    }

    private void initToolBar() {
        toolBar.add(btnAdd);
        toolBar.add(btnEdit);
        toolBar.add(btnView);
        toolBar.add(btnSave);
        toolBar.add(btnCancel);
        toolBar.add(btnDel);
        toolBar.addSeparator();
        toolBar.add(btnTool);
        toolBar.add(jLabel7);
        toolBar.add(comBoxSearch);
        toolBar.add(btnSearch);
        toolBar.add(chbCurColumn);

        menu.add(mEditWay);
        menu.addSeparator();
        menu.add(miExport);
        mEditWay.add(miTableEdit);
        mEditWay.add(miCardEdit);
        ComponentUtil.setSize(comBoxSearch, 120, 22);
        ComponentUtil.setSize(btnSearch, 22, 22);
        btnTool.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                menu.show(btnTool, 0, 25);
            }
        });
        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                AddEcardPanel pnl = new AddEcardPanel();
                ModelFrame mf = ModelFrame.showModel(ContextManager.getMainFrame(), pnl, true, "登记信用卡", 650, 500, false);
                mf.addIPickWindowCloseListener(new IPickWindowCloseListener() {

                    @Override
                    public void pickClose() {
                        fetchMainData(null, null);
                    }
                });
                mf.setVisible(true);
            }
        });

        miTableEdit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                setEditState(editable, false);
            }
        });
        miCardEdit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                setEditState(editable, true);
            }
        });

    }

    private void fetchMainData(QueryScheme qs, String s_where) {
        if (curTreeNode instanceof DefaultMutableTreeNode) {
            Object t_obj = ((DefaultMutableTreeNode) curTreeNode).getUserObject();
            String where_sql = "";
            if (t_obj instanceof String) {
                if ("所有卡".equals(t_obj.toString())) {
                    
                }else if("已激活".equals(t_obj.toString())){
                    where_sql += " and ecard_state = '已激活'";
                }else if("已停止".equals(t_obj.toString())){
                    where_sql += " and ecard_state = '已停止'";
                }else if("普养".equals(t_obj.toString())){
                    where_sql += " and ecard_type = '普养'";
                    DefaultMutableTreeNode p_node = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) curTreeNode).getParent();
                    if("已激活".equals(p_node.getUserObject().toString())){
                        where_sql += " and ecard_state = '已激活'";
                    }else{
                        where_sql += " and ecard_state = '已停止'";
                    }
                }else if("中养".equals(t_obj.toString())){
                    where_sql += " and ecard_type = '中养'";
                    DefaultMutableTreeNode p_node = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) curTreeNode).getParent();
                    if("已激活".equals(p_node.getUserObject().toString())){
                        where_sql += " and ecard_state = '已激活'";
                    }else{
                        where_sql += " and ecard_state = '已停止'";
                    }
                }else if("精养".equals(t_obj.toString())){
                    where_sql += " and ecard_type = '精养'";
                    DefaultMutableTreeNode p_node = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) curTreeNode).getParent();
                    if("已激活".equals(p_node.getUserObject().toString())){
                        where_sql += " and ecard_state = '已激活'";
                    }else{
                        where_sql += " and ecard_state = '已停止'";
                    }
                }
            }
            ftable.setCur_query_scheme(qs);
            String sql = " from Ecard where 1=1";
            if (qs != null) {
                sql += " and Ecard.ecard_key in(" + qs.buildSql() + ")";
            }
            if (s_where != null && !s_where.trim().equals("")) {
                sql += " and (" + s_where + ")";
            }
            sql += where_sql;
            sum_sql = sql;
            sql = "select ecard_key" + sql + " order by " + order_sql;
            PublicUtil.getProps_value().setProperty(Ecard.class.getName(), "from Ecard n where n.ecard_key in");
            List list = CommUtil.selectSQL(DbUtil.tranSQL(sql));
            ftable.setObjects(list);
            refreshStatus();
        }
    }

    private void doQuickSearch(String text) {
        if (text == null || text.trim().equals("")) {
            return;
        }
        text = SysUtil.getQuickSearchText(text);
        String s_where = "";
        if (chbCurColumn.isSelected()) {
            s_where = ftable.getQuickSearchSQL("Ecard", text);
        } else {
            s_where = "(upper(ecard_code) like '" + text + "%' or upper(ecard_name) like '" + text + "%')";
        }
        fetchMainData(ftable.getCur_query_scheme(), s_where);
    }

    private void setEditState(boolean editable, boolean editStyle) {
        this.editStyle = editStyle;
        this.editable = editable;
        ComponentUtil.setIcon(miTableEdit, editStyle ? "blank" : "editWay");
        ComponentUtil.setIcon(miCardEdit, editStyle ? "editWay" : "blank");
        btnEdit.setEnabled(UserContext.hasFunctionRight(module_code + ".btnEdit") && !editable);
        btnDel.setEnabled(UserContext.hasFunctionRight(module_code + ".btnEdit") && !editable);
        btnCancel.setEnabled(UserContext.hasFunctionRight(module_code + ".btnEdit") && editable);
        btnSave.setEnabled(UserContext.hasFunctionRight(module_code + ".btnEdit") && editable);
        btnView.setEnabled(UserContext.hasFunctionRight(module_code + ".btnEdit") && editable);
        ftable.editingStopped();
        ftable.setEditable(editable && !editStyle);
        BeanPanel.refreshUIForTable(ftable, beanPanel, editable && editStyle);
    }

    private void delObj() {
        List<String> keys = ftable.getSelectKeys();
        if (keys.isEmpty()) {
            return;
        }
        if (MsgUtil.showNotConfirmDialog(CommMsg.DEL_MESSAGE)) {
            return;
        }
        ValidateSQLResult result = CommUtil.deleteObjs("Ecard", "ecard_key", keys);
        if (result.getResult() == 0) {
            MsgUtil.showInfoMsg(CommMsg.DELSUCCESS_MESSAGE);
            ftable.deleteSelectedRows();
        } else {
            MsgUtil.showHRDelErrorMsg(result);
        }
    }

    @Override
    public void setFunctionRight() {
        ComponentUtil.setSysFuntion(this, module_code);
        ftable.setExportItemEnable(miExport.isEnabled());
        setEditState(false, false);
    }

    @Override
    public void pickClose() {
    }

    @Override
    public void refresh() {
        refreshStatus();
    }

    private void refreshStatus() {
        ContextManager.setStatusBar(ftable.getObjects().size());
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
