/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeptAddDlg.java
 *
 * Created on 2009-7-27, 11:37:48
 */
package org.jhrcore.client.dept;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.comm.HrLog;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.client.personnel.comm.EmpCardUtil;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.SysParameter;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.DeptImpl;
import org.jhrcore.msg.dept.DeptMngMsg;
import org.jhrcore.mutil.DeptUtil;
import org.jhrcore.mutil.EmpUtil;
import org.jhrcore.ui.BeanPanel;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class DeptAddDlg extends javax.swing.JDialog implements IModuleCode {

    private DefaultMutableTreeNode parent_node;
    private DeptCode deptCode;
    private BeanPanel beanPanel = new BeanPanel();
    private SysParameter sp;
    private Object parent_obj;
    private DeptCode parent_dept;
    private boolean flag;
    private boolean clickOk;
    private List<IPickDeptAddListener> listeners = new ArrayList<IPickDeptAddListener>();
    private Hashtable<String, String> middleKeys = new Hashtable<String, String>();
    private HrLog log = new HrLog("DeptMng.新增部门");
    private int parent_len = 1;
    private final String module_code = "DeptMng.btnAdd";

    public DeptAddDlg() {
        this.setTitle("新增部门");
        initComponents();
        initOthers();
        setupEvents();
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }

    public DeptAddDlg(java.awt.Frame parent, DefaultMutableTreeNode parent_node, SysParameter sp, boolean flag) {
        super(parent);
        this.setTitle("新增部门");
        this.sp = sp;
        this.parent_node = parent_node;
        parent_len = parent_node.getLevel();
        this.flag = flag;
        initComponents();
        initOthers();
        setupEvents();
    }

    public void addPickDeptAddListener(IPickDeptAddListener listener) {
        listeners.add(listener);
    }

    public void delPickDeptAddListener(IPickDeptAddListener listener) {
        listeners.remove(listener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jrbSibling = new javax.swing.JRadioButton();
        jrbChild = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jcbClose = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        buttonGroup1.add(jrbSibling);
        jrbSibling.setSelected(true);
        jrbSibling.setText("同级部门");

        buttonGroup1.add(jrbChild);
        jrbChild.setText("子级部门");

        jPanel1.setLayout(new java.awt.BorderLayout());

        btnOk.setText("保存");

        btnCancel.setText("关闭");

        jcbClose.setText("保存后重新生成");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jcbClose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addGap(32, 32, 32))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(jcbClose)
                    .addComponent(btnOk))
                .addGap(74, 74, 74))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jrbSibling)
                .addGap(30, 30, 30)
                .addComponent(jrbChild)
                .addContainerGap(187, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbSibling)
                    .addComponent(jrbChild))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox jcbClose;
    private javax.swing.JRadioButton jrbChild;
    private javax.swing.JRadioButton jrbSibling;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        List list = CommUtil.fetchEntities("from SysParameter sp where sp.sysparameter_code like 'Dept.MidDept%' and sp.sysparameter_value is not null");
        if (list != null) {
            for (Object obj : list) {
                SysParameter mid_sp = (SysParameter) obj;
                if (mid_sp.getSysparameter_value().trim().equals("")) {
                    continue;
                }
                middleKeys.put(mid_sp.getSysParameter_key().substring(12), mid_sp.getSysparameter_value().trim().replace("第", "").replace("级", ""));
            }
        }
        if (!flag) {
            jrbSibling.setEnabled(false);
            jrbChild.setSelected(true);
        }
        parent_obj = parent_node.getUserObject();
        deptCode = (DeptCode) UtilTool.createUIDEntity(DeptCode.class);
        beanPanel.setBean(deptCode);
        beanPanel.setEditable(true);
        beanPanel.setColumns(1);
        beanPanel.bind();
        jPanel1.add(new JScrollPane(beanPanel), BorderLayout.CENTER);
    }

    private void setupEvents() {
        jrbSibling.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                updateDept(false);
            }
        });
        jrbChild.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                updateDept(true);
            }
        });
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                clickOk = true;
                deptCode = (DeptCode) beanPanel.getBean();
                if (validate(deptCode)) {
                    Hashtable<Integer, String> middle_depts = new Hashtable<Integer, String>();
                    DefaultMutableTreeNode middle_node = parent_node;
                    while (middle_node != null && middle_node.getUserObject() instanceof DeptCode) {
                        DeptCode dc = (DeptCode) middle_node.getUserObject();
                        middle_depts.put(dc.getGrade(), dc.getContent());
                        middle_node = (DefaultMutableTreeNode) middle_node.getParent();
                    }
                    middle_depts.put(deptCode.getGrade(), deptCode.getContent());
                    for (String midKey : middleKeys.keySet()) {
                        String value = middleKeys.get(midKey);
                        String[] levels = value.split("\\+");
                        String middle_content = "";
                        for (String level : levels) {
                            String tmp = middle_depts.get(Integer.valueOf(level));
                            if (tmp == null) {
                                continue;
                            }
                            middle_content = middle_content + "\\" + middle_depts.get(Integer.valueOf(level));
                        }
                        if (middle_content.equals("")) {
                            continue;
                        }
                        middle_content = middle_content.substring(1);
                        PublicUtil.setValueBy2(deptCode, midKey, middle_content);
                    }
                    deptCode.setEnd_flag(true);
                    String full_name = "";
                    if (jrbSibling.isSelected()) {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) parent_node.getParent();
                        full_name = ((DeptCode) node.getUserObject()).getDept_full_name() + "\\" + deptCode.getContent();
                    } else {
                        if (parent_obj instanceof DeptCode) {
                            full_name = parent_dept.getDept_full_name() + "\\" + deptCode.getContent();
                        } else {
                            full_name = deptCode.getContent();
                        }
                    }
                    deptCode.setDept_full_name(full_name);
                    ValidateSQLResult result = DeptImpl.AddDept(deptCode, EmpUtil.getCommUserLog());
                    if (result.getResult() != 0) {
                        MsgUtil.showHRSaveErrorMsg(result);
                    } else {
                        deptCode = (DeptCode) CommUtil.fetchEntityBy("from DeptCode dc where dc.deptCode_key='" + deptCode.getDeptCode_key() + "'");
                        deptCode.setShow_code_flag(UserContext.show_dept_code_flag);
                        for (IPickDeptAddListener listener : listeners) {
                            listener.addDept(deptCode);
                        }
                        SysUtil.addDeptToMemory(deptCode);
                    }
                    log.info("点击确定，新增部门:" + deptCode.getContent() + ";编码:" + deptCode.getDept_code());
                    if (jcbClose.isSelected()) {
                        deptCode = (DeptCode) UtilTool.createUIDEntity(DeptCode.class);
                        updateDept(jrbChild.isSelected());
                    } else {
                        dispose();
                    }
                }
            }
        });
        CloseAction.doCloseAction(btnCancel);
        updateDept(jrbChild.isSelected());
        ComponentUtil.setSysFuntionNew(this, false);
    }

    private void updateDept(boolean isChild) {
        String dept_code = "";
        if (parent_obj instanceof String) {
            jrbSibling.setEnabled(false);
            jrbChild.setSelected(true);
            dept_code = SysUtil.getNewChildDeptCode1Of(null, 0, sp);
            deptCode.setParent_code("ROOT");
            deptCode.setGrade(1);
        } else {
            parent_dept = (DeptCode) parent_obj;
            if (((DefaultMutableTreeNode) parent_node.getParent()).getUserObject() instanceof String) {
                jrbChild.setSelected(true);
                jrbSibling.setEnabled(false);
                dept_code = SysUtil.getNewChildDeptCode1Of(parent_dept.getDept_code(), parent_node.getLevel(), sp);
                deptCode.setParent_code(parent_dept.getDept_code());
                deptCode.setGrade(parent_dept.getGrade() + 1);
            } else {
                if (isChild) {
                    if (parent_dept.isDel_flag()) {
                        MsgUtil.showInfoMsg(DeptMngMsg.msgDeptCannotDel);
                        jrbSibling.setSelected(true);
                        return;
                    }
                    dept_code = SysUtil.getNewChildDeptCode1Of(parent_dept.getDept_code(), parent_node.getLevel(), sp);
                    deptCode.setParent_code(parent_dept.getDept_code());
                    deptCode.setGrade(parent_dept.getGrade() + 1);
                } else {
                    dept_code = SysUtil.getNewChildDeptCode1Of(parent_dept.getParent_code(), parent_node.getLevel() - 1, sp);
                    deptCode.setParent_code(parent_dept.getParent_code());
                    deptCode.setGrade(parent_dept.getGrade());
                }
            }
            List<String> disable_fields = new ArrayList<String>();
            if (isChild) {
                deptCode.setVirtual(parent_dept.isVirtual());
                if (deptCode.isVirtual()) {
                    disable_fields.add("virtual");
                }
            }
            beanPanel.setDisable_fields(disable_fields);
        }
        deptCode.setDept_code(dept_code);
        String parentCode = deptCode.getParent_code();
        Object obj = CommUtil.fetchEntityBy("select max(px_code) from DeptCode d where d.parent_code='" + parentCode + "'");
        int i = 0;
        int parentLen = parentCode.length();
        if (obj != null) {
            i = SysUtil.objToInt(obj.toString().substring(parentLen));
        }
        i++;
        String code = SysUtil.getNewCode(i, deptCode.getDept_code().length() - parentLen);
        String prePx = (String) CommUtil.fetchEntityBy("select px_code from DeptCode d where d.dept_code='" + parentCode + "'");
        prePx = SysUtil.objToStr(prePx, parentCode);
        deptCode.setPx_code(prePx + code);
        beanPanel.setBean(deptCode);
        beanPanel.bind();
    }

    private boolean validate(DeptCode tmp_Dept) {
        Object msg = null;
        if (deptCode.getContent() == null || deptCode.getContent().replace(" ", "").equals("")) {
//            msg = "部门名称不可为空";
            msg = DeptMngMsg.msgDeptNameNotnull;
        } else if ((tmp_Dept.getParent_code() != null) && !tmp_Dept.getParent_code().toUpperCase().equals("ROOT") && !tmp_Dept.getDept_code().startsWith(
                tmp_Dept.getParent_code())) {
//            msg = "部门编码必须以父级编码为前缀";
            msg = DeptMngMsg.msgDeptCodeParent;
        } else if (!SysUtil.isNum(tmp_Dept.getDept_code())) {
//            msg = "部门编码必须是数字";
            msg = DeptMngMsg.msgDeptCodeNumber;
        } else if (DeptUtil.getDeptCodeLength(jrbChild.isSelected() ? (parent_len + 1) : parent_len) != tmp_Dept.getDept_code().length()) {
//            msg = "部门编码长度不符合编码规则";
            msg = DeptMngMsg.msgDeptCodeRule;
        } else if (CommUtil.exists("select 1 from DeptCode d where d.dept_code='" + tmp_Dept.getDept_code() + "'")) {
//            msg = "该部门编码已经存在";
            msg = DeptMngMsg.msgDeptCodeExist;
            return false;
        } else if (!deptCode.isVirtual() && jrbChild.isSelected() && parent_dept != null && parent_dept.isVirtual()) {
//            msg = "虚拟部门下面只能建立虚拟部门";
            msg = DeptMngMsg.msgDeptInvented;
        } else {
            msg = DeptUtil.validateDeptPxCode(deptCode);
        }
        if (msg != null && !msg.toString().trim().equals("")) {
            MsgUtil.showErrorMsg(msg);
            return false;
        }
        //检查关联更新
        if (!EmpCardUtil.CheckObject(deptCode, true)) {
            return false;
        }
        if (CommUtil.exists("select 1 from DeptCode where px_code='" + deptCode.getPx_code() + "'")) {
            if (MsgUtil.showNotConfirmDialog(DeptMngMsg.msgDeptRankNo)) {
                return false;
            }
        }
        return true;
    }

    public boolean isClickOk() {
        return clickOk;
    }
}
