/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeptCheckPanel.java
 *
 * Created on 2009-2-28, 9:57:41
 */
package org.jhrcore.client.dept;

import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import com.foundercy.pf.control.listener.IPickFieldOrderListener;
import com.foundercy.pf.control.listener.IPickQueryExListener;
import org.apache.log4j.Logger;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.DbUtil;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.SysParameter;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.iservice.impl.DeptImpl;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.dept.DeptMngMsg;
import org.jhrcore.mutil.DeptUtil;
import org.jhrcore.mutil.EmpUtil;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.DeptPanel;
import org.jhrcore.ui.DeptSelectDlg;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.ModelFrame;
import org.jhrcore.ui.TreeSelectMod;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author DB2INST3
 */
public class DeptCheckPanel extends javax.swing.JPanel implements IModuleCode {

    private final String module_code = "DeptMng.miDeptCheck";
    private HashSet<String> right_person_dept = new HashSet<String>();
    private List right_dept = new ArrayList();
    private Set end_list;
    private List<DeptCode> change_dept1 = new ArrayList<DeptCode>();
    private List<DeptCode> change_dept2 = new ArrayList<DeptCode>();
    private List del_dept = new ArrayList();
    private List<String> show_fields = new ArrayList<String>();
    private FTable ftable;
    private JTree change_tree1;
    private JTree change_tree2;
    private DeptPanel deptPanel;
    private JButton btnUse = new JButton("应用");
    private JButton btnChkLevel = new JButton("调整部门级数");
    private JButton btnCancel = new JButton("关闭");
    private JPopupMenu jpopmenu = new JPopupMenu();
    private JMenuItem resume = new JMenuItem("恢复");
    private JMenuItem Cdelete = new JMenuItem("彻底删除");
    private FTable check_table;
    private int tabIndex = 0;
    private DeptCode cur_dept;
    private JCheckBox jcbAll = new JCheckBox("全选");
    private String check_order_sql = "bp.a0190";
    private List<TempFieldInfo> all_fields = new ArrayList<TempFieldInfo>();
    private List<DeptCode> depts = new ArrayList<DeptCode>();
    private String cur_hql;
    private Logger log = Logger.getLogger("部门调整");

    /** Creates new form DeptCheckPanel */
    public DeptCheckPanel() {
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlEndDept = new javax.swing.JTabbedPane();
        pnlDept = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlLeft = new javax.swing.JPanel();
        pnlPerson = new javax.swing.JPanel();
        pnlDept1 = new javax.swing.JPanel();
        pnlDeptName = new javax.swing.JPanel();
        cxboxTopDept = new javax.swing.JCheckBox();
        cxboxNullDept = new javax.swing.JCheckBox();
        pnlDel = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOneTouchExpandable(true);

        pnlLeft.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(pnlLeft);

        pnlPerson.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(pnlPerson);

        javax.swing.GroupLayout pnlDeptLayout = new javax.swing.GroupLayout(pnlDept);
        pnlDept.setLayout(pnlDeptLayout);
        pnlDeptLayout.setHorizontalGroup(
            pnlDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
        );
        pnlDeptLayout.setVerticalGroup(
            pnlDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        pnlEndDept.addTab("非末级部门有人员", pnlDept);

        pnlDept1.setLayout(new java.awt.BorderLayout());
        pnlEndDept.addTab("末级标识错误部门", pnlDept1);

        cxboxTopDept.setText("是否带上顶级部门");

        cxboxNullDept.setSelected(true);
        cxboxNullDept.setText("仅调整全称为空的部门");

        javax.swing.GroupLayout pnlDeptNameLayout = new javax.swing.GroupLayout(pnlDeptName);
        pnlDeptName.setLayout(pnlDeptNameLayout);
        pnlDeptNameLayout.setHorizontalGroup(
            pnlDeptNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDeptNameLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pnlDeptNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cxboxNullDept)
                    .addComponent(cxboxTopDept))
                .addContainerGap(396, Short.MAX_VALUE))
        );
        pnlDeptNameLayout.setVerticalGroup(
            pnlDeptNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDeptNameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cxboxTopDept)
                .addGap(18, 18, 18)
                .addComponent(cxboxNullDept)
                .addContainerGap(312, Short.MAX_VALUE))
        );

        pnlEndDept.addTab("部门全称调整", pnlDeptName);

        pnlDel.setLayout(new java.awt.BorderLayout());
        pnlEndDept.addTab("删除部门", pnlDel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlEndDept, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlEndDept, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
        );

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cxboxNullDept;
    private javax.swing.JCheckBox cxboxTopDept;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel pnlDel;
    private javax.swing.JPanel pnlDept;
    private javax.swing.JPanel pnlDept1;
    private javax.swing.JPanel pnlDeptName;
    private javax.swing.JTabbedPane pnlEndDept;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlPerson;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        ComponentUtil.setSysFuntion(this, module_code);
        initToolBar();
        depts.clear();
        depts.addAll(UserContext.getDepts(false));
        refreshDelDept();
        deptPanel = new DeptPanel(UserContext.getDepts(false), 1);
        List<TempFieldInfo> default_fields = new ArrayList<TempFieldInfo>();
        EntityBuilder.buildInfo(DeptCode.class, all_fields, default_fields, "deptCode");
        EntityBuilder.buildInfo(A01.class, all_fields, default_fields);
        //用于显示非末级部门人员
        check_table = new FTable(A01.class, true, true, false, module_code);
        check_table.setAll_fields(all_fields, default_fields, module_code);
        check_table.setRight_allow_flag(true);
        check_table.removeSumAndReplaceItem();
        check_order_sql = SysUtil.getOrderString(check_table.getCurOrderScheme(), "bp", check_order_sql, all_fields);
        show_fields.add("dept_code");
        show_fields.add("content");
        show_fields.add("dept_full_name");
        pnlPerson.add(new JScrollPane(check_table), BorderLayout.CENTER);
        Set<String> key_list = new HashSet<String>();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) deptPanel.getDeptTree().getModel().getRoot();
        Enumeration enumt = root.breadthFirstEnumeration();
        while (enumt.hasMoreElements()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
            if (node == root) {
                continue;
            }
            if (node.getChildCount() == 0) {
                if (node.getUserObject() instanceof DeptCode) {
                    DeptCode dept = (DeptCode) node.getUserObject();
                    if (!dept.isEnd_flag()) {
                        key_list.add(dept.getDeptCode_key());
                    }
                }
            } else {
                DeptCode dept = (DeptCode) node.getUserObject();
                if (dept.isEnd_flag()) {
                    key_list.add(dept.getDeptCode_key());
                }
            }
        }
        end_list = key_list;
        String hql = "select distinct(bp.deptCode_key) from A01 bp ";
        if (!UserContext.isSA) {
            hql += " where bp.deptCode_key in(" + UserContext.person_right_str + ")";
        }
        List list = CommUtil.selectSQL(hql);
        for (Object obj : list) {
            if (obj != null) {
                right_person_dept.add(obj.toString());
            }
        }
        right_dept.addAll(UserContext.getMemoryDept(false));
        for (int i = 0; i < right_dept.size(); i++) {
            DeptCode dept = (DeptCode) right_dept.get(i);
            if (end_list.contains(dept.getDeptCode_key())) {
                change_dept2.add(dept);
            }
            if (!dept.isEnd_flag() && right_person_dept.contains(dept.getDeptCode_key())) {
                change_dept1.add(dept);
            }
        }
        DeptPanel.updateDept(change_dept1);
        change_tree1 = new JTree(new changeTreeModel(change_dept1));
        HRRendererView.getDeptMap(change_tree1).initTree(change_tree1);
        change_tree1.setShowsRootHandles(true);
        pnlLeft.add(new JScrollPane(change_tree1), BorderLayout.CENTER);
        change_tree2 = new JTree(new changeTreeModel(change_dept2));
        HRRendererView.getDeptMap(change_tree2).initTree(change_tree2);
        pnlDept1.add(new JScrollPane(change_tree2), BorderLayout.CENTER);
        //---------------------彻底删除--------------------
        ftable = new FTable(DeptCode.class, false, false, false, module_code);
        ftable.setFields(show_fields);
        ftable.setObjects(del_dept);
        pnlDel.add(new JScrollPane(ftable), BorderLayout.CENTER);
        jpopmenu.add(resume);
        jpopmenu.add(Cdelete);
        ComponentUtil.setSysFuntion(this, module_code);
    }

    private void refreshDelDept() {
        del_dept.clear();
        for (DeptCode dc : UserContext.getMemoryDept(false)) {
            if (dc.isDel_flag()) {
                del_dept.add(dc);
            }
        }
    }

    private void initToolBar() {
        toolbar.add(btnUse);
        toolbar.add(btnChkLevel);
        toolbar.addSeparator();
        toolbar.add(btnCancel);
    }

    private void setupEvents() {
        CloseAction.doCloseAction(btnCancel);
        btnChkLevel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                SysParameter dept_para = DeptUtil.getDeptGrade();
                String[] dept_para_num = dept_para.getSysparameter_value().split("\\;");
                List<Integer> use_para = new ArrayList<Integer>();
                int len = 0;
                for (String tmp : dept_para_num) {
                    if (tmp.equals("0")) {
                        continue;
                    }
                    len = len + Integer.valueOf(tmp);
                    use_para.add(len);
                }
                String db_type = UserContext.sql_dialect;
                String hql = "";
                for (int i = 0; i < use_para.size(); i++) {
                    if (db_type.equals("sqlserver")) {
                        hql += "update Deptcode set grade=" + (i + 1) + " where len(dept_code)=" + use_para.get(i) + ";";
                    } else if (db_type.equals("oracle")) {
                        hql += "update Deptcode set grade=" + (i + 1) + " where length(dept_code)=" + use_para.get(i) + ";";
                    } else if (db_type.equals("db2")) {
                        hql += "update Deptcode set grade=" + (i + 1) + " where length(dept_code)=" + use_para.get(i) + ";";
                    }
                }
                ValidateSQLResult result = CommUtil.excuteSQLs(hql, ";");
                if (result.getResult() == 0) {
                    MsgUtil.showInfoMsg(CommMsg.UPDATESUCCESS_MESSAGE);
                } else {
                    MsgUtil.showHRSaveErrorMsg(result);
                }
            }
        });
        btnUse.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                int tabIndex = pnlEndDept.getSelectedIndex();
                boolean all_flag = jcbAll.isSelected();
                if (tabIndex == 0) {
                    ContextManager.setStatusBar(check_table.getObjects().size());
                    final DefaultMutableTreeNode node = (DefaultMutableTreeNode) change_tree1.getLastSelectedPathComponent();
                    if (node == null) {
                        return;
                    }
                    Object obj = node.getUserObject();
                    if (obj instanceof DeptCode) {
                        DeptSelectDlg dlg = new DeptSelectDlg(UserContext.getDepts(false), cur_dept, TreeSelectMod.leafSelectMod);
                        ContextManager.locateOnMainScreenCenter(dlg);
                        dlg.setVisible(true);

                        if (dlg.isClick_ok()) {
                            DeptCode dept = dlg.getCurDept();
                            List<A01> list = new ArrayList<A01>();
                            if (all_flag) {
                                list = check_table.getObjects();
                            } else {
                                list = check_table.getSelectObjects();
                            }
                            StringBuffer str = new StringBuffer();
                            for (A01 bp : list) {
                                str.append("'");
                                str.append(bp.getA01_key());
                                str.append("',");
                            }
                            str.append("'-1'");
                            String hql = " update A01 set deptCode_key='" + dept.getDeptCode_key() + "' where a01_key in(" + str.toString() + ")";
                            ValidateSQLResult vs = CommUtil.excuteSQL(hql);
                            if (all_flag) {
                                check_table.deleteAllRows();
                            } else {
                                check_table.deleteSelectedRows();
                            }
                            boolean dept_change_flag = CommUtil.exists("select 1 from A01 bp where bp.deptCode.deptCode_key='" + dept.getDeptCode_key() + "'");
                            if (!dept_change_flag) {
                                node.removeFromParent();
                            }
                        }
                    }

                } else if (tabIndex == 1) {
                    changeEndDept();
                } else if (tabIndex == 2) {
                    changeDeptName();
                } else if (tabIndex == 3) {
                    jpopmenu.show(btnUse, 0, 20);
                }
            }
        });
        Cdelete.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (MsgUtil.showNotConfirmDialog(DeptMngMsg.msg010)) {
                    return;
                }
                log.info(e);
                delDept();
            }
        });

        resume.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                resumeDept();
            }
        });
        change_tree1.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) change_tree1.getLastSelectedPathComponent();
                if (node == null) {
                    return;
                }
                Object obj = node.getUserObject();
                if (obj == null) {
                    return;
                }
                if (obj instanceof DeptCode) {
                    cur_dept = (DeptCode) obj;
                }
                refreshMain(tabIndex);
            }
        });
        check_table.addPickQueryExListener(new IPickQueryExListener() {

            @Override
            public void pickQuery(QueryScheme qs) {
                if (cur_dept == null) {
                    return;
                }
                String hql = "from A01 bp join fetch bp.deptCode ";
                if (qs != null) {
                    hql = qs.buildHql(hql, "bp");
                }
                hql += " and bp.deptCode.deptCode_key='" + cur_dept.getDeptCode_key() + "'";
                hql += " and " + UserContext.getDept_right_rea_str("bp.deptCode");
                cur_hql = hql;
                cur_hql = cur_hql.replace("join fetch bp.deptCode", "");
                hql += " order by " + check_order_sql;
                check_table.setObjects(CommUtil.fetchEntities(hql));
            }
        });
        check_table.addPickFieldOrderListener(new IPickFieldOrderListener() {

            @Override
            public void pickOrder(ShowScheme showScheme) {
                check_order_sql = SysUtil.getOrderString(showScheme, "bp", check_order_sql, all_fields);
                refreshMain(tabIndex);
            }
        });
        pnlEndDept.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                tabIndex = pnlEndDept.getSelectedIndex();
                log.info(e);
                refreshMain(tabIndex);
            }
        });
        refreshMain(0);
    }

    private void refreshMain(int tabIndex) {
        if (tabIndex == 0) {
            if (cur_dept == null) {
                return;
            }
            String hql = "from A01 bp join fetch bp.deptCode where bp.deptCode.deptCode_key='" + cur_dept.getDeptCode_key() + "'";
            hql += " and " + UserContext.getDept_right_rea_str("bp.deptCode");
            cur_hql = hql;
            cur_hql = cur_hql.replace("join fetch bp.deptCode", "");
            hql += " order by " + check_order_sql;
            check_table.setObjects(CommUtil.fetchEntities(hql));
        } else if (tabIndex == 3) {
            refreshDelDept();
            ftable.setObjects(del_dept);
            ContextManager.setStatusBar(ftable.getObjects().size());
        }
    }

    private void delDept() {
        List<String> del_keys = ftable.getSelectKeys();
        if (del_keys.size() > 500) {
//            JOptionPane.showMessageDialog(null, "一次操作记录不能超过500条！");
            MsgUtil.showInfoMsg(DeptMngMsg.msgRecordNotExceed);
            return;
        }
        StringBuilder tmp_sb = new StringBuilder();
        for (String delKey : del_keys) {
            tmp_sb.append("'");
            tmp_sb.append(delKey);
            tmp_sb.append("',");
        }
        tmp_sb.append("'-1'");
        ValidateSQLResult result = DeptImpl.delDeptPhysical(tmp_sb.toString(), UserContext.person_name + "{" + UserContext.person_code + "}");
        if (result.getResult() == 0) {
            List remove_list = new ArrayList();
            List<DeptCode> end_dept = (List<DeptCode>) CommUtil.fetchEntities("from DeptCode where end_flag = 0 and dept_code not in (select distinct parent_code from DeptCode)");
            for (DeptCode dc : UserContext.getMemoryDept(false)) {
                if (dc.isDel_flag()) {
                    if (del_keys.contains(dc.getDeptCode_key())) {
                        remove_list.add(dc);
                    }
                }
                if (end_dept.contains(dc)) {
                    dc.setEnd_flag(true);
                }
            }
            UserContext.getMemoryDept(false).removeAll(remove_list);
            ftable.deleteSelectedRows();
            ftable.updateUI();
            MsgUtil.showInfoMsg(CommMsg.DELSUCCESS_MESSAGE);
        } else {
            MsgUtil.showHRDelErrorMsg(result);
        }
    }

    private void resumeDept() {
        List<String> list = ftable.getSelectKeys();
        if (list.isEmpty()) {
            return;
        }
        ValidateSQLResult result = DeptImpl.resumeDept(list, EmpUtil.getCommUserLog());
        if (result.getResult() == 0) {
            for (DeptCode dc : UserContext.getMemoryDept(false)) {
                if (list.contains(dc.getDeptCode_key())) {
                    dc.setDel_flag(false);
                }
            }
            ftable.deleteSelectedRows();
            MsgUtil.showInfoMsg(CommMsg.ACTIONSUCCESS_MESSAGE);
        } else {
            MsgUtil.showHRSaveErrorMsg(result);
        }
    }

    private void changeEndDept() {
        List<String> changeEnd_keys = new ArrayList<String>();
        List<String> changeParent_keys = new ArrayList<String>();
        for (DeptCode dept : change_dept2) {
            if (dept.isEnd_flag()) {
                changeParent_keys.add(dept.getDeptCode_key());
            } else {
                changeEnd_keys.add(dept.getDeptCode_key());
            }
        }
        String ex_sql = "";
        if (changeEnd_keys.size() > 0) {
            ex_sql += DbUtil.getQueryForMID("update DeptCode  set end_flag=1 where end_flag = 0 and deptCode_key in  ", changeEnd_keys);
        }
        if (changeParent_keys.size() > 0) {
            ex_sql += DbUtil.getQueryForMID("update DeptCode  set end_flag=0 where end_flag = 1 and deptCode_key in  ", changeParent_keys);
        }
        if (ex_sql.equals("")) {
            return;
        }
        ValidateSQLResult result = CommUtil.excuteSQLs(ex_sql, ";");
        if (result.getResult() == 0) {
            for (DeptCode dc : UserContext.getMemoryDept(false)) {
                if (changeParent_keys.contains(dc.getDeptCode_key()) || changeEnd_keys.contains(dc.getDeptCode_key())) {
                    dc.setEnd_flag(!dc.isEnd_flag());
                }
            }
            MsgUtil.showInfoMsg(CommMsg.ACTIONSUCCESS_MESSAGE);
            ((changeTreeModel) change_tree2.getModel()).buildTree();
            change_tree2.updateUI();
        } else {
            MsgUtil.showHRSaveErrorMsg(result);
        }
    }

    private void changeDeptName() {
        boolean all_flag = cxboxTopDept.isSelected();
        boolean empty_flag = cxboxNullDept.isSelected();
        Hashtable<String, DeptCode> save_keys = new Hashtable<String, DeptCode>();
        List<String[]> save_dept = new ArrayList<String[]>();
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) deptPanel.getDeptTree().getModel().getRoot();
        rootNode = (DefaultMutableTreeNode) rootNode.getFirstChild();
        if (rootNode == null) {
            return;
        }
        DefaultMutableTreeNode parent_node = rootNode;
        DeptCode parent_dept = (DeptCode) parent_node.getUserObject();
        Enumeration enumt = rootNode.breadthFirstEnumeration();
        while (enumt.hasMoreElements()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
            if (!(node.getUserObject() instanceof DeptCode)) {
                continue;
            }
            DeptCode dept = (DeptCode) node.getUserObject();
            if (dept.getParent_code().equalsIgnoreCase("ROOT")) {
                if (all_flag) {
                    dept.setDept_full_name(dept.getContent());
                } else {
                    dept.setDept_full_name("");
                }
                save_keys.put(dept.getDeptCode_key(), dept);
                save_dept.add(new String[]{dept.getDeptCode_key(), dept.getDept_full_name()});
                continue;
            }
            if (!dept.getParent_code().equals(parent_dept.getDept_code())) {
                parent_node = (DefaultMutableTreeNode) node.getParent();
            }
            parent_dept = (DeptCode) parent_node.getUserObject();
            if (dept.getDept_full_name() == null || dept.getDept_full_name().equals("")) {
                dept.setDept_full_name((parent_dept.getDept_full_name() == null ? "" : parent_dept.getDept_full_name()) + "\\" + dept.getContent());
                if (dept.getDept_full_name().startsWith("\\")) {
                    dept.setDept_full_name(dept.getDept_full_name().substring(1));
                }
                save_keys.put(dept.getDeptCode_key(), dept);
                save_dept.add(new String[]{dept.getDeptCode_key(), dept.getDept_full_name()});
                continue;
            }
            if (!dept.getDept_full_name().equals(parent_dept.getDept_full_name() + "\\" + dept.getContent())) {
                dept.setDept_full_name((parent_dept.getDept_full_name() == null ? "" : parent_dept.getDept_full_name()) + "\\" + dept.getContent());
                if (!empty_flag) {
                    if (dept.getDept_full_name().startsWith("\\")) {
                        dept.setDept_full_name(dept.getDept_full_name().substring(1));
                    }
                    save_keys.put(dept.getDeptCode_key(), dept);
                    save_dept.add(new String[]{dept.getDeptCode_key(), dept.getDept_full_name()});
                }
            }
            node.setUserObject(dept);
        }
        if (save_dept.size() > 0) {
            ValidateSQLResult result = DeptImpl.changeDeptFullName(save_dept);
            if (result.getResult() == 0) {
                for (DeptCode dc : UserContext.getMemoryDept(false)) {
                    DeptCode dept = save_keys.get(dc.getDeptCode_key());
                    if (dept == null) {
                        continue;
                    }
                    dc = dept;
                }
                MsgUtil.showInfoMsg(CommMsg.UPDATESUCCESS_MESSAGE);
            } else {
                MsgUtil.showHRSaveErrorMsg(result);
            }
        }
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}

class changeTreeModel extends DefaultTreeModel {

    private List list;
    private static final long serialVersionUID = 1L;
    private DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(DeptMngMsg.msgTreeRoot);

    public changeTreeModel(List list) {
        super(new DefaultMutableTreeNode());
        this.setRoot(rootNode);
        this.list = list;
        buildTree();
    }

    public void buildTree() {
        rootNode.removeAllChildren();
        for (Object obj : list) {
            DefaultMutableTreeNode tmp = new DefaultMutableTreeNode(obj);
            rootNode.add(tmp);
        }
    }
}
