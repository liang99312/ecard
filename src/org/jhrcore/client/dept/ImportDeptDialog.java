/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportDept.java
 *
 * Created on 2009-9-22, 15:27:48
 */
package org.jhrcore.client.dept;

import com.foundercy.pf.control.listener.IPickPopupListener;
import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import org.apache.log4j.Logger;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.DateUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.util.ExportUtil;
import org.jhrcore.comm.CodeManager;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.ExportDetail;
import org.jhrcore.entity.ExportScheme;
import org.jhrcore.entity.FileManager;
import org.jhrcore.entity.SysParameter;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.annotation.ClassAnnotation;
import org.jhrcore.entity.annotation.ObjectListHint;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.iservice.impl.DeptImpl;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.dept.DeptMngMsg;
import org.jhrcore.msg.emp.EmpJdMsg;
import org.jhrcore.mutil.DeptUtil;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.importxls.ReadXLS;
import org.jhrcore.ui.importxls.XlsImportInfo;
import org.jhrcore.util.FileChooserUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author Administrator
 */
public class ImportDeptDialog extends javax.swing.JDialog implements IModuleCode {

    private String module_code = "DeptMng.deptImport";
    private Class cur_class;
    private FTable file_table;
    private JMenuItem mi_right = new JMenuItem("删除");
    private int importCount = 0;
    private Hashtable<String, String> field_type_keys = new Hashtable<String, String>();//以字段名为索引、字段类型为值的数据
    private Hashtable<String, TempFieldInfo> field_keys = new Hashtable<String, TempFieldInfo>();
    private List save_objs = new ArrayList();
    private HashSet<String> error_code = new HashSet<String>();
    private List<Integer> use_para = new ArrayList<Integer>();
    private HashSet<String> exist_files = new HashSet<String>();
    private Logger log = Logger.getLogger(ImportDeptDialog.class.getSimpleName());

    public ImportDeptDialog() {
        initComponents();
        this.setTitle("导入部门");
        initOthers();
        setupEvents();
    }

    /** Creates new form ImportDept */
    public ImportDeptDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setTitle("导入部门");
        initOthers();
        setupEvents();
    }

    public ImportDeptDialog(java.awt.Frame parent, Class import_class) {
        super(parent, true);
        this.setTitle("导入部门");
        cur_class = import_class;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnRead = new javax.swing.JButton();
        btnModel = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setLayout(new java.awt.BorderLayout());

        btnOk.setText("确定");

        btnCancel.setText("取消");

        btnRead.setText("读取文件");

        btnModel.setText("查看模板");

        jCheckBox1.setText("更新");

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("追加");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRead)
                    .addComponent(btnModel)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addGap(49, 49, 49))
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(303, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(35, 35, 35)
                .addComponent(btnCancel)
                .addGap(52, 52, 52))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnRead)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnModel)
                        .addGap(13, 13, 13)
                        .addComponent(jCheckBox1)
                        .addGap(9, 9, 9)
                        .addComponent(jCheckBox2))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnModel;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRead;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        ComponentUtil.setSysFuntion(this, module_code);
        SysParameter dept_para = DeptUtil.getDeptGrade();
        String[] dept_para_num = dept_para.getSysparameter_value().split("\\;");

        int leng = 0;
        for (String tmp : dept_para_num) {
            if (tmp.equals("0")) {
                continue;
            }
            leng = leng + Integer.valueOf(tmp);
            use_para.add(leng);
        }
        List<TempFieldInfo> dept_infos = EntityBuilder.getCommFieldInfoListOf(DeptCode.class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : dept_infos) {
            tfi.setField_name(tfi.getField_name());
            field_keys.put(tfi.getField_name(), tfi);
        }
        Class super_class = cur_class.getSuperclass();
        ClassAnnotation ca = (ClassAnnotation) cur_class.getAnnotation(ClassAnnotation.class);
        if (super_class != null) {
            List<TempFieldInfo> super_infos = EntityBuilder.getCommFieldInfoListOf(super_class, EntityBuilder.COMM_FIELD_VISIBLE);
            for (TempFieldInfo tfi : super_infos) {
                tfi.setEntity_caption(ca.displayName());
                field_type_keys.put(tfi.getField_name(), tfi.getField_type());
            }
        }

        List<TempFieldInfo> cur_class_info = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : cur_class_info) {
            field_type_keys.put(tfi.getField_name(), tfi.getField_type());
        }
        List<String> fields = new ArrayList<String>();
        fields.add("file_name");
        fields.add("file_type");
        fields.add("file_size");
        file_table = new FTable(FileManager.class, fields, false, false, false, "ImportDeptDialog");
        file_table.addPickPopupListener(new IPickPopupListener() {

            @Override
            public void addMenuItem(JPopupMenu pp) {
                pp.removeAll();
                pp.add(mi_right);
            }
        });
        file_table.setRight_allow_flag(true);
        jPanel2.add(file_table, BorderLayout.CENTER);
    }

    private void setupEvents() {
        mi_right.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info("$" + mi_right.getText() + "#");
                for (Object obj : file_table.getSelectObjects()) {
                    exist_files.remove(((FileManager) obj).getFile_name());
                }
                file_table.deleteSelectedRows();
                file_table.updateUI();
            }
        });
        btnRead.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info("$" + btnRead.getText() + "#");
                File file = FileChooserUtil.getXLSFile(CommMsg.SELECTXLSFILE_MESSAGE);
                if (file == null) {
                    return;
                }
                FileManager fm = new FileManager();
                fm.setFile_size(file.length() / 1024);
                fm.setFile(file);
                String fileName = file.getName();
                String[] fileNames = fileName.split("\\.");
                fm.setFile_name(fileNames[0]);
                fm.setFile_type(fileNames[fileNames.length - 1]);
                if (exist_files.contains(fileName)) {
                    MsgUtil.showErrorMsg("文件已存在");
                } else {
                    exist_files.add(fileName);
                    file_table.addObject(fm);
                }

            }
        });
        btnModel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info("$" + btnModel.getText());
                if (!UserContext.hasFieldRight("DeptCode.dept_code".toUpperCase())) {
                    return;
                }
                ExportScheme es = (ExportScheme) UtilTool.createUIDEntity(ExportScheme.class);
                List<TempFieldInfo> field_infos = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
                int i = 0;
                es.setEntity_name(cur_class.getSimpleName());
                List<ExportDetail> details = new ArrayList<ExportDetail>();
                for (TempFieldInfo tfi : field_infos) {
                    ExportDetail ed = (ExportDetail) UtilTool.createUIDEntity(ExportDetail.class);
                    ed.setEntity_caption(tfi.getEntity_caption());
                    ed.setEntity_name(cur_class.getSimpleName());
                    ed.setField_name(tfi.getField_name());
                    ed.setField_caption(tfi.getCaption_name());
                    ed.setField_type(tfi.getField_type());
                    ed.setOrder_no(i);
                    ed.setExportScheme(es);
                    details.add(ed);
                    i++;
                }
                es.setExportDetails(details);
                es.setScheme_titile(DeptMngMsg.msg015.toString());
                List list = CommUtil.fetchEntitysBy("from DeptCode", 1, 10);
                FTable ftable = new FTable(cur_class);
                ftable.setObjects(list);
                ExportUtil.export(UserContext.file_path + cur_class.getSimpleName() + ".xls", es, ftable);
            }
        });
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                int update_type = -1;
                if (jCheckBox1.isSelected()) {
                    if (jCheckBox2.isSelected()) {
                        update_type = 1;//追加更新
                    } else {
                        update_type = 2;//只更新
                    }
                } else {
                    if (jCheckBox2.isSelected()) {
                        update_type = 0;//只追加
                    } else {
                        update_type = -1;//
                    }
                }
                if (update_type == -1) {
                    return;
                }
                log.info("$" + btnOk.getText() + "#update_type=" + update_type);
                for (Object tg : file_table.getObjects()) {
                    FileManager fm = (FileManager) tg;
                    importXLS(fm.getFile(), cur_class, update_type);
                }
                dispose();
            }
        });
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info("$" + btnCancel.getText() + "#");
                dispose();
            }
        });
    }

    /**
     * 导入数据
     * @param file:导入的文件
     * @param cur_class：当前表
     * @param update_type：更新类型，0：追加；1：更新并追加；2：仅更新
     */
    private void importXLS(File file, Class cur_class, int update_type) {
        //辅助变量定义部分---------------------------------------------------------------------------------------------
        int update_no = 0;
        StringBuffer ex_sql = new StringBuffer();
        XlsImportInfo xlsImportInfo = null;
        try {
            xlsImportInfo = ReadXLS.importXls(file);
        } catch (Exception ex) {
            ex.printStackTrace();
            MsgUtil.showErrorMsg(EmpJdMsg.msg005.toString() + EmpJdMsg.msg006.toString());
            return;
        }
        ExportScheme exportScheme = xlsImportInfo.getExportScheme();
        SysParameter update_para = UserContext.getSys_para("System.import_updateable");
        HashSet<String> update_able_fields = new HashSet<String>();
        String compare_col_name = "dept_code";
        Hashtable<String, Object> new_dept_code = new Hashtable<String, Object>();
        for (ExportDetail exportDetail : exportScheme.getExportDetails()) {
            String field_name = exportDetail.getField_name();
            if (UserContext.getFieldRight(cur_class.getSimpleName() + "." + field_name) == 1) {
                update_able_fields.add(field_name);
            } else if (UserContext.getFieldRight(cur_class.getSimpleName() + "." + field_name) == 2 && update_para.getSysparameter_value().equals("1")) {
                update_able_fields.add(field_name);
            }
            String type = field_type_keys.get(field_name);
            if (type != null) {
                exportDetail.setField_type(type);
            } else {
                type = field_type_keys.get(field_name + "_code_");
                if (type != null) {
                    exportDetail.setField_type(type);
                } else {
                    type = field_type_keys.get(field_name.substring(0, field_name.length() - 6));
                    if (type != null) {
                        exportDetail.setField_type(type);
                    }
                }
            }

        }
        List<ExportDetail> details = new ArrayList<ExportDetail>();
        List<Hashtable<String, String>> not_exist_list = new ArrayList<Hashtable<String, String>>();//用于记录XLS中的重复记录
        List<Hashtable<String, String>> error_list = new ArrayList<Hashtable<String, String>>();//用于记录错误数据
        Hashtable<String, List<Hashtable<String, Object>>> result_data = new Hashtable<String, List<Hashtable<String, Object>>>();//用于记录读取出来转换成对象的数据
        Hashtable<String, Hashtable<String, Object>> exist_keys = new Hashtable<String, Hashtable<String, Object>>();//用于记录数据库中已经存在的记录，索引为匹配字段值
        String compare_val;//匹配值
        Hashtable<String, TempFieldInfo> use_fields = new Hashtable<String, TempFieldInfo>();//记录导入表中有的字段；
        //原始数据处理部分---------------------------------------------------------------------------------------------
        details.addAll(exportScheme.getExportDetails());
        int len = xlsImportInfo.getValues().size();
        int k = 0;
        Hashtable<Integer, List<String>> error_keys = new Hashtable<Integer, List<String>>();
        Hashtable<String, String> tmp_date = xlsImportInfo.getValues().get(0);
        for (int i = 0; i < len; i++) {
            boolean error_data_flag = false;
            Hashtable<String, String> row_data = xlsImportInfo.getValues().get(i);
            compare_val = row_data.get(compare_col_name);
            if (compare_val == null || compare_val.replace(" ", "").equals("")) {
                not_exist_list.add(row_data);
            } else {
                List<String> row_error_keys = error_keys.get(k);
                if (row_error_keys == null) {
                    row_error_keys = new ArrayList<String>();
                }
                Hashtable<String, Object> result_row_data = new Hashtable<String, Object>();
                List<Hashtable<String, Object>> result_col_data = result_data.get(compare_val);
                if (result_col_data == null) {
                    result_col_data = new ArrayList<Hashtable<String, Object>>();
                }
                try {
                    for (String field_name : row_data.keySet()) {
                        Object tmp_obj = row_data.get(field_name);
                        if (!update_able_fields.contains(field_name)) {
                            continue;
                        }
                        if ("dept_code".equals(field_name)) {
                            if (!checkDeptCode(tmp_obj.toString())) {
                                row_error_keys.add(field_name);
                                continue;
                            }
                        } else {
                            if (field_name.endsWith("_code_")) {
                                try {
                                    Field field = DeptCode.class.getField(field_name);
                                    if (tmp_obj == null || tmp_obj.toString().equals("")) {
                                    } else {
                                        ObjectListHint objHint = field.getAnnotation(ObjectListHint.class);
                                        if (objHint != null && objHint.hqlForObjectList().startsWith("from Code ")) {
                                            String hql = objHint.hqlForObjectList();
                                            String code_id = CodeManager.getCodeManager().getCodeIdBy(hql.substring(hql.indexOf("=") + 1), tmp_obj.toString());
                                            if (code_id == null) {
                                                row_error_keys.add(field_name);
                                                continue;
                                            }
                                            tmp_obj = code_id;
                                        } else {
                                            row_error_keys.add(field_name);
                                            continue;
                                        }
                                    }
                                    field_name = field_name.substring(0, field_name.length() - 6);
                                } catch (Exception ex) {
                                    log.error(ex);
                                }
                            } else {
                                String type = field_type_keys.get(field_name);
                                if (type == null) {
                                    continue;
                                }
                                type = type.toLowerCase();
                                if (type.equals("boolean")) {
                                    if (tmp_obj.toString().equals("0") || tmp_obj.toString().equals("1") || tmp_obj.toString().equals("否") || tmp_obj.toString().equals("是")) {
                                        tmp_obj = tmp_obj.toString().equals("1") || tmp_obj.toString().equals("是");
                                    } else if (tmp_obj.toString().toLowerCase().equals("false")) {
                                        tmp_obj = false;
                                    } else if (tmp_obj.toString().toLowerCase().equals("true")) {
                                        tmp_obj = true;
                                    } else {
                                        row_error_keys.add(field_name);
                                        continue;
                                    }
                                } else if (type.equals("date")) {
                                    Object obj = DateUtil.StrToDate(tmp_obj.toString());
                                    if (obj == null) {
                                        continue;
                                    }
                                    tmp_obj = obj;
                                } else if (type.equals("int")) {
                                    Object obj = SysUtil.objToInt(tmp_obj.toString());
                                    if (obj == null) {
                                        row_error_keys.add(field_name);
                                        continue;
                                    }
                                    tmp_obj = obj;
                                } else if (type.equals("integer")) {
                                    Object obj = SysUtil.objToInteger(tmp_obj);
                                    if (obj == null) {
                                        row_error_keys.add(field_name);
                                        continue;
                                    }
                                    tmp_obj = obj;
                                } else if (type.equals("float")) {
                                    Object obj = (Float) SysUtil.objToFloat(tmp_obj);
                                    if (obj == null) {
                                        row_error_keys.add(field_name);
                                        continue;
                                    }
                                    tmp_obj = obj;
                                } else if (type.equals("bigdecimal")) {
                                    Object obj = SysUtil.objToBigDecimal(tmp_obj);
                                    if (obj == null) {
                                        row_error_keys.add(field_name);
                                        continue;
                                    }
                                    tmp_obj = (BigDecimal) obj;
                                }
                            }
                        }
                        result_row_data.put(field_name, tmp_obj);
                    }
                    error_data_flag = row_error_keys.size() > 0;
                    if (error_data_flag) {
                        error_keys.put(k, row_error_keys);
                        error_list.add(row_data);
                        k++;
                        error_data_flag = false;
                        continue;
                    }
                    result_col_data.add(result_row_data);
                    result_data.put(compare_val, result_col_data);
                } catch (IllegalArgumentException ex) {
                    log.error(ex);
                }
            }
        }
        for (String field_name : tmp_date.keySet()) {
            TempFieldInfo tfi = field_keys.get(field_name);
            if (tfi != null) {
                use_fields.put(field_name, tfi);
            }
        }
        String hql = "from DeptCode";
        List exist_cur_classes = CommUtil.fetchEntities(hql);
        HashSet<String> exist_codes = new HashSet<String>();
        if (exist_cur_classes != null) {
            for (Object obj : exist_cur_classes) {
                exist_codes.add(((DeptCode) obj).getDept_code());
                compare_val = PublicUtil.getProperty(obj, "dept_code").toString();
                Hashtable<String, Object> row_keys = exist_keys.get(compare_val);
                if (row_keys == null) {
                    row_keys = new Hashtable<String, Object>();
                }
                row_keys.put(PublicUtil.getProperty(obj, "dept_code").toString(), obj);
                exist_keys.put(compare_val, row_keys);
            }
        }

        for (List<Hashtable<String, Object>> row_datas : result_data.values()) {
            for (Hashtable<String, Object> row_data : row_datas) {
                compare_val = row_data.get(compare_col_name).toString();
                Object obj = null;
                Hashtable<String, Object> cur_class_datas = exist_keys.get(compare_val);
                if (cur_class_datas != null) {
                    update_no++;
                    if (update_type == 1 || update_type == 2) {
                        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");//日期格式化
                        ex_sql.append("update deptCode set ");
                        for (String field_name : use_fields.keySet()) {
                            if (field_name.equals("dept_code")) {
                                continue;
                            }
                            if (field_name.equals("parent_code")) {
                                continue;
                            }
                            Object value = row_data.get(field_name.replace("_code_", ""));
                            TempFieldInfo field_info = use_fields.get(field_name);
                            String type = field_info.getField_type().toLowerCase();
                            if (value == null && !(type.equals("string") || type.equals("code"))) {
                                continue;
                            }
                            ex_sql.append(SysUtil.tranField(field_name));
                            ex_sql.append("=");
                            if (type.equals("date")) {
                                ex_sql.append("to_date('").append(format.format(value)).append("','YYYY-MM-DD'),");
                            } else if (type.equals("string") || type.equals("code")) {
                                if (value == null) {
                                    ex_sql.append("null,");
                                } else {
                                    ex_sql.append("'");
                                    ex_sql.append(value.toString());
                                    ex_sql.append("',");
                                }

                            } else if (type.equals("boolean")) {
                                if ("true".equals(value.toString()) || "是".equals(value.toString())) {
                                    ex_sql.append("1,");
                                } else if ("false".equals(value.toString()) || "否".equals(value.toString())) {
                                    ex_sql.append("0,");
                                } else {
                                    ex_sql.append("null,");
                                }
                            } else {
                                ex_sql.append(value.toString());
                                ex_sql.append(",");
                            }
                        }
                        ex_sql.append("dept_code = dept_code where dept_code='");
                        ex_sql.append(compare_val);
                        ex_sql.append("';\n");
                    }
                } else {
                    if (update_type == 1 || update_type == 0) {
                        try {
                            obj = UtilTool.createUIDEntity(cur_class);
                            for (String field_name : row_data.keySet()) {
                                Object tmp_obj = row_data.get(field_name);
                                Class field_class = cur_class.getField(field_name).getType();
                                Method method = cur_class.getMethod("set" + field_name.substring(0, 1).toUpperCase() + field_name.substring(1), new Class[]{field_class});
                                method.invoke(obj, new Object[]{tmp_obj});
                            }
                            new_dept_code.put(compare_val, obj);
                        } catch (Exception ex) {
                            log.error(ex);
                        }
                    }
                }
            }
        }
        List<String> d_list = new ArrayList<String>();
        d_list.addAll(new_dept_code.keySet());
        Collections.sort(d_list);
        for (int i = 0; i < d_list.size(); i++) {
            String tmp_str = d_list.get(i);
            int grade = use_para.indexOf(tmp_str.length());
            if (grade == -1) {
                error_code.add(tmp_str);
            } else if (grade == 0) {
                exist_codes.add(tmp_str);
                DeptCode tmp_dept = (DeptCode) new_dept_code.get(tmp_str);
                tmp_dept.setParent_code("ROOT");
                tmp_dept.setEnd_flag(false);
                save_objs.add(tmp_dept);
            } else {
                int parent_len = use_para.get(grade - 1);
                String parent_code = tmp_str.substring(0, parent_len);
                if (exist_codes.contains(parent_code)) {
                    exist_codes.add(tmp_str);
                    DeptCode tmp_dept = (DeptCode) new_dept_code.get(tmp_str);
                    tmp_dept.setParent_code(parent_code);
                    tmp_dept.setEnd_flag(false);
                    save_objs.add(tmp_dept);
                } else {
                    error_code.add(tmp_str);
                }
            }
        }
        DeptImpl.importDept(save_objs, ex_sql.toString());
        String file_path = file.getPath();
        file_path = file_path.replace(".xls", "1.xls");
        ExportUtil.export(file_path, exportScheme, not_exist_list, error_list, error_keys);
//        String export_msg = "导入消息报告如下：\n";
//        export_msg += " 成功导导入消息报告如下入记录： " + save_objs.size() + "条;\n";
//        export_msg += " 成功更新记录： " + update_no + "条;\n";
//        export_msg += " 无匹配项或匹配不到的记录：" + not_exist_list.size() + "条;\n";
//        export_msg += " 数据格式有误的记录： " + error_list.size() + "条.\n";
//        FormulaTextDialog.showErrorMsg(export_msg, "导入消息");
        String export_msg = CommMsg.EXPORT_MESSAGE + "\n";
        export_msg += CommMsg.EXPORT_SUCCESS.toString() + save_objs.size() + ";\n";
        export_msg += CommMsg.EXPORT_UPDATE.toString() + update_no + ";\n";
        export_msg += CommMsg.EXPORT_NOFIND.toString() + not_exist_list.size() + ";\n";
        export_msg += CommMsg.EXPORT_ERROR.toString() + error_list.size() + ".\n";
        MsgUtil.showHRMsg(export_msg, DeptMngMsg.ttlExportDlg.toString());
        importCount = save_objs.size();
    }

    private boolean checkDeptCode(String dept_code) {
        boolean result = false;

        int index = use_para.indexOf(dept_code.length());
        if (index != -1) {
            result = true;
        }
        return result;

    }

    public int getImportCount() {
        return importCount;
    }

    public List getSaveObjects() {
        return save_objs;
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
