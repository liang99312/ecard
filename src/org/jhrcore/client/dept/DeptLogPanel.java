/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeptLogPanel.java
 *
 * Created on 2009-5-5, 16:09:55
 */
package org.jhrcore.client.dept;

import com.foundercy.pf.control.listener.IPickFieldOrderListener;
import com.foundercy.pf.control.listener.IPickQueryExListener;
import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.DateUtil;
import org.jhrcore.comm.HrLog;
import org.jhrcore.util.SysUtil;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.entity.DeptChgLog;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.JhrDatePicker;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class DeptLogPanel extends javax.swing.JPanel implements IModuleCode {

    private FTable ftable;
    private List chg_types = new ArrayList();
    private JComboBoxBinding chg_type_binding;
    private JComboBox jcbbLogType = new JComboBox();
    private JhrDatePicker jdpStart = new JhrDatePicker(DateUtil.getCurMonthFirstDay());
    private JhrDatePicker jdpEnd = new JhrDatePicker();
    private JButton btnQuery = new JButton("查询");
    private JLabel lbl1 = new JLabel(" 到 ");
    private JLabel lbl = new JLabel("日志类型");
    private JLabel lbl2 = new JLabel(" 选择时间：  从 ");
    private HrLog log = new HrLog("DeptMng.部门变动日志");
    private String order_sql = "dcl.chg_date desc";
    private final String module_code = "DeptMng.btnDeptLog";

    /** Creates new form DeptLogPanel */
    public DeptLogPanel() {
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Edrvitor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        jPanel3 = new javax.swing.JPanel();
        btnClearLog = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jcbSelectAll = new javax.swing.JCheckBox();
        pnlMain = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        btnClearLog.setText("清除日志");

        btnCancel.setText("关闭");

        jcbSelectAll.setText("全部");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jcbSelectAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(btnClearLog)
                .addGap(34, 34, 34)
                .addComponent(btnCancel)
                .addGap(100, 100, 100))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClearLog)
                    .addComponent(btnCancel)
                    .addComponent(jcbSelectAll))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMain.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClearLog;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox jcbSelectAll;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        ComponentUtil.setSysFuntion(this, module_code);
        jcbbLogType.setSize(150, 24);
        jcbbLogType.setPreferredSize(jcbbLogType.getSize());
        jcbbLogType.setMaximumSize(new Dimension(150, 24));
        toolbar.add(lbl);
        toolbar.add(jcbbLogType);
        toolbar.add(lbl2);
        toolbar.add(jdpStart);
        toolbar.add(lbl1);
        toolbar.add(jdpEnd);
        toolbar.add(btnQuery);
        chg_types.add("新增");
        chg_types.add("变更");
        chg_types.add("级次设置");
        chg_types.add("逻辑删除");
        chg_types.add("物理删除");
        chg_types.add("部门编辑");
        chg_types.add("所有类型");
        chg_type_binding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, chg_types, jcbbLogType);
        chg_type_binding.bind();
        ftable = new FTable(DeptChgLog.class, true, true, false, "DeptLogPanel");
        ftable.setRight_allow_flag(true);
        ftable.removeSumAndReplaceItem();
        pnlMain.add(ftable, BorderLayout.CENTER);
        ftable.setAll_fields(EntityBuilder.getCommFieldInfoListOf(DeptChgLog.class, EntityBuilder.COMM_FIELD_VISIBLE), new ArrayList(), new ArrayList(), "DeptLogPanel");
    }

    private void setupEvents() {
        ftable.addPickQueryExListener(new IPickQueryExListener() {

            @Override
            public void pickQuery(QueryScheme qs) {
                refreshChgLog(qs, jdpStart.getDate(), jdpEnd.getDate());
            }
        });
        ftable.addPickFieldOrderListener(new IPickFieldOrderListener() {

            @Override
            public void pickOrder(ShowScheme showScheme) {
                order_sql = SysUtil.getOrderString(showScheme, "dcl", order_sql, EntityBuilder.getCommFieldInfoListOf(DeptChgLog.class, EntityBuilder.COMM_FIELD_VISIBLE));
                refreshChgLog(ftable.getCur_query_scheme(), jdpStart.getDate(), jdpEnd.getDate());
            }
        });
        ActionListener al_query = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                refreshChgLog(null, jdpStart.getDate(), jdpEnd.getDate());
            }
        };
        btnQuery.addActionListener(al_query);
        jcbbLogType.addActionListener(al_query);
        btnClearLog.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                clearLog(jcbSelectAll.isSelected());
            }
        });
        CloseAction.doCloseAction(btnCancel);
        ComponentUtil.setSysFuntion(this, module_code);
        order_sql = SysUtil.getOrderString(ftable.getCurOrderScheme(), "dcl", order_sql, EntityBuilder.getCommFieldInfoListOf(DeptChgLog.class, EntityBuilder.COMM_FIELD_VISIBLE));
        jcbbLogType.setSelectedIndex(0);
    }

    /**
     * 该方法为界面数据查询主函数，查询条件范围内的日志记录
     * @param qs：指定查询方案，为NULL表示未使用查询方案
     * @param startDate：开始日期
     * @param endDate：结束日期
     */
    private void refreshChgLog(QueryScheme qs, Date startDate, Date endDate) {
        Object obj = jcbbLogType.getSelectedItem();
        String chg_type = "";
        if (obj != null) {
            chg_type = obj.toString();
        }
        String startTime = DateUtil.toStringForQuery(startDate, "yyyy-MM-dd");
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(endDate);
        calendar.add(Calendar.DATE, 1);
        String endTime = DateUtil.toStringForQuery(calendar.getTime(), "yyyy-MM-dd");
        ftable.deleteAllRows();
        String hql = "select deptChgLog_key from DeptChgLog dcl where ";
        if (!chg_type.equals("所有类型")) {
            hql += "dcl.chg_type='" + chg_type + "' and ";
        }
        hql += "dcl.chg_date>=" + startTime + " and dcl.chg_date<" + endTime;
        if (qs != null) {
            hql = qs.buildHql(hql, "dcl");
        }
        hql += " order by " + order_sql;
        PublicUtil.getProps_value().setProperty(DeptChgLog.class.getName(), "from DeptChgLog where deptChgLog_key in ");
        ftable.setObjects(CommUtil.fetchEntities(hql));
    }

    /**
     * 该方法用于根据参数决定清除选择/所有日志
     * @param all_flag：true：所有；false：当前选择
     */
    private void clearLog(boolean all_flag) {
        List<String> keys = null;
        if (all_flag) {
            keys = ftable.getAllKeys();
        } else {
            keys = ftable.getSelectKeys();
        }
        if (keys.isEmpty()) {
            return;
        }
        if (MsgUtil.showNotConfirmDialog(CommMsg.DEL_MESSAGE)) {
            return;
        }
        ValidateSQLResult vs = CommUtil.excuteSQLs("delete from DeptChgLog where deptChgLog_key in ", keys);
        if (vs.getResult() == 0) {
            MsgUtil.showInfoMsg(CommMsg.SAVESUCCESS_MESSAGE);
            if (all_flag) {
                ftable.deleteAllRows();
            } else {
                ftable.deleteSelectedRows();
            }
        } else {
            MsgUtil.showHRDelErrorMsg(vs);
        }
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
