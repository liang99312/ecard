/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmpLogPanel.java
 *
 * Created on 2009-10-30, 15:01:10
 */
package org.jhrcore.client.personnel;

import com.foundercy.pf.control.listener.IPickFieldOrderListener;
import com.foundercy.pf.control.listener.IPickQueryExListener;
import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.DateUtil;
import org.jhrcore.util.DbUtil;
import org.jhrcore.comm.HrLog;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.RyChgLog;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.iservice.impl.RSImpl;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.emp.EmpMngMsg;
import org.jhrcore.mutil.EmpUtil;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.JhrDatePicker;
import org.jhrcore.ui.ModelFrame;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class EmpLogPanel extends javax.swing.JPanel implements IModuleCode {

    private FTable ftable;
    private int tabIndex = 0;
    private JhrDatePicker jdpStart = new JhrDatePicker(DateUtil.getCurMonthFirstDay());
    private JhrDatePicker jdpEnd = new JhrDatePicker();
    private JButton btnQuery = new JButton("查询");
    private JButton btnReuse = new JButton("恢复");
    private JButton btnDelPerson = new JButton("彻底删除");
    private JButton btnDelLog = new JButton("删除日志");
    private JLabel lbl = new JLabel(" 到 ");
    private JButton btnCancel = new JButton("退出");
    private List<TempFieldInfo> all_fields = new ArrayList<TempFieldInfo>();
    private String order_sql = "pcl.a0190";
    private HrLog log = new HrLog("EmpMng.人员增删日志");
    private String module_code = "EmpMng.mi_personChangeLog";

    /** Creates new form EmpLogPanel */
    public EmpLogPanel() {
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        tapMain = new javax.swing.JTabbedPane();
        pnlAdd = new javax.swing.JPanel();
        pnlDel = new javax.swing.JPanel();
        pnlChange = new javax.swing.JPanel();
        pnlDrop = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();

        pnlAdd.setLayout(new java.awt.BorderLayout());
        tapMain.addTab("新增", pnlAdd);

        pnlDel.setLayout(new java.awt.BorderLayout());
        tapMain.addTab("删除", pnlDel);

        pnlChange.setLayout(new java.awt.BorderLayout());
        tapMain.addTab("其它项目变更", pnlChange);

        pnlDrop.setLayout(new java.awt.BorderLayout());
        tapMain.addTab("彻底删除", pnlDrop);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tapMain, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tapMain, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
        );

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(448, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel pnlAdd;
    private javax.swing.JPanel pnlChange;
    private javax.swing.JPanel pnlDel;
    private javax.swing.JPanel pnlDrop;
    private javax.swing.JTabbedPane tapMain;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        initToolBar();
        EntityBuilder.buildInfo(RyChgLog.class, all_fields, null);
        EntityBuilder.buildInfo(DeptCode.class, all_fields, null, "#DeptCode");
        ftable = new FTable(RyChgLog.class, true, true, false, "EmpLogPanel");
        ftable.getOther_entitys().put("DeptCode", "A01 A01,RyChgLog pcl,DeptCode DeptCode");
        ftable.getOther_entity_keys().put("DeptCode", "DeptCode.deptCode_key=A01.deptCode_key and A01.a01_key=pcl.a01_key and pcl.ryChgLog_key ");
        ftable.setAll_fields(all_fields, all_fields, "EmpLogPanel");
        ftable.removeSumAndReplaceItem();
        ftable.setRight_allow_flag(true);
    }

    private void setupEvents() {
        tapMain.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                tabIndex = tapMain.getSelectedIndex();
                refreshMainPane(tabIndex, null);
            }
        });
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                ModelFrame.close();
            }
        });
        btnReuse.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                List<RyChgLog> list = ftable.getAllSelectObjects();
                if (list.isEmpty()) {
                    return;
                }
                log.info(e);
                reusePerson(list);
            }
        });
        btnDelPerson.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                List<String> keys = ftable.getSelectKeys();
                if (keys.isEmpty()) {
                    return;
                }
                if (MsgUtil.showNotConfirmDialog(EmpMngMsg.msg079)) {
                    return;
                }
                log.info(e);
                delPerson(keys);
            }
        });
        ftable.addPickFieldOrderListener(new IPickFieldOrderListener() {

            @Override
            public void pickOrder(ShowScheme showScheme) {
                order_sql = SysUtil.getOrderString(showScheme, "pcl", order_sql, all_fields);
                refreshMainPane(tabIndex, null);
            }
        });
        ftable.addPickQueryExListener(new IPickQueryExListener() {

            @Override
            public void pickQuery(QueryScheme qs) {
                refreshMainPane(tabIndex, qs);
            }
        });
        btnQuery.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                refreshMainPane(tabIndex, null);
            }
        });
        btnDelLog.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                List<String> ry_log_keys = ftable.getSelectKeys();
                if (ry_log_keys.isEmpty()) {
                    return;
                }
                if (MsgUtil.showNotConfirmDialog(EmpMngMsg.msg090)) {
                    return;
                }
                log.info(e);
                delLog(ry_log_keys);
            }
        });
        order_sql = SysUtil.getOrderString(ftable.getCurOrderScheme(), "pcl", order_sql, all_fields);
        refreshMainPane(0, null);
        ComponentUtil.setSysFuntionNew(this, false);
    }

    /**
     * 删除日志
     */
    private void delLog(List<String> ry_log_keys) {
        log.info("点击" + btnDelLog.getText() + "#选择页:" + tapMain.getTitleAt(tabIndex) + "#选择确定");
        ValidateSQLResult result = CommUtil.excuteSQLs("delete from RyChgLog where rychglog_key in ", ry_log_keys);
        if (result.getResult() == 0) {
            MsgUtil.showInfoMsg( CommMsg.DELSUCCESS_MESSAGE.toString());
            ftable.deleteSelectedRows();
            log.info("删除成功");
        } else {
            MsgUtil.showHRDelErrorMsg(result);
            log.info("删除失败");
        }
    }

    /**
     * 彻底删除人员
     */
    private void delPerson(List<String> keys) {
        log.info("点击" + btnDelPerson.getText() + "#选择页:" + tapMain.getTitleAt(tabIndex) + "#选择继续");
        ValidateSQLResult result = RSImpl.delPersonFromLog(keys, EmpUtil.getCommUserLog());
        if (result.getResult() == 0) {
            MsgUtil.showInfoMsg(EmpMngMsg.msg089);
            ftable.deleteSelectedRows();
            ((JComponent) ftable.getParent()).updateUI();
            log.info("点击" + btnDelPerson.getText() + "#选择页:" + tapMain.getTitleAt(tabIndex) + "#彻底删除成功");
        } else {
            MsgUtil.showHRDelErrorMsg(result);
            log.info("点击" + btnDelPerson.getText() + "#选择页:" + tapMain.getTitleAt(tabIndex) + "#删除失败");
        }
    }
    //恢复人员

    private void reusePerson(List<RyChgLog> chg_list) {
        List<String> ry_log_keys = new ArrayList<String>();
        List<String> ry_a01_keys = new ArrayList<String>();
        for (RyChgLog rcl : chg_list) {
            ry_log_keys.add(rcl.getRyChgLog_key());
            ry_a01_keys.add(rcl.getA01_key());
        }
        String ex_sql = DbUtil.getQueryForMID("update a01 set a0193=0 where a01_key in ", ry_a01_keys);
        ex_sql += DbUtil.getQueryForMID("delete from RyChgLog where rychglog_key in ", ry_log_keys);
        ValidateSQLResult result = CommUtil.excuteSQLs(ex_sql, ";");
        if (result.getResult() == 0) {
            MsgUtil.showInfoMsg(EmpMngMsg.msg087);
            ftable.deleteSelectedRows();
            ((JComponent) ftable.getParent()).updateUI();
        } else {
            MsgUtil.showHRSaveErrorMsg(result);
        }

    }

    private void refreshMainPane(int tabIndex, QueryScheme qs) {
        String user_str = "";
        if (!UserContext.isSA) {
            if (tabIndex == 3) {
                user_str = " and pcl.dept_name in (select d.content from DeptCode d where " + UserContext.dept_right_rea_str + ")";
            } else {
                user_str = " and pcl.a01_key in (select a01_key from A01 where deptCode_key in(select d.deptCode_key from DeptCode d where " + UserContext.dept_right_rea_str + "))";
            }
        }
        String startTime = DateUtil.toStringForQuery(jdpStart.getDate(), "yyyy-MM-dd");
        Date end_date = jdpEnd.getDate() == null ? new Date() : jdpEnd.getDate();
        Calendar c = Calendar.getInstance();
        c.setTime(end_date);
        c.add(Calendar.DATE, 1);
        String endTime = DateUtil.toStringForQuery(c.getTime(), "yyyy-MM-dd");
        String hql = "select ryChgLog_key from RyChgLog pcl left join A01 left join DeptCode dc on A01.deptCode_key=dc.deptCode_key on pcl.a01_key=A01.a01_key where pcl.chg_date>=" + startTime + " and pcl.chg_date<" + endTime;
        if (tabIndex == 0) {
            hql += " and (pcl.chg_type='新增' or pcl.chg_type='其它新增'or pcl.chg_type='入职新增')";
        } else if (tabIndex == 1) {
            hql += " and (pcl.chg_type='删除')";
        } else if (tabIndex == 2) {
            hql += " and pcl.chg_type not in ('新增','其它新增','删除','物理删除','入职新增')";
        } else {
            hql += " and (pcl.chg_type='物理删除')";
        }
        if (qs != null) {
            hql += " and pcl.ryChgLog_key in (" + qs.buildSql() + ")";
        }
        if (!"".equals(user_str)) {
            hql += user_str;
        }
        order_sql = order_sql.replace("pcl.#A01.", "A01.");
        order_sql = order_sql.replace("pcl.#DeptCode.", "dc.");
        hql += " order by " + order_sql;
        PublicUtil.getProps_value().setProperty(RyChgLog.class.getName(), "from RyChgLog pcl  where pcl.ryChgLog_key in");
        ftable.setObjects(CommUtil.selectSQL(hql));
        refreshButton(tabIndex);
    }

    private void refreshButton(int tabIndex) {
        boolean view_flag = false;
        if (tabIndex == 0) {
            pnlAdd.removeAll();
            pnlAdd.add(ftable, BorderLayout.CENTER);
            view_flag = false;
        } else if (tabIndex == 1) {
            pnlDel.removeAll();
            pnlDel.add(ftable, BorderLayout.CENTER);
            view_flag = true;
        } else if (tabIndex == 2) {
            view_flag = false;
            pnlChange.removeAll();
            pnlChange.add(ftable, BorderLayout.CENTER);
        } else {
            view_flag = false;
            pnlDrop.removeAll();
            pnlDrop.add(ftable, BorderLayout.CENTER);
        }
        ftable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ((JComponent) ftable.getParent()).updateUI();
        ComponentUtil.setCompEnable(this, btnReuse, view_flag);
        ComponentUtil.setCompEnable(this, btnDelPerson, view_flag);
    }

    private void initToolBar() {
        toolbar.add(new JLabel(" 从 "));
        toolbar.add(jdpStart);
        toolbar.add(lbl);
        toolbar.add(jdpEnd);
        toolbar.add(btnQuery);
        toolbar.add(btnReuse);
        toolbar.add(btnDelPerson);
        toolbar.add(btnDelLog);
        toolbar.addSeparator();
        toolbar.add(btnCancel);
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
