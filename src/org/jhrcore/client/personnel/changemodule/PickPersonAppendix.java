/*
 * PickPersonAppendix.java
 *
 * Created on 2008年9月5日, 下午10:28
 */
package org.jhrcore.client.personnel.changemodule;

import com.foundercy.pf.control.table.FTable;
import com.foundercy.pf.control.table.ITableCellEditable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.JListBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.ui.WizardPanel;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.annotation.ClassAnnotation;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.change.ChangeField;
import org.jhrcore.entity.change.ChangeItem;
import org.jhrcore.entity.change.ChangeMethod;
import org.jhrcore.entity.change.ChangeScheme;
import org.jhrcore.msg.emp.EmpChangeSchemeMsg;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.SearchListFieldDialog;
import org.jhrcore.util.ComponentUtil;

/**
 *
 * @author  Administrator
 */
public class PickPersonAppendix extends WizardPanel implements IModuleCode {

    private ChangeScheme changeScheme;
    private List list_personAppednix = new ArrayList();
    private List<TempFieldInfo> list_appendixField = new ArrayList<TempFieldInfo>();
    private JListBinding lb_fields;
    private JComboBoxBinding table_binding;
    private FTable ftable;
    private FTable ftableMethod;
    private HashSet<String> exist_keys = new HashSet<String>();
    private String module_code = "EmpChangeScheme.btnEdit.getPanel4";

    public PickPersonAppendix() {
        initComponents();
        initOthers();
        setupEvents();
    }

    /** Creates new form PickPersonAppendix */
    public PickPersonAppendix(CreateChangeSchemePara createPara) {
        initComponents();
        this.changeScheme = createPara.getChangeScheme();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbPersonAppendix = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlist_fields = new javax.swing.JList();
        rb_frominput = new javax.swing.JRadioButton();
        rb_fromimport = new javax.swing.JRadioButton();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlMain = new javax.swing.JPanel();
        pnlMethod = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("请选择相关要处理业务"));

        jLabel1.setText("业务表：");

        jScrollPane1.setViewportView(jlist_fields);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbPersonAppendix, 0, 159, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbPersonAppendix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE))
        );

        buttonGroup1.add(rb_frominput);
        rb_frominput.setSelected(true);
        rb_frominput.setText("输入");

        buttonGroup1.add(rb_fromimport);
        rb_fromimport.setText("引入");

        btnAdd.setText(">");

        btnDel.setText("<");

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setDividerSize(2);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlMain.setBorder(javax.swing.BorderFactory.createTitledBorder("附表业务处理："));
        pnlMain.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(pnlMain);

        pnlMethod.setBorder(javax.swing.BorderFactory.createTitledBorder("附表默认处理方式："));
        pnlMethod.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(pnlMethod);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnAdd)
                                .addComponent(btnDel))
                            .addGap(11, 11, 11))
                        .addComponent(rb_frominput))
                    .addComponent(rb_fromimport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDel)
                .addGap(18, 18, 18)
                .addComponent(rb_frominput)
                .addGap(18, 18, 18)
                .addComponent(rb_fromimport)
                .addContainerGap(269, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public boolean isValidate() {
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbPersonAppendix;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JList jlist_fields;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlMethod;
    private javax.swing.JRadioButton rb_fromimport;
    private javax.swing.JRadioButton rb_frominput;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        List<String> fields = new ArrayList<String>();
        fields.add("appendix_displayname");
        fields.add("appendix_field_displayName");
        fields.add("imported");
        fields.add("comm_flag");
        ftable = new FTable(ChangeField.class, fields, false, false, false, module_code);
        ftable.setITableCellEditable(new ITableCellEditable() {

            @Override
            public int getCellEditable(Object obj, String fileName) {
                ChangeField cf = (ChangeField) obj;
                if (fileName.equals("comm_flag")) {
                    if (cf.isFrom_import()) {
                        return -1;
                    }
                }
                if (!cf.isFrom_import() && fileName.equals("method")) {
                    return -1;
                }
                return 0;
            }
        });
        table_binding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ, list_personAppednix, cmbPersonAppendix);
        table_binding.bind();
        lb_fields = SwingBindings.createJListBinding(UpdateStrategy.READ, list_appendixField, jlist_fields);
        lb_fields.bind();
        SearchListFieldDialog.doQuickSearch(EmpChangeSchemeMsg.ttl005.toString(), jlist_fields);
        ftable.setEditable(true);
        pnlMain.add(ftable, BorderLayout.CENTER);
        ftableMethod = new FTable(ChangeMethod.class, false, false, false, module_code);
        ftableMethod.setEditable(true);
        pnlMethod.add(ftableMethod);
        ftableMethod.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ftable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    }

    private void setupEvents() {
        cmbPersonAppendix.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                personAppendixChange();
            }
        });

        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addAppendix();
            }
        });

        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delAppendix();
            }
        });
        ftable.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                Object obj = ftable.getCurrentRow();
                if (obj == null) {
                    return;
                }
                ChangeField cf = (ChangeField) obj;
                rb_frominput.setSelected("输入".equals(cf.getImported()));
                rb_fromimport.setSelected("引入".equals(cf.getImported()));
            }
        });
        reload();
        ComponentUtil.setSysFuntionNew(this, false);
    }

    private void addAppendix() {
        if (jlist_fields.getSelectedIndex() < 0) {
            return;
        }
        for (int ind : jlist_fields.getSelectedIndices()) {
            TempFieldInfo fd = (TempFieldInfo) list_appendixField.get(ind);
            EntityDef entityDef = (EntityDef) cmbPersonAppendix.getSelectedItem();
            if (entityDef == null) {
                return;
            }
            String key = entityDef.getEntityName() + "." + SysUtil.tranField(fd.getField_name());
            if (exist_keys.contains(key)) {
                continue;
            }
            exist_keys.add(key);
            ChangeField changeField = (ChangeField) UtilTool.createUIDEntity(ChangeField.class);
            changeField.setChangeScheme(changeScheme);
            changeField.setAppendix_name(entityDef.getEntityName());
            changeField.setAppendix_displayname(entityDef.getEntityCaption());
            changeField.setAppendix_field(fd.getField_name());
            changeField.setAppendix_field_displayName(fd.getCaption_name());
            changeField.setImported(rb_frominput.isSelected() ? "输入" : "引入");
            changeField.setField_type(fd.getField_type());
            changeScheme.getChangeFields().add(changeField);
            ftable.addObject(changeField);
        }
        tranMethods();
    }

    @Override
    public void beforeLeave() {
        ftableMethod.editingStopped();
        ftable.editingStopped();
    }

    private void delAppendix() {
        List<ChangeField> select_fields = ftable.getSelectObjects();
        changeScheme.getChangeFields().removeAll(select_fields);
        for (Object obj : ftable.getSelectObjects()) {
            ChangeField tmp_cf = (ChangeField) obj;
            exist_keys.remove(tmp_cf.getAppendix_name() + "." + SysUtil.tranField(tmp_cf.getAppendix_field()));
        }
        ftable.deleteSelectedRows();
        tranMethods();
    }

    public void reload() {
        String hql = "from EntityDef ed where ed.entityClass.entityType_code='ANNEX' or ed.entityName='A01' or ed.entityName='BasePersonChange'";
        if (changeScheme.getNewPersonClassName() != null && !changeScheme.getNewPersonClassName().trim().equals("")) {
            hql += " or ed.entityName='" + changeScheme.getNewPersonClassName() + "'";
        }
        hql += " order by ed.entityClass.order_no,ed.order_no";
        list_personAppednix.clear();
        list_personAppednix.addAll(CommUtil.fetchEntities(hql));
        table_binding.unbind();
        table_binding.bind();
        List removeList = new ArrayList();
        exist_keys.clear();
        for (ChangeField cf : changeScheme.getChangeFields()) {
            try {
                if (cf.getAppendix_name().equals("A01")) {
                    boolean exists = false;
                    for (TempFieldInfo tfi : list_appendixField) {
                        if (tfi.getField_name().equals(cf.getAppendix_field())) {
                            exists = true;
                            break;
                        }
                    }
                    if (!exists) {
                        removeList.add(cf);
                    }
                }
            } catch (Exception ex) {
                continue;
            }
        }
        changeScheme.getChangeFields().removeAll(removeList);
        for (ChangeField cf : changeScheme.getChangeFields()) {
            if ("更新".equals(cf.getC_type())) {
                continue;
            }
            exist_keys.add(cf.getAppendix_name() + "." + cf.getAppendix_field().replace("_code_", ""));
            ftable.addObject(cf);
        }
        ftableMethod.setObjects(new ArrayList(changeScheme.getChangeMethods()));
        tranMethods();
    }

    private void personAppendixChange() {
        EntityDef entityDef = (EntityDef) cmbPersonAppendix.getSelectedItem();
        if (entityDef == null) {
            return;
        }
        list_appendixField.clear();
        try {
            Class c = Class.forName("org.jhrcore.entity." + entityDef.getEntityName());
            list_appendixField.addAll(EntityBuilder.getDeclareFieldInfoListOf(c, EntityBuilder.COMM_FIELD_VISIBLE));
            List removeList = new ArrayList();
            if (entityDef.getEntityName().equals("A01")) {
                for (ChangeItem ci : changeScheme.getChangeItems()) {
                    for (TempFieldInfo tfi : list_appendixField) {
                        if (tfi.getField_name().equals(ci.getFieldName())) {
                            removeList.add(tfi);
                        }
                    }
                }
            } else if (entityDef.getEntityName().equals("BasePersonChange")) {
                List<String> removes = new ArrayList<String>();
                removes.add("chg_state");
                removes.add("chg_type");
                removes.add("apply_date");
                removes.add("reason");
                removes.add("action_date");
                removes.add("pay_date");
                removes.add("chg_user");
                removes.add("order_no");
                for (TempFieldInfo tfi : list_appendixField) {
                    if (removes.contains(tfi.getField_name().replace("_code_", ""))) {
                        removeList.add(tfi);
                    }
                }
            }
            list_appendixField.removeAll(removeList);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PickPersonAppendix.class.getName()).log(Level.SEVERE, null, ex);
        }
        lb_fields.unbind();
        lb_fields.bind();
    }

    private void tranMethods() {
        Hashtable<String, ChangeMethod> methodKeys = new Hashtable<String, ChangeMethod>();
        for (Object obj : ftableMethod.getObjects()) {
            ChangeMethod cm = (ChangeMethod) obj;
            methodKeys.put(cm.getAppendix_name(), cm);
        }
        Set<String> useMethods = new HashSet();
        List addMethods = new ArrayList();
        for (Object obj : ftable.getObjects()) {
            ChangeField cf = (ChangeField) obj;
            String entityName = cf.getAppendix_name();
            try {
                Class c = Class.forName("org.jhrcore.entity." + entityName);
                if (c.getSuperclass().getSimpleName().equals("BasePersonAppendix")) {
                    ChangeMethod cm = methodKeys.get(entityName);
                    if (cm == null) {
                        cm = new ChangeMethod();
                        cm.setChangeMethod_key(changeScheme.getChangeScheme_key() + "_" + entityName);
                        cm.setAppendix_name(entityName);
                        addMethods.add(cm);
                        methodKeys.put(entityName, cm);
                    }
                    cm.setChangeScheme(changeScheme);
                    useMethods.add(entityName);
                    ClassAnnotation ca = (ClassAnnotation) c.getAnnotation(ClassAnnotation.class);
                    cm.setAppendix_displayname(ca.displayName());
                }
            } catch (Exception ex) {
            }
        }
        ftableMethod.addObjects(addMethods);
        for (String key : methodKeys.keySet()) {
            if (useMethods.contains(key)) {
                continue;
            }
            ftableMethod.getObjects().remove(methodKeys.get(key));
        }
        changeScheme.setChangeMethods(new HashSet(ftableMethod.getObjects()));
        pnlMethod.updateUI();
    }

    @Override
    public String getTitle() {
        if (changeScheme.contains("a0191")) {
//            return "第三步：设置附表处理业务";
            return EmpChangeSchemeMsg.msg015.toString();
        } else {
//            return "第二步：设置附表处理业务";
            return EmpChangeSchemeMsg.msg022.toString();
        }
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
