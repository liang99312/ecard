/*
 * PickImportValuePanel.java
 *
 * Created on 2008年9月6日, 下午5:25
 */
package org.jhrcore.client.personnel.changemodule;

import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import org.jhrcore.ui.WizardPanel;
import org.jhrcore.entity.change.ChangeScheme;
import java.util.*;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.change.ChangeField;
import org.jhrcore.msg.emp.EmpChangeSchemeMsg;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.SearchTreeFieldDialog;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author  Administrator
 */
public class PickImportValuePanel extends WizardPanel implements IModuleCode {

    private ChangeScheme changeScheme;
    private FTable ftable;
    private List<ChangeField> listImportAppendixDetail = new ArrayList<ChangeField>();
    private JTree treeChangeField;
    private ChangeFieldTreeModel changeFieldTreeModel;
    private String module_code = "EmpChangeScheme.btnEdit.getPanel2";

    public PickImportValuePanel() {
        initComponents();
        initOthers();
        setupEvents();
    }

    /** Creates new form PickImportValuePanel */
    public PickImportValuePanel(CreateChangeSchemePara createPara) {
        initComponents();
        this.changeScheme = createPara.getChangeScheme();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlChangeField = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        pnlMain = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();

        pnlChangeField.setBorder(javax.swing.BorderFactory.createTitledBorder("引用表信息"));
        pnlChangeField.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("字段对应情况"));

        pnlMain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMain.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
        );

        btnAdd.setText(">");

        btnDel.setText("<");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlChangeField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDel)
                    .addComponent(btnAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDel)
                .addContainerGap(328, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlChangeField, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel pnlChangeField;
    private javax.swing.JPanel pnlMain;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean isValidate() {
        List<ChangeField> cfs = ftable.getObjects();
        for (ChangeField cf : cfs) {
            if (cf.getImport_name() == null || cf.getImport_field() == null || cf.getImport_name().equals("") || cf.getImport_field().equals("")) {
//                JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnAdd), "请设置引入来源");
                MsgUtil.showInfoMsg(EmpChangeSchemeMsg.msg011);
                return false;
            }
        }
        return true;
    }

    @Override
    public void beforeLeave() {
    }

    private void initOthers() {
        changeFieldTreeModel = new ChangeFieldTreeModel(changeScheme);
        treeChangeField = new JTree(changeFieldTreeModel);
        HRRendererView.getCommMap().initTree(treeChangeField);
        treeChangeField.setRootVisible(false);
        treeChangeField.setShowsRootHandles(true);
        pnlChangeField.add(new JScrollPane(treeChangeField), BorderLayout.CENTER);
        pnlChangeField.updateUI();
        SearchTreeFieldDialog.doQuickSearch(EmpChangeSchemeMsg.ttl004.toString(), treeChangeField);
        ftable = new FTable(ChangeField.class, false, false);
        List<String> fields = new ArrayList<String>();
        fields.add("appendix_displayname");
        fields.add("appendix_field_displayName");
        fields.add("import_displayname");
        fields.add("import_field_displayName");
        ftable.setFields(fields);
        pnlMain.add(ftable, BorderLayout.CENTER);
    }

    private void setupEvents() {
        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                TreePath tp = treeChangeField.getSelectionPath();
                if (tp == null) {
                    return;
                }
                Object node = tp.getLastPathComponent();
                if (node == null) {
                    return;
                }
                DefaultMutableTreeNode select_node = (DefaultMutableTreeNode) node;
                if (select_node.getUserObject() instanceof TempFieldInfo) {
                    Object obj = ftable.getCurrentRow();
                    if (obj == null || listImportAppendixDetail.size() == 0) {
                        return;
                    }
                    ChangeField cf = (ChangeField) ftable.getCurrentRow();
                    TempFieldInfo fd = (TempFieldInfo) select_node.getUserObject();
                    if (!cf.getField_type().equals(fd.getField_type())) {
//                        if (JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent(pnlMain),
//                                "数据类型不一致，可能导致引入错误，确定要引入吗？", "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) != JOptionPane.OK_OPTION) {
//                            return;
//                        }
                        if (MsgUtil.showNotConfirmDialog(EmpChangeSchemeMsg.msg012)) {
                            return;
                        }
                    }
                    cf.setImport_field(fd.getField_name());
                    cf.setImport_field_displayName(fd.getCaption_name());
                    cf.setImport_name(fd.getEntity_name());
                    cf.setImport_displayname(fd.getEntity_caption());
                    ftable.setCurrentRow(cf);
                    ftable.updateUI();
                }
            }
        });

        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = ftable.getCurrentRow();
                if (obj == null || listImportAppendixDetail.size() == 0) {
                    return;
                }
                ChangeField cf = (ChangeField) ftable.getCurrentRow();
                cf.setImport_field("");
                cf.setImport_field_displayName("");
                cf.setImport_name("");
                cf.setImport_displayname("");
                ftable.updateUI();
            }
        });
        rebuild();
        boolean enable = changeScheme.getChangeScheme_key().equals("EmpScheme_Add") || changeScheme.getChangeScheme_key().equals("EmpScheme_Del");
        btnAdd.setEnabled(!enable);
        btnDel.setEnabled(!enable);
        ComponentUtil.setSysFuntionNew(this, false);
    }

    public void rebuild() {
        listImportAppendixDetail.clear();
        for (ChangeField changeField : changeScheme.getChangeFields()) {
            if ("更新".equals(changeField.getC_type())) {
                continue;
            }
            if (changeField.isFrom_import()) {
                listImportAppendixDetail.add(changeField);
            }
        }
        ftable.setObjects(listImportAppendixDetail);
    }

    @Override
    public String getTitle() {
        if (changeScheme.contains("a0191")) {
            return EmpChangeSchemeMsg.msg014.toString();
        }
        return EmpChangeSchemeMsg.msg015.toString();
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
