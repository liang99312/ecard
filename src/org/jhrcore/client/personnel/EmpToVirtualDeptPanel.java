/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmpToVirtualDeptPanel.java
 *
 * Created on 2009-5-7, 14:47:33
 */
package org.jhrcore.client.personnel;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.client.personnel.comm.IPickRowSelectListener;
import org.jhrcore.client.personnel.comm.PersonSelectPanel;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.VirtualDeptPerson;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.emp.EmpMngMsg;
import org.jhrcore.ui.BeanPanel;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.ModelFrame;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class EmpToVirtualDeptPanel extends javax.swing.JPanel implements IModuleCode {

    private BeanPanel beanPanel = new BeanPanel();
    private VirtualDeptPerson virtualDeptPerson = (VirtualDeptPerson) UtilTool.createUIDEntity(VirtualDeptPerson.class);
    private List<A01> person_list;
    private JTree virtualDeptTree;
    private PersonSelectPanel personSelectPanel;
    private String module_code = "EmpMng.mi_virtualDeptIn";

    public EmpToVirtualDeptPanel() {
        initComponents();
        initOthers();
        setupEvents();
    }

    /** Creates new form EmpToVirtualDeptPanel */
    public EmpToVirtualDeptPanel(List<A01> person_list) {
        this.person_list = person_list;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jcbClose = new javax.swing.JCheckBox();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlPerson = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        pnlDept = new javax.swing.JPanel();
        pnlVirtual = new javax.swing.JPanel();

        btnSave.setText("保存");

        btnCancel.setText("取消");

        jcbClose.setText("保存完不关闭窗口");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jcbClose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(28, 28, 28)
                .addComponent(btnCancel)
                .addGap(65, 65, 65))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel)
                    .addComponent(jcbClose))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setDividerSize(4);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlPerson.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setTopComponent(pnlPerson);

        jSplitPane2.setBorder(null);
        jSplitPane2.setDividerLocation(200);
        jSplitPane2.setDividerSize(3);

        pnlDept.setLayout(new java.awt.BorderLayout());
        jSplitPane2.setLeftComponent(pnlDept);

        pnlVirtual.setLayout(new java.awt.BorderLayout());
        jSplitPane2.setRightComponent(pnlVirtual);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JCheckBox jcbClose;
    private javax.swing.JPanel pnlDept;
    private javax.swing.JPanel pnlPerson;
    private javax.swing.JPanel pnlVirtual;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        personSelectPanel = new PersonSelectPanel(VirtualDeptPerson.class);
        personSelectPanel.addObject(person_list);
        pnlPerson.add(personSelectPanel, BorderLayout.CENTER);
        List<DeptCode> list = getVirtualDepts();
        VirtualDeptTreeModel model = new VirtualDeptTreeModel(list);
        virtualDeptTree = new JTree(model);
        virtualDeptTree.setRootVisible(false);
        virtualDeptTree.setShowsRootHandles(true);
        HRRendererView.getDeptMap(virtualDeptTree).initTree(virtualDeptTree);
        pnlDept.add(new JScrollPane(virtualDeptTree), BorderLayout.CENTER);
        beanPanel.setBean(virtualDeptPerson);
        beanPanel.setEditable(true);
        beanPanel.bind();
        pnlVirtual.add(new JScrollPane(beanPanel), BorderLayout.CENTER);
    }

    private void setupEvents() {
        personSelectPanel.addPickPersonSelectListener(new IPickRowSelectListener() {

            @Override
            public List pickPerson(String hql) {
                return CommUtil.fetchEntities(hql);
            }

            @Override
            public void pickRow(Object a01) {
            }

            @Override
            public void pickFields(List<String> fields) {
                List<String> exist_fields = beanPanel.getFields();
                List<String> use_fields = new ArrayList<String>();
                for (String field : exist_fields) {
                    if (fields.contains(field)) {
                        continue;
                    }
                    use_fields.add(field);
                }
                beanPanel.setFields(use_fields);
                beanPanel.bind();
            }

            @Override
            public void addRows(List list) {
            }
        });
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (toVirtual() && !jcbClose.isSelected()) {
                    ModelFrame.close();
                }
            }
        });
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ModelFrame.close();
            }
        });
    }

    /**
     * 批量新增附表处理
     */
    private boolean toVirtual() {
        List list = personSelectPanel.getObjects();
        if (list.isEmpty()) {
            return false;
        }
        DeptCode virtual_dept = null;
        Object obj = virtualDeptTree.getLastSelectedPathComponent();
        boolean virtual_dept_flag = false;
        if (obj == null || !(obj instanceof DefaultMutableTreeNode)) {
            virtual_dept_flag = true;
        } else {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) obj;
            if (!(node.getUserObject() instanceof DeptCode)) {
                virtual_dept_flag = true;
            }
            virtual_dept = (DeptCode) node.getUserObject();
            if (!virtual_dept.isVirtual()) {
                virtual_dept_flag = true;
            }
        }
        if (virtual_dept_flag) {
//            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnSave), "请选择虚拟部门！", "错误", JOptionPane.ERROR_MESSAGE);
            MsgUtil.showErrorMsg(EmpMngMsg.msg033);
            return false;
        }
        virtualDeptPerson = (VirtualDeptPerson) beanPanel.getBean();
        HashSet save_appendixs = new HashSet();
        List<String> fields = beanPanel.getFields();
        HashSet<String> exist_person = new HashSet<String>();
        List exist_list = CommUtil.selectSQL("select a01_key from VirtualDeptPerson where deptCode_key='" + virtual_dept.getDeptCode_key() + "'");
        for (Object obj1 : exist_list) {
            exist_person.add(obj1.toString());
        }
        for (Object virtual_obj : list) {
            VirtualDeptPerson vdp = (VirtualDeptPerson) virtual_obj;
            if (exist_person.contains(vdp.getA01().getA01_key())) {
                continue;
            }
            vdp.setDeptCode(virtual_dept);
            PublicUtil.copyProperties(virtualDeptPerson, vdp, fields, fields);
            save_appendixs.add(virtual_obj);
        }
        ValidateSQLResult result = CommUtil.saveSet(save_appendixs);
        if (result.getResult() == 0) {
            MsgUtil.showInfoMsg(CommMsg.SAVESUCCESS_MESSAGE);
            personSelectPanel.delObjects();
            return true;
        } else {
            MsgUtil.showHRMsg(result, EmpMngMsg.ttl032);
            return false;
        }
    }

    private List getVirtualDepts() {
        List all_depts = UserContext.getDepts(true);
        List<DeptCode> virtual_depts = new ArrayList<DeptCode>();
        Hashtable<String, DeptCode> dept_indexs = new Hashtable<String, DeptCode>();
        Hashtable<String, DeptCode> dept_indexs1 = new Hashtable<String, DeptCode>();
        List<DeptCode> list = new ArrayList<DeptCode>();
        for (Object obj : all_depts) {
            DeptCode dept = (DeptCode) obj;
            if (dept.isVirtual()) {
                virtual_depts.add(dept);
            }
            dept_indexs1.put(dept.getDept_code(), dept);
        }
        for (DeptCode dept : virtual_depts) {
            String compare_val = dept.getDept_code();
            dept_indexs.clear();
            dept_indexs.putAll(dept_indexs1);
            for (String key : dept_indexs.keySet()) {
                if (compare_val.startsWith(key)) {
                    list.add(dept_indexs.get(key));
                    dept_indexs1.remove(key);
                }
            }
        }
        Collections.sort(list, new Comparator() {

            @Override
            public int compare(Object arg0, Object arg1) {
                DeptCode dept = (DeptCode) arg0;
                DeptCode dept1 = (DeptCode) arg1;
                String order_no0 = dept.getDept_code() == null ? "0" : dept.getDept_code();
                String order_no1 = dept1.getDept_code() == null ? "0" : dept1.getDept_code();

                return order_no0.compareTo(order_no1);
            }
        });
        return list;
    }

    class VirtualDeptTreeModel extends DefaultTreeModel {

        private static final long serialVersionUID = 1L;
        private DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(EmpMngMsg.msg091.toString());

        public VirtualDeptTreeModel(List<DeptCode> list) {
            super(new DefaultMutableTreeNode());
            this.setRoot(rootNode);
            buildTree(list);
        }

        public void buildTree(List<DeptCode> list) {
            rootNode.removeAllChildren();
            DefaultMutableTreeNode tmp = rootNode;
            for (DeptCode dept : list) {
                while (tmp != rootNode && !((DeptCode) tmp.getUserObject()).getDept_code().equals(
                        dept.getParent_code())) {
                    tmp = (DefaultMutableTreeNode) tmp.getParent();
                }
                DefaultMutableTreeNode cur = new DefaultMutableTreeNode(dept);
                tmp.add(cur);
                tmp = cur;
            }
        }
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
