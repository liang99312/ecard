/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExportA01PhotoDlg.java
 *
 * Created on 2011-4-21, 15:19:47
 */
package org.jhrcore.client.personnel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.comm.HrLog;
import org.jhrcore.util.TransferAccessory;
import org.jhrcore.client.UserContext;
import org.jhrcore.client.personnel.comm.PersonContainer;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.emp.EmpMngMsg;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.HrTextPane;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.FileChooserUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author Administrator
 */
public class ExportA01PhotoDlg extends javax.swing.JDialog implements IModuleCode {

    private DeptCode dept;
    private List<String> a01_keys;
    private HrTextPane jtaFormulaText;
    private JTree para_tree;
    private File p_file = null;
    private String module_code = "EmpMng.mi_exportPhoto";

    public ExportA01PhotoDlg() {
        this.setTitle("导出人员照片");
        initComponents();
        initOthers();
        setupEvents();
    }

    public ExportA01PhotoDlg(DeptCode dept, List<String> a01_keys) {
        this.dept = dept;
        this.a01_keys = a01_keys;
        this.setTitle("导出人员照片");
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jProgressBar1 = new javax.swing.JProgressBar();
        lblInfo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        rb_dept = new javax.swing.JRadioButton();
        rb_person = new javax.swing.JRadioButton();
        rb_rongqi = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        btnFile = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlLeft = new javax.swing.JPanel();
        pnlRight = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        btnOk.setText("导出");

        btnCancel.setText("关闭");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addGap(53, 53, 53))
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCancel)
                        .addComponent(btnOk))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("人员范围选择："));

        buttonGroup1.add(rb_dept);
        rb_dept.setSelected(true);
        rb_dept.setText("当前部门人员照片");

        buttonGroup1.add(rb_person);
        rb_person.setText("当前选择人员照片");

        buttonGroup1.add(rb_rongqi);
        rb_rongqi.setText("当前人员容器人员");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(rb_dept)
                .addGap(18, 18, 18)
                .addComponent(rb_person)
                .addGap(18, 18, 18)
                .addComponent(rb_rongqi)
                .addContainerGap(153, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rb_dept)
                    .addComponent(rb_person)
                    .addComponent(rb_rongqi))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("导出路径："));

        jLabel1.setText("导出路径：");

        jTextField1.setEnabled(false);

        btnFile.setText("选择");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFile)
                .addContainerGap(176, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFile))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setDividerLocation(250);

        pnlLeft.setBorder(javax.swing.BorderFactory.createTitledBorder("导出照片命名规则："));
        pnlLeft.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(pnlLeft);

        pnlRight.setBorder(javax.swing.BorderFactory.createTitledBorder("参数列表："));
        pnlRight.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(pnlRight);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnOk;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlRight;
    private javax.swing.JRadioButton rb_dept;
    private javax.swing.JRadioButton rb_person;
    private javax.swing.JRadioButton rb_rongqi;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        jtaFormulaText = new HrTextPane();
        pnlLeft.add(jtaFormulaText);
        Hashtable<String, String> akeyword_groups = new Hashtable<String, String>();
        Hashtable<String, List> lookups = new Hashtable<String, List>();
        Hashtable<String, String> k_keywords = new Hashtable<String, String>();
        List<TempFieldInfo> list = new ArrayList<TempFieldInfo>();
        lookups.put("所有", list);
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("参数列表");
        TempFieldInfo dtfi = new TempFieldInfo();
        dtfi.setField_name("dept_code");
        dtfi.setCaption_name("部门代码");
        list.add(dtfi);
        List<TempFieldInfo> infos = EntityBuilder.getCommFieldInfoListOf(A01.class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : infos) {
            String fieldType = tfi.getField_type().toLowerCase();
            if (fieldType.equals("boolean") || fieldType.equals("date") || fieldType.equals("code") || fieldType.equals("float") || fieldType.equals("double") || fieldType.equals("bigdecimal")) {
                continue;
            }
            list.add(tfi);
        }
        String default_text = "";
        for (TempFieldInfo tfi : list) {
            k_keywords.put("[" + tfi.getCaption_name() + "]", tfi.getField_name());
            akeyword_groups.put("[" + tfi.getCaption_name() + "]", "所有");
            rootNode.add(new DefaultMutableTreeNode(tfi));
            if (tfi.getField_name().equals("a0190")) {
                default_text = "[" + tfi.getCaption_name() + "]";
            }
        }
        para_tree = new JTree(rootNode);
        HRRendererView.getCommMap().initTree(para_tree);
        pnlRight.add(new JScrollPane(para_tree));
        jtaFormulaText.revokeDocumentKeys(lookups, akeyword_groups, k_keywords);
        jtaFormulaText.setText(default_text);
    }

    private void setupEvents() {
        btnFile.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                File file = FileChooserUtil.getDirectoryForExport(CommMsg.SELECTFILE_MESSAGE);
                if (file == null) {
                    return;
                }
                p_file = file;
                jTextField1.setText(file.getPath());
            }
        });
        para_tree.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() < 2) {
                    return;
                }

                if (para_tree.getSelectionPath() == null) {
                    return;
                }

                if (para_tree.getSelectionPath().getLastPathComponent() == para_tree.getModel().getRoot()) {
                    return;
                }
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) para_tree.getSelectionPath().getLastPathComponent();
                Object obj = node.getUserObject();
                if (!(obj instanceof TempFieldInfo)) {
                    return;
                }
                final int tmp = jtaFormulaText.getSelectionStart();
                String operator = "[" + ((TempFieldInfo) obj).getCaption_name() + "]";
                jtaFormulaText.replaceSelection(operator);
                jtaFormulaText.setCaretPosition(tmp + operator.length());
                jtaFormulaText.requestFocus();
            }
        });

        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                downloadPictures();
            }
        });
        CloseAction.doCloseAction(btnCancel);
        ComponentUtil.setSysFuntionNew(this, false);
    }

    private void downloadPictures() {
        if (p_file == null) {
//            JOptionPane.showMessageDialog(null, "请选择导出路径", "错误", JOptionPane.ERROR_MESSAGE);
            MsgUtil.showErrorMsg(EmpMngMsg.msg034);
            return;
        }
        if (rb_rongqi.isSelected() && !PersonContainer.getPersonContainer().isVisible()) {
//            JOptionPane.showMessageDialog(null, "请打开人员容器");
            MsgUtil.showInfoMsg(EmpMngMsg.msg035);
            return;
        }
        String tmp = jtaFormulaText.getText().trim();
        Hashtable<String, String> k_keywords = jtaFormulaText.getK_keywords();
        for (String key : k_keywords.keySet()) {
            tmp = tmp.replace(key, k_keywords.get(key));
        }
        if (tmp.equals("")) {
//            JOptionPane.showMessageDialog(null, "导出照片命名规则不允许为空", "错误", JOptionPane.ERROR_MESSAGE);
            MsgUtil.showErrorMsg(EmpMngMsg.msg036);
            return;
        }
        List list = null;
        ValidateSQLResult result = CommUtil.validateSQL("select " + tmp + " from A01,DeptCode d where A01.deptcode_key=d.deptcode_key and 1=0", false);
        if (result.getResult() != 0) {
            MsgUtil.showHRMsg(result, EmpMngMsg.ttl031);
            return;
        }
        if (rb_dept.isSelected()) {
            list = CommUtil.selectSQL("select " + tmp + " as f1,a01.pic_path from a01,deptCode where a01.deptCode_key=deptCode.deptCode_key and a01.pic_path is not null and deptCode.dept_code like '" + dept.getDept_code() + "%' and (" + UserContext.getDept_right_rea_str("deptCode") + ") and (" + UserContext.getPerson_class_right_str(A01.class, "a01") + ")");
        } else if (rb_person.isSelected()) {
            list = CommUtil.selectSQL("select " + tmp + " as f1,a01.pic_path from a01 where a01.pic_path is not null and a01.a01_key in", a01_keys);
        } else {
            list = CommUtil.selectSQL("select " + tmp + " as f1,a01.pic_path from a01 where a01.pic_path is not null and a01.a01_key in", PersonContainer.getPersonContainer().getFTable().getAllKeys());
        }
        if (list.isEmpty()) {
//            JOptionPane.showMessageDialog(null, "没有照片导出");
            MsgUtil.showInfoMsg(EmpMngMsg.msg037);
            return;
        }
        int result_save = 0;
        String folder_path = p_file.getPath();
        File new_file = null;
        if (!p_file.exists()) {
            p_file.mkdirs();
        }
        final int len = list.size();
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
//                lblInfo.setText("开始导出照片：");
                lblInfo.setText(EmpMngMsg.msg039.toString());
                jProgressBar1.setMinimum(0);
                jProgressBar1.setMaximum(len);
                jProgressBar1.setValue(0);
            }
        });
        try {
            ExportA01PhotoDlg.this.setEnabled(false);
            for (Object str_obj : list) {
                Object[] objs = (Object[]) str_obj;
                if (objs[1] == null || "".equals(objs[1].toString())) {
                    continue;
                }
                String p_path = objs[1].toString();
                String type = p_path.substring(p_path.indexOf("."));
                if (type == null || "".equals(type.replace(" ", ""))) {
                    continue;
                }
                String name = objs[0].toString();
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                    }
                });
                BufferedImage tmpImage = TransferAccessory.downloadPicture(p_path);
                if (tmpImage == null) {
                    continue;
                }
                new_file = new File(folder_path + "/" + name + type);
                ImageIO.write(tmpImage, type.substring(1), new_file);
                result_save++;
            }
        } catch (IOException ex) {
            HrLog.error(this.getClass(), ex);
        } finally {
            ExportA01PhotoDlg.this.setEnabled(true);
        }
//        JOptionPane.showMessageDialog(null, "成功导出图片数据：" + result_save);
        MsgUtil.showInfoMsg(EmpMngMsg.msg038.toString() + result_save);
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
