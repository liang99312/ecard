/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmpInfoViewPanel.java
 *
 * Created on 2009-3-7, 11:37:22
 */
package org.jhrcore.client.personnel;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.TransferAccessory;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.JCheckBoxList;
import org.jhrcore.ui.ModelFrame;
import com.foundercy.pf.control.table.FTable;
import java.awt.Image;
import java.awt.event.ComponentAdapter;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import org.jhrcore.client.personnel.comm.PersonContainer;
import org.jhrcore.msg.emp.EmpMngMsg;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.ModalDialog;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.ImageUtil;

/**
 *
 * @author mxliteboss
 */
public class EmpInfoViewPanel extends javax.swing.JPanel implements IModuleCode {

    private JButton btnFirstPerson = new JButton("", ImageUtil.getIcon("page_before.png"));
    private JButton btnLastPerson = new JButton("", ImageUtil.getIcon("page_last.png"));
    private JButton btnAfterPerson = new JButton("", ImageUtil.getIcon("page_after.png"));
    private JButton btnEndPerson = new JButton("", ImageUtil.getIcon("page_end.png"));
    private JButton btnView = new JButton("查看人员");
    private JButton btnClose = new JButton("关闭");
    private JButton btnScheme = new JButton("设置显示方案");
    private List appendix_entitys = new ArrayList();
    private List person_list;
    private A01 cur_person;
    private int cur_index = 0;
    private JCheckBoxList jls_appendix_entity;
    private EmpInfoMainPanel eimPanel;
    private List<EntityDef> select_entitys = new ArrayList<EntityDef>();
    private JLabel person_photo = new JLabel();
    private JLabel jLabel1 = new JLabel(" 查找： ");
    private JComboBox jcbbPersonField = new JComboBox();
    private JTextField jtfPersonValue = new JTextField();
    private JButton btnSearch = new JButton("", ImageUtil.getSearchIcon());
    private FTable ftable;
    private static final Icon none_icon = ImageUtil.getIcon("UserPhoto.jpg");
    private JCheckBox cb_Cantainer = new JCheckBox("选择人员容器人员");
    private List old_list = new ArrayList();
    private String module_code = "EmpMng.mi_personAppendixView";

    public EmpInfoViewPanel() {
        initComponents();
        initOthers();
        setupEvents();
    }

    /** Creates new form EmpInfoViewPanel */
    public EmpInfoViewPanel(List list, A01 cur_person, String module_code) {
        this.module_code = module_code;
        this.person_list = list;
        this.cur_person = cur_person;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl = new javax.swing.JPanel();
        pnlMain = new javax.swing.JPanel();
        pnlRight = new javax.swing.JPanel();
        jsp = new javax.swing.JSplitPane();
        pnlPhoto = new javax.swing.JPanel();
        pnlAppendixEntity = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();

        pnlMain.setPreferredSize(new java.awt.Dimension(650, 650));
        pnlMain.setLayout(new java.awt.BorderLayout());

        jsp.setDividerLocation(150);
        jsp.setDividerSize(3);
        jsp.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlPhoto.setLayout(new java.awt.BorderLayout());
        jsp.setTopComponent(pnlPhoto);

        pnlAppendixEntity.setLayout(new java.awt.BorderLayout());
        jsp.setRightComponent(pnlAppendixEntity);

        javax.swing.GroupLayout pnlRightLayout = new javax.swing.GroupLayout(pnlRight);
        pnlRight.setLayout(pnlRightLayout);
        pnlRightLayout.setHorizontalGroup(
            pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jsp, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
        );
        pnlRightLayout.setVerticalGroup(
            pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jsp, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlLayout = new javax.swing.GroupLayout(pnl);
        pnl.setLayout(pnlLayout);
        pnlLayout.setHorizontalGroup(
            pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLayout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlLayout.setVerticalGroup(
            pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
            .addComponent(pnlRight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jsp;
    private javax.swing.JPanel pnl;
    private javax.swing.JPanel pnlAppendixEntity;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPhoto;
    private javax.swing.JPanel pnlRight;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        ftable = new FTable(A01.class, true, false, false, module_code);
        List<TempFieldInfo> allInfos = new ArrayList<TempFieldInfo>();
        List<TempFieldInfo> defaultInfos = new ArrayList<TempFieldInfo>();
        EntityBuilder.buildInfo(DeptCode.class, allInfos, defaultInfos, "deptCode");
        EntityBuilder.buildInfo(A01.class, allInfos, defaultInfos);
        ftable.setAll_fields(allInfos, defaultInfos, module_code);
        ftable.setObjects(person_list);
        ComponentUtil.setSize(btnFirstPerson, 22, 22);
        ComponentUtil.setSize(btnLastPerson, 22, 22);
        ComponentUtil.setSize(btnAfterPerson, 22, 22);
        ComponentUtil.setSize(btnEndPerson, 22, 22);
        ComponentUtil.setSize(jcbbPersonField, 110, 22);
        ComponentUtil.setSize(jtfPersonValue, 110, 22);
        jLabel1.setPreferredSize(new Dimension(5, 22));
        ComponentUtil.setSize(btnSearch, 22, 22);
        toolbar.add(jLabel1);
        toolbar.add(jcbbPersonField);
        toolbar.add(jtfPersonValue, BorderLayout.CENTER);
        toolbar.add(btnSearch);
        toolbar.add(btnFirstPerson);
        toolbar.add(btnLastPerson);
        toolbar.add(btnAfterPerson);
        toolbar.add(btnEndPerson);
        toolbar.add(btnView);
        toolbar.add(cb_Cantainer);
        toolbar.add(btnScheme);
        toolbar.addSeparator();
        toolbar.add(btnClose);
        List<TempFieldInfo> field_list = EntityBuilder.getCommFieldInfoListOf(A01.class, EntityBuilder.COMM_FIELD_VISIBLE);
        JComboBoxBinding field_binding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, field_list, jcbbPersonField);
        field_binding.bind();
        appendix_entitys.addAll(CommUtil.fetchEntities("from EntityDef ed where ed.entityClass.entityType_code='ANNEX' order by ed.order_no"));
        jls_appendix_entity = new JCheckBoxList(appendix_entitys);
        pnlAppendixEntity.add(new JScrollPane(jls_appendix_entity), BorderLayout.CENTER);
        eimPanel = new EmpInfoMainPanel(new A01());
        pnlMain.add(eimPanel, BorderLayout.CENTER);
        person_photo.setIcon(none_icon);
    }

    private void setupEvents() {
        btnScheme.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ftable.setShowFields();
                refreshMainPanel();
            }
        });
        cb_Cantainer.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cb_Cantainer.isSelected()) {
                    old_list.addAll(person_list);
                    person_list.clear();
                    person_list.addAll(PersonContainer.getPersonContainer().getAllPersons());
                } else {
                    person_list.clear();
                    person_list.addAll(old_list);
                    old_list.clear();
                }
                ftable.setObjects(person_list);
            }
        });
        btnView.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (!ModalDialog.doModal(btnView, ftable, EmpMngMsg.msg076.toString())) {
                    return;
                }
                cur_index = ftable.getCurrentRowIndex();
                refreshMainPanel();
            }
        });
        jls_appendix_entity.getModel().addListDataListener(new ListDataListener() {

            @Override
            public void intervalAdded(ListDataEvent e) {
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
                select_entitys.clear();
                select_entitys.addAll(jls_appendix_entity.getCheckedObjects());
                eimPanel.setAppendixEntity(select_entitys);
            }
        });
        btnClose.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
//                ModelFrame.close((ModelFrame) JOptionPane.getFrameForComponent(btnClose));
                ModelFrame.close();
            }
        });
        btnSearch.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String text = jtfPersonValue.getText();
                if (text == null || text.equals("")) {
                    return;
                }
                TempFieldInfo tfi = (TempFieldInfo) jcbbPersonField.getSelectedItem();
                if (tfi == null) {
                    return;
                }
                String hql = "from A01 bp join fetch bp.deptCode where bp." + tfi.getField_name() + " = '" + text + "' and a0193=0 and "
                        + UserContext.getPerson_class_right_str(A01.class, "bp") + " and " + UserContext.getDept_right_rea_str("bp.deptCode");
                List ll = CommUtil.fetchEntities(hql);
                if (ll != null && ll.size() > 0) {
                    cur_person = (A01) ll.get(0);
                    person_list.add(ll.get(0));
                    cur_index = person_list.size() - 1;
                    refreshMainPanel();
                }
            }
        });
        btnFirstPerson.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cur_index == 0) {
                    return;
                }
                cur_index = 0;
                refreshMainPanel();
            }
        });
        btnLastPerson.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cur_index - 1 < 0) {
                    return;
                }
                cur_index = cur_index - 1;
                refreshMainPanel();
            }
        });
        btnAfterPerson.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if ((cur_index + 1) >= person_list.size()) {
                    return;
                }
                cur_index = cur_index + 1;
                refreshMainPanel();
            }
        });
        btnEndPerson.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cur_index == person_list.size() - 1) {
                    return;
                }
                cur_index = person_list.size() - 1;
                refreshMainPanel();
            }
        });
        pnl.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                pnlRight.setSize(200, pnlRight.getHeight());
                pnlRight.setPreferredSize(pnlRight.getSize());
                pnlRight.setMaximumSize(new Dimension(200, pnlRight.getHeight()));
                eimPanel.setSize(pnlMain.getWidth(), eimPanel.getHeight());
                eimPanel.setPreferredSize(eimPanel.getPreferredSize());
            }
        });
        if (cur_person == null) {
            cur_index = 0;
        } else {
            for (int i = 0; i < person_list.size(); i++) {
                A01 bp = (A01) person_list.get(i);
                if (bp.getA01_key().equals(cur_person.getA01_key())) {
                    cur_index = i;
                    break;
                }
            }
        }
        refreshMainPanel();
        ComponentUtil.setSysFuntionNew(this, false);
    }

    public void getPersonPic(A01 person) {
        pnlPhoto.removeAll();
        BufferedImage tmpImage = TransferAccessory.downloadPicture(person.getPic_path());
        if (tmpImage != null) {
            JLabel lbl = new JLabel();
            lbl.setIcon(new ImageIcon(tmpImage.getScaledInstance(120, 150, Image.SCALE_DEFAULT)));
            pnlPhoto.add(lbl, BorderLayout.CENTER);
        } else {
            pnlPhoto.add(person_photo, BorderLayout.CENTER);
        }
        pnlPhoto.updateUI();
    }

    private void refreshMainPanel() {
        cur_person = (A01) person_list.get(cur_index);
        eimPanel.setPerson(cur_person, ftable.getFields(), ftable.getCur_show_scheme());
        eimPanel.setAppendixEntity(select_entitys);
        getPersonPic(cur_person);
        eimPanel.updateUI();
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
