/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmpAddPhotosDlg.java
 *
 * Created on 2010-3-22, 15:50:09
 */
package org.jhrcore.client.personnel;

import com.foundercy.pf.control.listener.IPickPopupListener;
import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.client.CommUtil;
import org.jhrcore.comm.HrLog;
import org.jhrcore.util.SysUtil;
import org.jhrcore.util.TransferAccessory;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.FileManager;
import org.jhrcore.entity.SysParameter;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.emp.EmpMngMsg;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.DeptSelectDlg;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.FileChooserUtil;
import org.jhrcore.util.FileUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class EmpAddPhotosDlg extends javax.swing.JDialog implements IModuleCode {

    private JComboBoxBinding field_binding;
    private FTable ftable;
    private JMenuItem miAdd = new JMenuItem("ÃÌº”’’∆¨");
    private JMenuItem miDel = new JMenuItem("…æ≥˝’’∆¨");
    private Object cur_obj;
    private DeptCode cur_dept;
    private ListSelectionListener listener;
    private HashSet<String> exist_files = new HashSet<String>();
    private SysParameter emp_pic_size_para;
    private final String title = "≈˙¡øµº»Î’’∆¨";
    private HrLog log = new HrLog("EmpMng." + title);
    private String module_code = "EmpMng.mi_photo_up";

    public EmpAddPhotosDlg() {
        this.setTitle(title);
        initComponents();
        initOthers();
        setupEvents();
    }

    /** Creates new form EmpAddPhotosDlg */
    public EmpAddPhotosDlg(java.awt.Frame parent) {
        super(parent);
        this.setTitle(title);
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlMain = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcbField = new javax.swing.JComboBox();
        jToolBar1 = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        pnlPhoto = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        lblInfo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dept_name = new javax.swing.JTextField();
        btnDept = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblSize = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        pnlMain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMain.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("∆•≈‰◊÷∂Œ£∫");

        jcbField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnAdd.setText("ÃÌº”’’∆¨");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnAdd);

        btnDel.setText("…æ≥˝’’∆¨");
        btnDel.setFocusable(false);
        btnDel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnDel);

        jLabel4.setText("‘§¿¿£∫");

        pnlPhoto.setLayout(new java.awt.BorderLayout());

        lblInfo.setText("jLabel2");

        jLabel2.setText("≤ø√≈∆•≈‰£∫");

        btnDept.setText("jButton1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jcbField, 0, 170, Short.MAX_VALUE)
                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)))
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnlPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(28, 28, 28))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel4)
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(dept_name, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnDept, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap()))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dept_name, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDept, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
        );

        btnOk.setText("…œ¥´");

        btnCancel.setText("πÿ±’");

        jLabel5.setText("Àµ√˜£∫");

        jLabel6.setText("1°£Ω®“È’’∆¨∞¥120*150œÒÀÿ±»¿˝Àı∑≈£¨Ω´»°µ√Ωœ∫√œ‘ æ–ßπ˚°£");

        jLabel10.setText("2°£’’∆¨±ÿ–Î «JPG°¢PNG°¢GIF°¢BMP÷–“ª÷÷°£");

        jLabel11.setText("3°£’’∆¨¥Û–°œﬁ÷∆£∫");

        lblSize.setForeground(java.awt.Color.blue);
        lblSize.setText("300");

        jLabel13.setText("K£®À´ª˜–ﬁ∏ƒ£¨-1±Ì æ≤ªœﬁ÷∆£©");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSize, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(lblSize)
                    .addComponent(jLabel13))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOk)
                            .addComponent(btnCancel))
                        .addContainerGap(44, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnDept;
    private javax.swing.JButton btnOk;
    private javax.swing.JTextField dept_name;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox jcbField;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblSize;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPhoto;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        List<TempFieldInfo> a01_fields = EntityBuilder.getCommFieldInfoListOf(A01.class, EntityBuilder.COMM_FIELD_VISIBLE);
        List<TempFieldInfo> bind_fields = new ArrayList<TempFieldInfo>();
        TempFieldInfo select_tfi = null;
        for (TempFieldInfo tfi : a01_fields) {
            if (tfi.getField_name().endsWith("_code_")) {
                continue;
            }
            if (!tfi.getField_type().toLowerCase().equals("string")) {
                continue;
            }
            if (tfi.getField_name().equals("a0190")) {
                select_tfi = tfi;
            }
            bind_fields.add(tfi);
        }
        field_binding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ, bind_fields, jcbField);
        field_binding.bind();
        if (select_tfi != null) {
            jcbField.setSelectedItem(select_tfi);
        }
        List<String> fields = new ArrayList<String>();
        fields.add("file_name");
        fields.add("file_type");
        fields.add("file_size");
        ftable = new FTable(FileManager.class, fields, false, false, false, "EmpAddPhotosDlg");
        ftable.setRight_allow_flag(true);
        ftable.addPickPopupListener(new IPickPopupListener() {

            @Override
            public void addMenuItem(JPopupMenu pp) {
                pp.removeAll();
                pp.add(miAdd);
                pp.add(miDel);
            }
        });
        pnlMain.add(ftable, BorderLayout.CENTER);
        lblInfo.setVisible(false);
        jProgressBar1.setVisible(false);
    }

    private void setupEvents() {
        btnDept.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                DeptSelectDlg dlg = new DeptSelectDlg(UserContext.getDepts(false), cur_dept);
                ContextManager.locateOnMainScreenCenter(dlg);
                dlg.setVisible(true);
                if (dlg.isClick_ok()) {
                    cur_dept = dlg.getCurDept();
                    if (cur_dept != null) {
                        dept_name.setText(cur_dept.getContent());
                    }
                }
            }
        });
        ActionListener al_add = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                List<File> selectedFiles = FileChooserUtil.getManyFile(CommMsg.SELECTFILE_MESSAGE, FileChooserUtil.picFilter, FileChooserUtil.FILES_ONLY);
                if (selectedFiles.isEmpty()) {
                    return;
                }
                int error_size_no = 0;
                int error_type_no = 0;
                int error_repeat_no = 0;
                List<FileManager> files = new ArrayList<FileManager>();
                for (File f : selectedFiles) {
                    FileManager fm = new FileManager();
                    int result = checkPic(f, fm);
                    if (result == 1) {
                        error_size_no++;
                    } else if (result == 2) {
                        error_type_no++;
                    } else {
                        String fileName = fm.getFile_name();
                        if (!exist_files.contains(fileName)) {
                            exist_files.add(fileName);
                            files.add(fm);
                        } else {
                            error_repeat_no++;
                        }
                    }
                }
                ftable.addObjects(files);
                log.info("π≤—°‘Ò" + selectedFiles.size() + "∏ˆŒƒº˛£¨∑˚∫œÃıº˛µƒ" + files.size() + "∏ˆ£¨Œƒº˛¥Û–°≤ª∑˚∫œµƒ" + error_size_no + "∏ˆ£¨Œƒº˛¿‡–Õ≤ª∑˚∫œµƒ" + error_type_no + "∏ˆ,÷ÿ∏¥Œƒº˛" + error_repeat_no + "∏ˆ");
            }
        };
        btnAdd.addActionListener(al_add);
        miAdd.addActionListener(al_add);
        ActionListener al_del = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                ftable.removeListSelectionListener(listener);
                List list = ftable.getSelectObjects();
                for (Object obj : list) {
                    FileManager fm = (FileManager) obj;
                    exist_files.remove(fm.getFile_name());
                }
                ftable.deleteSelectedRows();
                ftable.addListSelectionListener(listener);
                listener.valueChanged(null);
            }
        };
        listener = new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (cur_obj == ftable.getCurrentRow()) {
                    return;
                }
                cur_obj = ftable.getCurrentRow();
                try {
                    viewPhoto(cur_obj);
                } catch (Exception ex) {
                    pnlPhoto.removeAll();
                    pnlPhoto.updateUI();
                }
            }
        };
        ftable.addListSelectionListener(listener);
        btnDel.addActionListener(al_del);
        miDel.addActionListener(al_del);
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                Object obj = jcbField.getSelectedItem();
                if (obj == null) {
//                    JOptionPane.showMessageDialog(null, "√ª”–∆•≈‰◊÷∂Œ");
                    MsgUtil.showInfoMsg(EmpMngMsg.msg026);
                    return;
                }
                TempFieldInfo tfi = (TempFieldInfo) obj;
                final List list = ftable.getObjects();
                if (list.size() > 10000) {
//                    JOptionPane.showMessageDialog(null, "“ª¥Œ–‘µº»Î’’∆¨≤ª‘ –Ì≥¨π˝10000’≈");
                    MsgUtil.showInfoMsg(EmpMngMsg.msg027);
                    log.info("$“ª¥Œ–‘µº»Î’’∆¨≤ª‘ –Ì≥¨π˝10000’≈");
                    return;
                }
                jProgressBar1.setVisible(true);
                lblInfo.setVisible(true);
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        lblInfo.setText(EmpMngMsg.msg083.toString());
                        log.info("…œ¥´≤Ω÷Ë1:’’∆¨‘§¥¶¿Ì");
                        jProgressBar1.setMinimum(0);
                        jProgressBar1.setMaximum(list.size());
                        jProgressBar1.setValue(0);
                    }
                });
                List del_list = ftable.getObjects();
                int len = list.size();
                int mod_len = len / 100;//105
                int re_len = mod_len + ((len % 100) == 0 ? 0 : 1);
                Hashtable<String, FileManager> file_keys = new Hashtable<String, FileManager>();
                int ind = 0;
                List<String> strs = new ArrayList<String>();
                for (int i = 0; i < re_len; i++) {
                    StringBuffer str = new StringBuffer();
                    str.append("'-1'");
                    if (i < mod_len) {
                        for (int j = 0; j < 100; j++) {
                            SwingUtilities.invokeLater(new Runnable() {

                                @Override
                                public void run() {
                                    jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                                }
                            });
                            ind = i * 100 + j;
                            FileManager fm = (FileManager) list.get(ind);
                            str.append(",'");
                            str.append(fm.getFile_name());
                            str.append("'");
                            file_keys.put(fm.getFile_name(), fm);
                        }
                    } else {
                        for (int j = 0; j < 100; j++) {
                            SwingUtilities.invokeLater(new Runnable() {

                                @Override
                                public void run() {
                                    jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                                }
                            });
                            ind = i * 100 + j;
                            if (ind >= len) {
                                break;
                            }
                            FileManager fm = (FileManager) list.get(ind);
                            str.append(",'");
                            str.append(fm.getFile_name());
                            str.append("'");
                            file_keys.put(fm.getFile_name(), fm);
                        }
                    }
                    strs.add(str.toString());
                }
                final HashSet<Object[]> right_files = new HashSet<Object[]>();
                String dept_sql = "";
                if (cur_dept != null) {
                    dept_sql = " and d.dept_code like '" + cur_dept.getDept_code() + "%'";
                }
                for (String str : strs) {
                    String sql = "select a01.a01_key,d.dept_code,a01." + tfi.getField_name() + ",pic_path from A01 a01,DeptCode d where a01.deptCode_key=d.deptCode_key and " + tfi.getField_name() + " in (" + str + ") and (" + UserContext.dept_right_str + ")";
                    sql += dept_sql;
                    right_files.addAll((List<Object[]>) CommUtil.selectSQL(sql));
                }
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        lblInfo.setText(EmpMngMsg.msg082.toString());
                        log.info("…œ¥´≤Ω÷Ë2:…æ≥˝‘≠”–’’∆¨");
                        jProgressBar1.setMinimum(0);
                        jProgressBar1.setMaximum(right_files.size());
                        jProgressBar1.setValue(0);
                    }
                });
                StringBuffer ex_str = new StringBuffer();
                for (Object[] objs : right_files) {
                    if (objs[3] != null && !objs[3].toString().trim().equals("")) {
                        SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {
                                jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                            }
                        });
                        TransferAccessory.deletePicture(objs[3].toString());
                    }
                }
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        lblInfo.setText(EmpMngMsg.msg081.toString());
                        log.info("…œ¥´≤Ω÷Ë3:…œ¥´’’∆¨");
                        jProgressBar1.setMinimum(0);
                        jProgressBar1.setMaximum(right_files.size());
                        jProgressBar1.setValue(0);
                    }
                });
                for (Object[] objs : right_files) {
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                        }
                    });
                    FileManager fm = (FileManager) file_keys.get(objs[2].toString());
                    del_list.remove(fm);
                    String path = objs[1] + "/" + objs[2] + "." + fm.getFile_type();
                    TransferAccessory.uploadPicture(fm.getFile(), path);
                    ex_str.append("update A01 set pic_path='" + path + "' where a01_key='" + objs[0] + "';");
                }
                if (right_files.size() > 0) {
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            lblInfo.setText(EmpMngMsg.msg080.toString());
                            log.info("…œ¥´≤Ω÷Ë4:∏¸–¬»À‘±–≈œ¢");
                            jProgressBar1.setMinimum(0);
                            jProgressBar1.setMaximum(1);
                            jProgressBar1.setValue(0);
                        }
                    });
                    ValidateSQLResult result = CommUtil.excuteSQLs(ex_str.toString(), ";");
                    if (result.getResult() == 0) {
                        SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {
                                jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                            }
                        });
                        MsgUtil.showInfoMsg(CommMsg.UPLOADSUCCESS);
                        log.info("…œ¥´≤Ω÷Ë5:…œ¥´≥…π¶");
                    } else {
                        MsgUtil.showHRSaveErrorMsg(result);
                    }
                } else {
                    MsgUtil.showInfoMsg(EmpMngMsg.msg024);
                    log.info("√ª”–∆•≈‰’’∆¨");
                }
                jProgressBar1.setVisible(false);
                lblInfo.setVisible(false);
                ftable.removeListSelectionListener(listener);
                exist_files.clear();
                ftable.setObjects(del_list);
                ftable.addListSelectionListener(listener);
                listener.valueChanged(null);
                ftable.updateUI();
                viewNotRightPhoto(ftable.getAllObjects());
            }
        });
        CloseAction.doCloseAction(btnCancel);
        lblSize.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (!UserContext.isSA) {
                    return;
                }
                log.info("…Ë÷√’’∆¨¥Û–°");
                if (e.getClickCount() >= 2) {
//                    Object scheme_name = JOptionPane.showInputDialog(JOptionPane.getFrameForComponent(lblSize), "", "«Î ‰»ÎÕº∆¨‘ –Ì¥Û–°£∫", JOptionPane.INFORMATION_MESSAGE, null, null, "");
                    Object scheme_name = MsgUtil.showInputDialog(EmpMngMsg.msg028);
                    if (scheme_name == null) {
                        return;
                    }
                    if (!scheme_name.toString().trim().equals("0") && (SysUtil.objToInt(scheme_name) == 0)) {
//                        JOptionPane.showMessageDialog(null, "Õº∆¨¥Û–°±ÿ–ÎŒ™ ˝◊÷");
                        MsgUtil.showInfoMsg(EmpMngMsg.msg025);

                        return;
                    }
                    int size = SysUtil.objToInt(scheme_name);
                    size = size >= 0 ? size : -1;
                    emp_pic_size_para.setSysparameter_value(size + "");
                    ValidateSQLResult vs = CommUtil.saveOrUpdate(emp_pic_size_para);
                    lblSize.setText(emp_pic_size_para.getSysparameter_value());
                    lblSize.updateUI();
                    if (vs.getResult() == 0) {
                        log.info("…Ë÷√’’∆¨¥Û–°≥…π¶£¨¥Û–° «£∫" + size);
                    } else {
                        log.info("…Ë÷√’’∆¨ ß∞‹");
                    }
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        });
        emp_pic_size_para = (SysParameter) CommUtil.fetchEntityBy("from SysParameter s where s.sysParameter_key='Emp_pic_size'");
        if (emp_pic_size_para == null) {
            emp_pic_size_para = new SysParameter();
            emp_pic_size_para.setSysParameter_key("Emp_pic_size");
            emp_pic_size_para.setSysparameter_code("Emp_pic_size");
            emp_pic_size_para.setSysparameter_value("300");
            CommUtil.saveOrUpdate(emp_pic_size_para);
        }
        lblSize.setText(emp_pic_size_para.getSysparameter_value());
        lblSize.updateUI();
        ComponentUtil.setSysFuntionNew(this, false);
    }

    /**
     * ∏˘æ›µ±«∞––∂‘œÛ‘§¿¿’’∆¨
     * @param cur_obj£∫µ±«∞––∂‘œÛ
     */
    private void viewPhoto(Object cur_obj) {
        pnlPhoto.removeAll();
        if (cur_obj == null) {
            pnlPhoto.updateUI();
            return;
        }
        FileManager fm = (FileManager) cur_obj;
        BufferedImage origImage = null;
        try {
            origImage = ImageIO.read(fm.getFile());
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        Icon tmpIcon = null;
        if (origImage != null) {
            tmpIcon = new ImageIcon(origImage.getScaledInstance(120, 150, Image.SCALE_DEFAULT));
        }
        JLabel label = new JLabel(tmpIcon);
        pnlPhoto.add(label, BorderLayout.CENTER);
        pnlPhoto.updateUI();
    }

    /**
     * ∏√∑Ω∑®”√”⁄–£—È¥´»Îµƒ’’∆¨ «∑Ò∫œ∑®£¨÷˜“™∞¸¿®Œƒº˛¿‡–Õ±ÿ–ÎŒ™jpg/png/gif∫ÕŒƒº˛¥Û–°≤ª¥Û”⁄100K
     * @param file£∫ƒø±ÍŒƒº˛
     * @param fm£∫≤Œ ˝Œƒº˛
     * @return£∫0£∫∫œ∑®£ª1£∫¥Û–°≤ª∫œ∑®£ª2¿‡–Õ≤ª∫œ∑®
     */
    private int checkPic(File file, FileManager fm) {
        int result = 0;
        int pic_size = SysUtil.objToInt(emp_pic_size_para.getSysparameter_value());
        fm.setFile_size(file.length() / 1024);
        if (pic_size >= 0 && fm.getFile_size() > pic_size) {
            result = 1;//Õº∆¨Ã´¥Û
        } else if (!(file.getName().toLowerCase().endsWith("jpg") || file.getName().toLowerCase().endsWith("bmp")
                || file.getName().toLowerCase().endsWith("png") || file.getName().toLowerCase().endsWith("gif"))) {
            result = 2;//Õº∆¨∏Ò Ω≤ª∂‘
        } else {
            fm.setFile(file);
            String fileName = file.getName();
            String[] fileNames = fileName.split("\\.");
            fm.setFile_name(fileNames[0]);
            fm.setFile_type(fileNames[fileNames.length - 1]);
        }
        return result;
    }

    private void viewNotRightPhoto(List list) {
        if (list != null && list.size() != 0) {
            FileManager fm = (FileManager) cur_obj;
            String pic_path = fm.getFile().getPath();
            String dir = pic_path.substring(0, pic_path.lastIndexOf("\\")) + "\\temp" + new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
            if (MsgUtil.showNotConfirmDialog(EmpMngMsg.msg029)) {
                return;
            }
            File tmp = new File(dir);
            if (!tmp.exists()) {
                tmp.mkdirs();
            }
            for (Object obj : list) {
                if (obj instanceof FileManager) {
                    FileManager fm1 = (FileManager) obj;
                    File in = fm1.getFile();
                    File out = new File(dir + "\\" + fm1.getFile_name() + "." + fm1.getFile_type());
                    if (!out.exists()) {
                        try {
                            out.createNewFile();
                        } catch (IOException ex) {
                            log.error(ex);
                        }
                    }
                    try {
                        FileUtil.CopyFile(in, out);
                    } catch (Exception ex) {
                        log.error(ex);
                    }
                }
            }
            try {
                Runtime.getRuntime().exec("cmd /c call explorer " + dir);
            } catch (IOException ex) {
                log.error(ex);
            }

        }
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
