/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RegisterDesignParaPanel.java
 *
 * Created on 2010-10-9, 11:34:36
 */
package org.jhrcore.client.personnel.register;

import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import org.jhrcore.client.CommUtil;
import org.jhrcore.ui.WizardPanel;
import org.jhrcore.entity.SysParameter;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.msg.emp.EmpRegisterMsg;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author hflj
 */
public class RegisterDesignParaPanel extends WizardPanel implements IModuleCode{

    private List<EntityDef> list_tempAppendixEntitys = new ArrayList<EntityDef>();
    private List<EntityDef> list_peopleClasses = new ArrayList<EntityDef>();
    private FTable ftable;
    private FTable ftable2;
    private RegisterDesignPara registerDesignPara;
    private String module_code = "EmpRegister.menuRegister.para";

    public RegisterDesignParaPanel() {
        initComponents();
        initOthers();
    }

    /** Creates new form RegisterDesignParaPanel */
    
    
    public RegisterDesignParaPanel(RegisterDesignPara registerDesignPara) {
        this.registerDesignPara = registerDesignPara;
        initComponents();
        initOthers();
        ComponentUtil.setSysFuntionNew(this, false);
    }

    private void initOthers() {
        HashSet register_person_classes = new HashSet();
        HashSet register_appendixs = new HashSet();
        SysParameter register_class_para = registerDesignPara.getRegister_class_para();
        if (register_class_para.getSysparameter_value() != null) {
            String[] classes = register_class_para.getSysparameter_value().split(";");
            register_person_classes.addAll(Arrays.asList(classes));
        }
        SysParameter register_appendix_para = registerDesignPara.getRegister_appendix_para();
        if (register_appendix_para.getSysparameter_value() != null) {
            String[] appendixs = register_appendix_para.getSysparameter_value().split(";");
            register_appendixs.addAll(Arrays.asList(appendixs));
        }
        List list_peopleClass = CommUtil.fetchEntities("from EntityDef  ed join fetch ed.entityClass where ed.entityClass.entityType_code in('CLASS','ANNEX') order by ed.order_no");
        for (Object obj : list_peopleClass) {
            EntityDef ed = (EntityDef) obj;
            if (ed.getEntityClass().getEntityType_code().equals("CLASS")) {
                list_peopleClasses.add(ed);
                if (register_person_classes.contains(ed.getEntityName())) {
                    ed.setSelect_flag(true);
                }
            } else {
                list_tempAppendixEntitys.add(ed);
                if (register_appendixs.contains(ed.getEntityName())) {
                    ed.setSelect_flag(true);
                }
            }
        }
        List<String> fields = new ArrayList<String>();
        fields.add("entityName");
        fields.add("entityCaption");
        fields.add("select_flag");
        ftable = new FTable(EntityDef.class, fields, false, false, false, "RegisterDesDailog");
        List<String> disable_fields = new ArrayList<String>();
        disable_fields.add("entityName");
        disable_fields.add("entityCaption");
        ftable.setDisable_fields(disable_fields);
        ftable.setEditable(true);
        ftable.setObjects(list_peopleClasses);
        ftable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlPeopleClass.add(ftable, BorderLayout.CENTER);
        ftable2 = new FTable(EntityDef.class, fields, false, false, false, "RegisterDesDailog");
        ftable2.setDisable_fields(disable_fields);
        ftable2.setEditable(true);
        ftable2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ftable2.setObjects(list_tempAppendixEntitys);
        pnlAppendix.add(ftable2, BorderLayout.CENTER);
        jCheckBox1.setSelected("1".equals(registerDesignPara.getRegister_field_para().getSysparameter_value()));
        jCheckBox2.setSelected("1".equals(registerDesignPara.getRegister_check_para().getSysparameter_value()));
        jCheckBox3.setSelected("1".equals(registerDesignPara.getRegister_a0177_para().getSysparameter_value()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPeopleClass = new javax.swing.JPanel();
        pnlAppendix = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();

        pnlPeopleClass.setBorder(javax.swing.BorderFactory.createTitledBorder("入职允许类别选择："));
        pnlPeopleClass.setLayout(new java.awt.BorderLayout());

        pnlAppendix.setBorder(javax.swing.BorderFactory.createTitledBorder("入职录入附表选择："));
        pnlAppendix.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("系统设置："));

        jCheckBox2.setText("入职需要审批");

        jCheckBox1.setText("允许录入浏览字段");

        jCheckBox3.setText("身份证重复不允许录入");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCheckBox2)
                .addComponent(jCheckBox1)
                .addComponent(jCheckBox3))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlPeopleClass, 0, 454, Short.MAX_VALUE)
            .addComponent(pnlAppendix, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPeopleClass, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlAppendix, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel pnlAppendix;
    private javax.swing.JPanel pnlPeopleClass;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean isValidate() {
        ftable.editingStopped();
        String register_class = "";
        for (EntityDef prs : list_peopleClasses) {
            if (prs.isSelect_flag()) {
                register_class += prs.getEntityName() + ";";
            }
        }
        if(register_class.equals("")){
//            JOptionPane.showMessageDialog(null, "未选择任何人员类别!","错误",JOptionPane.ERROR_MESSAGE);
            MsgUtil.showErrorMsg(EmpRegisterMsg.msg026);
            return false;
        }
        registerDesignPara.getRegister_class_para().setSysparameter_value(register_class);
        return true;
    }

    @Override
    public void beforeLeave() {
        ftable2.editingStopped();
        String register_appendix = "";
        for (EntityDef pras : list_tempAppendixEntitys) {
            if (pras.isSelect_flag()) {
                register_appendix += pras.getEntityName() + ";";
            }
        }
        registerDesignPara.getRegister_appendix_para().setSysparameter_value(register_appendix);
        registerDesignPara.getRegister_field_para().setSysparameter_value(jCheckBox1.isSelected() ? "1" : "0");
        registerDesignPara.getRegister_check_para().setSysparameter_value(jCheckBox2.isSelected() ? "1" : "0");
        registerDesignPara.getRegister_a0177_para().setSysparameter_value(jCheckBox3.isSelected() ? "1" : "0");
    }

    @Override
    public String getTitle() {
        return EmpRegisterMsg.msg027.toString();
    }

    @Override
    public String getModuleCode() {
        return module_code;             
    }
}
