/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddFileDlg.java
 *
 * Created on 2009-7-15, 15:35:03
 */
package org.jhrcore.client.personnel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Date;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.FileManager;
import org.jhrcore.util.UtilTool;
import org.jhrcore.msg.emp.EmpMngMsg;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.task.IModuleCode;

/**
 *
 * @author Administrator
 */
public class AddFileDlg extends javax.swing.JDialog implements IModuleCode {

    private File file;
    private A01 person;
    private Dimension di, di2;
    private JTree tree;
    private DefaultMutableTreeNode rootNode;
    private DefaultMutableTreeNode firstNode;
    private DefaultMutableTreeNode cur_node = null;
    private Date date;
    private String str;
    private String type_string;
    private JTree docTree;
    private DefaultMutableTreeNode node1;
    private DefaultMutableTreeNode rnode;
    private final String module_code = "EmpMng.mi_doc.btnAdd";

    public AddFileDlg() {
        initComponents();
        initOthers();
        setupEvents();
    }

    /** Creates new form AddFileDlg */
    public AddFileDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public AddFileDlg(A01 person, File file, Date date, String str, JTree docTree, DefaultMutableTreeNode node1, DefaultMutableTreeNode rnode) {
        this.file = file;
        this.person = person;
        this.date = date;
        this.str = str;
        this.docTree = docTree;
        this.node1 = node1;
        this.rnode = rnode;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlTree = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        fileName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        pnlSign = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        message = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        pnlTree.setLayout(new java.awt.BorderLayout());

        btnNew.setText("新建文件夹");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTree, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(btnNew)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnNew))
                    .addComponent(pnlTree, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        btnOk.setText("确定");

        btnCancel.setText("取消");

        btnCreate.setText("创建到>");

        jLabel1.setText("文件名称：");

        pnlSign.setLayout(new java.awt.BorderLayout());

        message.setBackground(new java.awt.Color(236, 233, 216));
        message.setColumns(20);
        message.setRows(5);
        jScrollPane1.setViewportView(message);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(pnlSign, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileName, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCreate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(btnOk, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(pnlSign, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreate))
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnOk)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancel)))
                        .addGap(58, 58, 58))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnOk;
    private javax.swing.JTextField fileName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea message;
    private javax.swing.JPanel pnlSign;
    private javax.swing.JPanel pnlTree;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        di = this.getSize();
        Dimension di3 = new Dimension();
        di3.setSize(di.width, di.height - 29);
        di = di3;
        this.setSize(this.getWidth(), jPanel2.getHeight() + 10);
        di2 = this.getSize();
        message.setEditable(false);
        message.setLineWrap(true);
        String str = "文件管理器将“";
        str += file.getPath();
        str += "”文件加入到所选的文件中。";
        message.setText(str);
        fileName.setText(file.getName());
        rootNode = new DefaultMutableTreeNode("文档分类");
        firstNode = new DefaultMutableTreeNode("共享文件");
        rootNode.add(firstNode);
        tree = new JTree(rootNode);
        buildT();
        tree.setShowsRootHandles(true);
        JScrollPane pane = new JScrollPane(tree);
        pane.setBackground(Color.WHITE);
        pnlTree.add(pane, BorderLayout.CENTER);
        FileSystemView view = FileSystemView.getFileSystemView();
        Icon icon = view.getSystemIcon(file);
        JLabel label = new JLabel(icon);
        pnlSign.setBackground(Color.WHITE);
        pnlSign.add(label, BorderLayout.CENTER);
        tree.expandRow(0);
        tree.setSelectionRow(1);
        cur_node = (DefaultMutableTreeNode) tree.getSelectionPath().getLastPathComponent();
        String string = file.getName();
        type_string = string.substring(string.indexOf("."), string.length());
    }

    private void buildT() {
        List list = CommUtil.selectSQL("select distinct file_folder from FileManager fm where fm.file_folder !='" + EmpMngMsg.msg067.toString() + "' and fm.manager_code ='" + person.getA0190() + "'");
        if (list.size() != 0) {
            for (Object obj : list) {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(obj.toString());
                rootNode.add(node);
            }
        }
    }

    private void setupEvents() {
        tree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                cur_node = (DefaultMutableTreeNode) tree.getSelectionPath().getLastPathComponent();
            }
        });
        btnCreate.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (btnCreate.getText().equals(EmpMngMsg.msg068.toString())) {
                    setSize(di);
                    btnCreate.setText(EmpMngMsg.msg069.toString());
                } else {
                    btnCreate.setText(EmpMngMsg.msg068.toString());
                    setSize(di2);
                }
            }
        });
        CloseAction.doCloseAction(btnCancel);
        btnNew.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                AddFolderDlg addFolderDlg = new AddFolderDlg(rootNode, tree);
//                addFolderDlg.setTitle("新建文件夹");
                addFolderDlg.setTitle(EmpMngMsg.msg070.toString());
                ContextManager.locateOnMainScreenCenter(addFolderDlg);
                addFolderDlg.setVisible(true);
            }
        });
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cur_node == null || cur_node == rootNode) {
                    return;
                }
                FileManager fm = (FileManager) UtilTool.createUIDEntity(FileManager.class);
                fm.setAdd_time(date);
                fm.setFile_folder(cur_node.toString());
                fm.setFile_name(file.getName());
                fm.setFile_type(type_string);
                fm.setManager_code(person.getA0190());
                fm.setUser_name(str);
                fm.setManager_type(EmpMngMsg.msg071.toString());
                if ((EmpMngMsg.msg072.toString()).equals(cur_node.toString())) {
//                    fm.setFile_path("$/共享文档/" + file.getName());
                    fm.setFile_path(EmpMngMsg.msg073.toString() + file.getName());
                    CommUtil.uploadFile(file, fm.getFile_path());
                } else {
                    fm.setFile_path(EmpMngMsg.msg074.toString() + person.getA0190() + file.getName());
                    CommUtil.uploadFile(file, fm.getFile_path());
                }
                CommUtil.saveEntity(fm);
                DefaultMutableTreeNode t_node = new DefaultMutableTreeNode(fm);
                if (fm.getFile_folder().equals(EmpMngMsg.msg075.toString())) {
                    node1.add(t_node);
                } else {
                    cur_node.add(t_node);
                    rnode.add(cur_node);
                }
                docTree.updateUI();
                dispose();
            }
        });

    }

    public void copyFile(String oldPath, String newPath) {
        try {
            int bytesum = 0;
            int byteread = 0;
            File oldfile = new File(oldPath);
            if (oldfile.exists()) { //文件存在时
                InputStream inStream = new FileInputStream(oldPath); //读入原文件
                FileOutputStream fs = new FileOutputStream(newPath);
                byte[] buffer = new byte[1444];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread; //字节数 文件大小
                    // System.out.println(bytesum);
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
            }
        } catch (Exception e) {
            System.out.println("复制单个文件操作出错");
            e.printStackTrace();

        }

    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
