/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmpAddPhotosPanel.java
 *
 * Created on 2010-6-7, 14:42:32
 */

package org.jhrcore.client.personnel;

import com.foundercy.pf.control.table.FTable;
import com.fr.design.file.core.ChooseFileFilter;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import org.apache.log4j.Logger;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.FileManager;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.DeptSelectDlg;
import org.jhrcore.ui.FormulaTextDialog;
import org.jhrcore.ui.ModelFrame;
import org.jhrcore.util.FileChooserUtil;
import org.jhrcore.util.ImageUtil;
import org.jhrcore.util.TransferAccessory;

/**
 *
 * @author Administrator
 */
public class EmpAddPhotosPanel extends javax.swing.JPanel {

    private JComboBoxBinding field_binding;
    private FTable ftable;
    private JFileChooser file_chooser;
    private JMenuItem mi_add = new JMenuItem("ÃÌº”’’∆¨");
    private JMenuItem mi_del = new JMenuItem("…æ≥˝’’∆¨");
    private Object cur_obj;
    private DeptCode cur_dept;
    private ListSelectionListener listener;
    private Logger log = Logger.getLogger(EmpAddPhotosDlg.class.getName());
    private HashSet<String> exist_files = new HashSet<String>();
    private final Icon blankIcon =
            ImageUtil.getIcon("blank_2.png");

    /** Creates new form EmpAddPhotosPanel */
    public EmpAddPhotosPanel() {
        initComponents();
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        pnlMain = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jcbField = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        dept_name = new javax.swing.JTextField();
        btnDept = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        pnlPhoto = new javax.swing.JPanel();
        lblInfo = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel4 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        pnlMain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMain.setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnAdd.setText("ÃÌº”’’∆¨");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnAdd);

        btnDel.setText("…æ≥˝’’∆¨");
        btnDel.setFocusable(false);
        btnDel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnDel);

        jLabel1.setText("∆•≈‰◊÷∂Œ£∫");

        jcbField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("≤ø√≈∆•≈‰£∫");

        btnDept.setText("jButton1");

        jLabel4.setText("‘§¿¿£∫");

        pnlPhoto.setLayout(new java.awt.BorderLayout());

        lblInfo.setText("jLabel2");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jcbField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dept_name)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(pnlPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnDept, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dept_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDept))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
        );

        jPanel4.setPreferredSize(new java.awt.Dimension(66, 22));

        btnOk.setText("…œ¥´");

        btnCancel.setText("πÿ±’");

        jLabel5.setText("Àµ√˜£∫");

        jLabel6.setText("1°£Ω®“È’’∆¨∞¥120*150œÒÀÿ±»¿˝Àı∑≈£¨Ω´»°µ√Ωœ∫√œ‘ æ–ßπ˚°£");

        jLabel10.setText("2°£’’∆¨≤ª‘ –Ì≥¨π˝100K£¨«“±ÿ–Î «JPG°¢PNG°¢GIF÷–“ª÷÷°£");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnOk)
                .addGap(31, 31, 31)
                .addComponent(btnCancel)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOk)
                            .addComponent(btnCancel))))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnDept;
    private javax.swing.JButton btnOk;
    private javax.swing.JTextField dept_name;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox jcbField;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPhoto;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        file_chooser = FileChooserUtil.getFileChooser();
        for (FileFilter cff : file_chooser.getChoosableFileFilters()) {
            file_chooser.removeChoosableFileFilter(cff);
        }
        file_chooser.setAcceptAllFileFilterUsed(true);
        file_chooser.setMultiSelectionEnabled(true);
        file_chooser.setFileFilter(new ChooseFileFilter(new String[]{"jpg", "png", "gif"}, "Õº∆¨Œƒº˛"));
        List<TempFieldInfo> a01_fields = EntityBuilder.getCommFieldInfoListOf(A01.class, EntityBuilder.COMM_FIELD_VISIBLE);
        List<TempFieldInfo> bind_fields = new ArrayList<TempFieldInfo>();
        TempFieldInfo select_tfi = null;
        for (TempFieldInfo tfi : a01_fields) {
            if (tfi.getField_name().endsWith("_code_")) {
                continue;
            }
            if (!tfi.getField_type().toLowerCase().equals("string")) {
                continue;
            }
            if (tfi.getField_name().equals("a0190")) {
                select_tfi = tfi;
            }
            bind_fields.add(tfi);
        }
        field_binding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ, bind_fields, jcbField);
        field_binding.bind();
        if (select_tfi != null) {
            jcbField.setSelectedItem(select_tfi);
        }
        List<String> fields = new ArrayList<String>();
        fields.add("file_name");
        fields.add("file_type");
        fields.add("file_size");
        ftable = new FTable(FileManager.class, fields, false, false, false, "EmpAddPhotosDlg");
        ftable.setRight_allow_flag(true);
        JPopupMenu pp = new JPopupMenu();
        pp.removeAll();
        pp.add(mi_add);
        pp.add(mi_del);
        mi_add.setIcon(blankIcon);
        mi_del.setIcon(blankIcon);
        pnlMain.add(ftable, BorderLayout.CENTER);
        lblInfo.setVisible(false);
        jProgressBar1.setVisible(false);
    }

    private void setupEvents() {
        btnDept.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
//                ModelFrame mf = new ModelFrame((JFrame) JOptionPane.getFrameForComponent(btnDept), true, "—°‘Ò≤ø√≈");
//                DeptSelectPanel pnl = new DeptSelectPanel(UserContext.getDepts(), null,1);
//                pnl.addPickDeptListener(new IPickDeptListener() {
//
//                    @Override
//                    public void pickDept(Object dept) {
//                        cur_dept = (DeptCode) dept;
//                        if(cur_dept != null){
//                            dept_name.setText(cur_dept.getContent());
//                        }
//                    }
//                });
//                mf.getContentPane().add(pnl);
//                mf.setSize(373, 441);
//                ContextManager.locateOnMainScreenCenter(mf);
//                mf.setVisible(true);
                DeptSelectDlg dlg = new DeptSelectDlg(UserContext.getDepts(false));
                ContextManager.locateOnMainScreenCenter(dlg);
                dlg.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                dlg.setVisible(true);
                if (dlg.isClick_ok()) {
//                    cur_dept = dlg.getCur_dept();
                    if (cur_dept != null) {
                        dept_name.setText(cur_dept.getContent());
                    }
                }
            }
        });
        ActionListener al_add = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int result = file_chooser.showOpenDialog(btnAdd);
                file_chooser.setVisible(true);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File[] selectedFiles = file_chooser.getSelectedFiles();
                    int error_size_no = 0;
                    int error_type_no = 0;
                    int error_repeat_no = 0;
                    List<FileManager> files = new ArrayList<FileManager>();
                    for (File f : selectedFiles) {
                        FileManager fm = new FileManager();
                        result = checkPic(f, fm);
                        if (result == 1) {
                            error_size_no++;
                        } else if (result == 2) {
                            error_type_no++;
                        } else {
                            String fileName = fm.getFile_name();
                            if (!exist_files.contains(fileName)) {
                                exist_files.add(fileName);
                                files.add(fm);
                            } else {
                                error_repeat_no++;
                            }
                        }
                    }
                    ftable.addObjects(files);
                    if (ftable.getObjects().size() > 0) {
                        ftable.setRowSelectionInterval(0, 0);
                    }
                    if (error_size_no > 0 || error_type_no > 0) {
                        JOptionPane.showMessageDialog(null, "π≤—°‘Ò" + selectedFiles.length + "∏ˆŒƒº˛£¨∑˚∫œÃıº˛µƒ" + files.size() + "∏ˆ£¨Œƒº˛¥Û–°≤ª∑˚∫œµƒ" + error_size_no + "∏ˆ£¨Œƒº˛¿‡–Õ≤ª∑˚∫œµƒ" + error_type_no + "∏ˆ,÷ÿ∏¥Œƒº˛" + error_repeat_no + "∏ˆ");
                    }
                }
            }
        };
        btnAdd.addActionListener(al_add);
        mi_add.addActionListener(al_add);
        ActionListener al_del = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ftable.removeListSelectionListener(listener);
                List list = ftable.getSelectObjects();
                for (Object obj : list) {
                    FileManager fm = (FileManager) obj;
                    exist_files.remove(fm.getFile_name());
                }
                ftable.deleteSelectedRows();
                ftable.addListSelectionListener(listener);
                listener.valueChanged(null);
            }
        };
        listener = new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (cur_obj == ftable.getCurrentRow()) {
                    return;
                }
                cur_obj = ftable.getCurrentRow();
                try {
                    viewPhoto(cur_obj);
                } catch (Exception ex) {
                    pnlPhoto.removeAll();
                    pnlPhoto.updateUI();
                }
            }
        };
        ftable.addListSelectionListener(listener);
        btnDel.addActionListener(al_del);
        mi_del.addActionListener(al_del);
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = jcbField.getSelectedItem();
                if (obj == null) {
                    JOptionPane.showMessageDialog(null, "√ª”–∆•≈‰◊÷∂Œ");
                    return;
                }
                TempFieldInfo tfi = (TempFieldInfo) obj;
                final List list = ftable.getObjects();
                if (list.size() > 500) {
                    JOptionPane.showMessageDialog(null, "“ª¥Œ–‘µº»Î’’∆¨≤ª‘ –Ì≥¨π˝500’≈");
                    return;
                }
                jProgressBar1.setVisible(true);
                lblInfo.setVisible(true);
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        lblInfo.setText("’’∆¨‘§¥¶¿Ì");
                        jProgressBar1.setMinimum(0);
                        jProgressBar1.setMaximum(list.size());
                        jProgressBar1.setValue(0);
                    }
                });
                int len = list.size();
                int mod_len = len / 100;
                int re_len = mod_len + ((len % 100) == 0 ? 0 : 1);
                Hashtable<String, FileManager> file_keys = new Hashtable<String, FileManager>();
                int ind = 0;
                List<String> strs = new ArrayList<String>();
                for (int i = 0; i < re_len; i++) {
                    StringBuffer str = new StringBuffer();
                    str.append("'-1'");
                    if (i < mod_len) {
                        for (int j = 0; j < 100; j++) {
                            SwingUtilities.invokeLater(new Runnable() {

                                @Override
                                public void run() {
                                    jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                                }
                            });
                            ind = i * 100 + j;
                            FileManager fm = (FileManager) list.get(ind);
                            str.append(",'");
                            str.append(fm.getFile_name());
                            str.append("'");
                            file_keys.put(fm.getFile_name(), fm);
                        }
                    } else {
                        for (int j = 0; j < 100; j++) {
                            SwingUtilities.invokeLater(new Runnable() {

                                @Override
                                public void run() {
                                    jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                                }
                            });
                            ind = i * 100 + j;
                            if (ind >= len) {
                                break;
                            }
                            FileManager fm = (FileManager) list.get(ind);
                            str.append(",'");
                            str.append(fm.getFile_name());
                            str.append("'");
                            file_keys.put(fm.getFile_name(), fm);
                        }
                    }
                    strs.add(str.toString());
                }
                final HashSet<Object[]> right_files = new HashSet<Object[]>();
                String dept_sql = "";
                if(cur_dept != null){
                    dept_sql = " and d.dept_code like '" + cur_dept.getDept_code() + "%'";
                }
                for (String str : strs) {
                    String sql = "select a01.a01_key,d.dept_code,a01." + tfi.getField_name() + ",pic_path from A01 a01,DeptCode d where a01.deptCode_key=d.deptCode_key and " + tfi.getField_name() + " in (" + str + ") and ("+UserContext.dept_right_str+")";
                    sql += dept_sql;
                    right_files.addAll((List<Object[]>) CommUtil.selectSQL(sql));
                }
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        lblInfo.setText("…æ≥˝‘≠”–’’∆¨");
                        jProgressBar1.setMinimum(0);
                        jProgressBar1.setMaximum(right_files.size());
                        jProgressBar1.setValue(0);
                    }
                });
                StringBuffer ex_str = new StringBuffer();
                for (Object[] objs : right_files) {
                    if (objs[3] != null && !objs[3].toString().trim().equals("")) {
                        SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {
                                jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                            }
                        });
                        TransferAccessory.deletePicture(objs[3].toString());
                    }
                }
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        lblInfo.setText("…œ¥´’’∆¨");
                        jProgressBar1.setMinimum(0);
                        jProgressBar1.setMaximum(right_files.size());
                        jProgressBar1.setValue(0);
                    }
                });
                for (Object[] objs : right_files) {
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                        }
                    });
                    FileManager fm = (FileManager) file_keys.get(objs[2].toString());
                    String path = objs[1] + "/" + objs[2] + "." + fm.getFile_type();
                    TransferAccessory.uploadPicture(fm.getFile(), path);
                    ex_str.append("update A01 set pic_path='" + path + "' where a01_key='" + objs[0] + "';");
                }
                if (right_files.size() > 0) {
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            lblInfo.setText("∏¸–¬»À‘±–≈œ¢");
                            jProgressBar1.setMinimum(0);
                            jProgressBar1.setMaximum(1);
                            jProgressBar1.setValue(0);
                        }
                    });
                    ValidateSQLResult result = CommUtil.excuteSQLs(ex_str.toString(), ";");
                    if (result.getResult() == 0) {
                        SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {
                                jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                            }
                        });
                        JOptionPane.showMessageDialog(null, "…œ¥´≥…π¶£°");
                    } else {
                        //FormulaTextDialog.showErrorMsg(result.getMsg());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "√ª”–∆•≈‰’’∆¨");
                }
                jProgressBar1.setVisible(false);
                lblInfo.setVisible(false);
                ftable.removeListSelectionListener(listener);
                exist_files.clear();
                ftable.deleteAllRows();
                ftable.addListSelectionListener(listener);
                listener.valueChanged(null);
                ftable.updateUI();
            }
        });
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ModelFrame mf = (ModelFrame) JOptionPane.getFrameForComponent(btnCancel);
                JFrame jf = mf.getFrame();
                jf.setEnabled(true);
                jf.setVisible(true);
                mf.dispose();
            }
        });
    }

    /**
     * ∏˘æ›µ±«∞––∂‘œÛ‘§¿¿’’∆¨
     * @param cur_obj£∫µ±«∞––∂‘œÛ
     */
    private void viewPhoto(Object cur_obj) {
        pnlPhoto.removeAll();
        if (cur_obj == null) {
            pnlPhoto.updateUI();
            return;
        }
        BufferedInputStream input = null;
        try {
            FileManager fm = (FileManager) cur_obj;
            byte[] buffer = new byte[(int) fm.getFile().length()];
            input = new BufferedInputStream(new FileInputStream(fm.getFile()));
            input.read(buffer, 0, buffer.length);
            input.close();
            InputStream is = new ByteArrayInputStream(buffer);
            ImageInputStream iis = null;
            try {
                iis = ImageIO.createImageInputStream(is);
            } catch (IOException e1) {
            }
            String format = "jpg";
            String pic_path = fm.getFile().getPath();
            if (pic_path.contains(".")) {
                format = pic_path.substring(pic_path.indexOf(".") + 1);
            }
            Iterator iter = ImageIO.getImageReadersByFormatName(format);
            ImageReader reader = (ImageReader) iter.next();
            reader.setInput(iis, false);
            BufferedImage origImage = null;
            try {
                origImage = reader.read(0);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            Icon tmpIcon = null;
            if (origImage != null) {
                tmpIcon = new ImageIcon(origImage.getScaledInstance(120, 150, Image.SCALE_DEFAULT));
            }
            JLabel label = new JLabel(tmpIcon);
            pnlPhoto.add(label, BorderLayout.CENTER);
            pnlPhoto.updateUI();
        } catch (IOException ex) {
            log.error(ex);
        } finally {
            try {
                input.close();
            } catch (IOException ex) {
                log.error(ex);
            }
        }
    }

    /**
     * ∏√∑Ω∑®”√”⁄–£—È¥´»Îµƒ’’∆¨ «∑Ò∫œ∑®£¨÷˜“™∞¸¿®Œƒº˛¿‡–Õ±ÿ–ÎŒ™jpg/png/gif∫ÕŒƒº˛¥Û–°≤ª¥Û”⁄100K
     * @param file£∫ƒø±ÍŒƒº˛
     * @param fm£∫≤Œ ˝Œƒº˛
     * @return£∫0£∫∫œ∑®£ª1£∫¥Û–°≤ª∫œ∑®£ª2¿‡–Õ≤ª∫œ∑®
     */
    private int checkPic(File file, FileManager fm) {
        int result = 0;
        fm.setFile_size(file.length() / 1024);
        if (fm.getFile_size() > 100) {
            result = 1;//Õº∆¨Ã´¥Û
        } else if (!(file.getName().toLowerCase().endsWith("jpg")
                || file.getName().toLowerCase().endsWith("png") || file.getName().toLowerCase().endsWith("gif"))) {
            result = 2;//Õº∆¨∏Ò Ω≤ª∂‘
        } else {
            fm.setFile(file);
            String fileName = file.getName();
            String[] fileNames = fileName.split("\\.");
            fm.setFile_name(fileNames[0]);
            fm.setFile_type(fileNames[fileNames.length - 1]);
        }
        return result;
    }
}
