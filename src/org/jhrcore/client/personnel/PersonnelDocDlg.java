/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PersonnelDocDlg.java
 *
 * Created on 2009-7-14, 17:24:46
 */
package org.jhrcore.client.personnel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.comm.HrLog;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.FileManager;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.RSImpl;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.emp.EmpMngMsg;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.JhrDatePicker;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.FileChooserUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author Administrator
 */
public class PersonnelDocDlg extends javax.swing.JDialog implements IModuleCode {

    private JTree tree;
    private DocTreeModel model;
    private A01 person;
    private FileManager cur_fileManager;
    private DefaultMutableTreeNode cur_node;
    private String new_path;
    private JhrDatePicker datePicker = new JhrDatePicker();
    private HrLog log = new HrLog("EmpMng." + this.getTitle());
    private String module_code = "EmpMng.mi_doc";

    /** Creates new form PersonnelDocDlg */
    public PersonnelDocDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public PersonnelDocDlg(A01 person) {
        this.person = person;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        btnOpen = new javax.swing.JButton();
        btnSaveAs = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        pnlTime = new javax.swing.JPanel();
        pnlTree = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        btnClose.setText("关闭");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(311, Short.MAX_VALUE)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnOpen.setText("打开");

        btnSaveAs.setText("另存为");

        btnAdd.setText("添加");

        btnDel.setText("删除");

        jLabel1.setText("创建者：");

        name.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        name.setEnabled(false);

        jLabel2.setText("创建时间：");

        pnlTime.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnOpen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaveAs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlTime, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(btnOpen)
                .addGap(18, 18, 18)
                .addComponent(btnSaveAs)
                .addGap(18, 18, 18)
                .addComponent(btnAdd)
                .addGap(18, 18, 18)
                .addComponent(btnDel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTime, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlTree.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnlTree, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlTree, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnSaveAs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField name;
    private javax.swing.JPanel pnlTime;
    private javax.swing.JPanel pnlTree;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        model = new DocTreeModel(person);
        tree = new JTree(model);
        HRRendererView.getCommMap().initTree(tree);
        tree.setShowsRootHandles(true);
        JScrollPane pane = new JScrollPane(tree);
        pane.setBackground(Color.WHITE);
        pnlTree.add(pane, BorderLayout.CENTER);
        tree.expandRow(1);
        tree.setSelectionRow(1);
        cur_node = (DefaultMutableTreeNode) tree.getSelectionPath().getLastPathComponent();
        btnDel.setEnabled(false);
        btnSaveAs.setEnabled(false);
        btnOpen.setEnabled(false);
        datePicker.setEnabled(false);
        pnlTime.add(datePicker);
    }

    private void setupEvents() {
        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cur_fileManager == null) {
                    return;
                }
                if (MsgUtil.showNotConfirmDialog(EmpMngMsg.msg119)) {
                    return;
                }
                log.info(e);
                RSImpl.deleteFile(cur_fileManager.getFile_path());
                delManager(cur_fileManager);
            }
        });
        btnOpen.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                if (cur_fileManager == null) {
                    return;
                }
                byte[] buffer = null;
                File new_file = null;
                try {
                    buffer = RSImpl.downloadFile(cur_fileManager.getFile_path(), new ArrayList<String>());
                    if (buffer == null) {
                        MsgUtil.showInfoMsg(EmpMngMsg.msg120);
                        return;
                    }
                    new_file = new File(UserContext.file_path + "temp." + cur_fileManager.getFile_type());
                    FileOutputStream writeFile = new FileOutputStream(new_file);
                    writeFile.write(buffer);
                    writeFile.close();
                    if (new_file.exists()) {
                        try {
                            Runtime r = Runtime.getRuntime();
                            r.exec("cmd /c start " + new_file.getPath());
                            log.info("打开" + new_file.getPath() + "文件");
                        } catch (Exception ep) {
                        }
                    }
                } catch (IOException ex) {
                    log.error(ex);
                }
            }
        });
        btnSaveAs.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                File file = FileChooserUtil.getFile("选择路径", "");
                if (file == null) {
                    return;
                }
                if (file.isFile()) {
                    new_path = file.getPath();
                } else {
                    new_path = file.getPath() + cur_fileManager.getFile_type();
                }
                byte[] buffer = null;
                File new_file = null;
                try {
                    buffer = RSImpl.downloadFile(cur_fileManager.getFile_path(), new ArrayList<String>());
                    if (buffer == null) {
                        MsgUtil.showInfoMsg(EmpMngMsg.msg120);
                        return;
                    }
                    new_file = new File(new_path);
                    FileOutputStream writeFile = new FileOutputStream(new_file);
                    writeFile.write(buffer);
                    writeFile.close();
                    log.info(btnSaveAs.getText() + new_path);
                } catch (IOException ex) {
                    log.error(ex);
                }
            }
        });
        btnClose.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                dispose();
            }
        });
        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                File file = FileChooserUtil.getFile(CommMsg.SELECTFILE_MESSAGE, "");
                if (file == null) {
                    return;
                }
                AddFileDlg addFileDlg = new AddFileDlg(person, file, new Date(), UserContext.person_name + "{" + UserContext.person_code + "}", tree, model.getG_Node(), model.getRoot());
                addFileDlg.setTitle(EmpMngMsg.ttl028.toString());
                ContextManager.locateOnMainScreenCenter(addFileDlg);
                addFileDlg.setVisible(true);
                log.info("新增" + file.getAbsolutePath());
            }
        });
        tree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                if (e.getPath() == null) {
                    return;
                }
                if (tree.getSelectionPath().getLastPathComponent() == null) {
                    return;
                }

                cur_node = (DefaultMutableTreeNode) tree.getSelectionPath().getLastPathComponent();
                if (cur_node == null) {
                    return;
                }
                if ((cur_node.getUserObject()) instanceof FileManager) {
                    cur_fileManager = (FileManager) (cur_node.getUserObject());
                    btnSaveAs.setEnabled(true);
                    btnOpen.setEnabled(true);
                    btnDel.setEnabled(true);
                    btnAdd.setEnabled(false);
                    name.setText(cur_fileManager.getUser_name());
                    datePicker.setDate(cur_fileManager.getAdd_time());
                } else {
                    btnSaveAs.setEnabled(false);
                    btnOpen.setEnabled(false);
                    btnDel.setEnabled(false);
                    btnAdd.setEnabled(false);
                    name.setText("");
                    if (cur_node.getLevel() == 1) {
                        btnAdd.setEnabled(true);
                    }
                }
            }
        });
        ComponentUtil.setSysFuntionNew(this, false);
    }

    public void delManager(FileManager fm) {
        ValidateSQLResult vs = CommUtil.deleteEntity(fm);
        cur_node.removeFromParent();
        tree.updateUI();
        if (vs.getResult() == 0) {
            log.info("删除成功");
        } else {
            log.info("删除失败，原因：" + vs.getMsg());
        }
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
