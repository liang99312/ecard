/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PersonNoSetDlg.java
 *
 * Created on 2010-6-25, 15:10:39
 */
package org.jhrcore.client.personnel;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.SysParameter;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.JCheckBoxList;
import org.jhrcore.util.ComponentUtil;

/**
 *
 * @author Administrator
 */
public class PersonNoSetDlg extends javax.swing.JDialog implements IModuleCode {

    private JCheckBoxList fieds_list;
    private List<TempFieldInfo> list2 = new ArrayList<TempFieldInfo>();
    private SysParameter parameter = null;
    private int cur_index = -1;
    private String field_name = "";
    private String search_text = "";
    private List selected_nodes = new ArrayList();
    private int sum = 0;
    private int index = 0;
    private boolean click_ok = false;
    private String s_code = "";
    private String s_value = "";
    private int s_type = 0;
    private int select_type = 0;//0：单选；1：多选
    private String module_code = "EmpMng.mi_personNoSet.btnSetPersonNo";

    public boolean IsClick_ok() {
        return click_ok;
    }

    public PersonNoSetDlg() {
        initComponents();
        initOthers();
        setupEvents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    public PersonNoSetDlg(String s_code, String s_value, int s_type) {
        this.s_code = s_code;
        this.s_value = s_value;
        this.s_type = s_type;
        initComponents();
        initOthers();
        setupEvents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    public PersonNoSetDlg(String s_code, String s_value, int s_type, int select_type) {
        this.s_code = s_code;
        this.s_value = s_value;
        this.s_type = s_type;
        this.select_type = select_type;
        initComponents();
        initOthers();
        setupEvents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        pnlFields = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        jLabel1.setText("查找：");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlFields.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlFields.setLayout(new java.awt.BorderLayout());

        btnOk.setText("确定");

        btnCancel.setText("取消");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(119, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(52, 52, 52)
                .addComponent(btnCancel)
                .addGap(42, 42, 42))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlFields, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFields, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel pnlFields;
    private javax.swing.JTextField search;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        //person_no:员工序号
        Object object = CommUtil.fetchEntityBy("from SysParameter where sysparameter_code = '" + s_code + "'");
        if (object == null) {
            parameter = (SysParameter) UtilTool.createUIDEntity(SysParameter.class);
            parameter.setSysparameter_code(s_code);
            parameter.setSysparameter_name(s_value);
        } else {
            parameter = (SysParameter) object;
            field_name = parameter.getSysparameter_value();
        }
        List<Integer> select_indexs = new ArrayList<Integer>();
        List<TempFieldInfo> a01_infos = EntityBuilder.getCommFieldInfoListOf(A01.class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : a01_infos) {
            if (s_type == 0) {
                if (tfi.getField_type().toLowerCase().equals("int") || tfi.getField_type().toLowerCase().equals("integer")) {
                    list2.add(tfi);
                    if (field_name != null && !"".equals(field_name.replace(" ", "")) && field_name.replace(" ", "").contains(tfi.getField_name().replace(" ", ""))) {
                        cur_index = list2.size() - 1;
                        select_indexs.add(cur_index);
                    }
                }
            } else if (s_type == 1) {
                if (tfi.getField_type().toLowerCase().equals("string")) {
                    list2.add(tfi);
                    if (field_name != null && !"".equals(field_name.replace(" ", "")) && field_name.replace(" ", "").contains(tfi.getField_name().replace(" ", ""))) {
                        cur_index = list2.size() - 1;
                        select_indexs.add(cur_index);
                    }
                }
            }
        }
        fieds_list = new JCheckBoxList(list2);
        if (select_type == 0) {
            fieds_list.setSingleFlag(true);
        } else {
            fieds_list.setSingleFlag(false);
        }
        if (cur_index != -1) {
            for (Integer i : select_indexs) {
                fieds_list.CheckedItem(i);
            }
        }
        fieds_list.updateUI();
        pnlFields.add(new JScrollPane(fieds_list), BorderLayout.CENTER);
    }

    private void setupEvents() {
        search.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == 10) {
                    Locate(1);
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (fieds_list.getCheckedCount() == 0) {
                    parameter.setSysparameter_value("");
                } else {
                    String v_str = "";
                    for (Object obj : fieds_list.getCheckedObjects()) {
                        TempFieldInfo tfi = (TempFieldInfo) obj;
                        v_str += ";" + tfi.getField_name();
                    }
                    if (v_str.startsWith(";")) {
                        v_str = v_str.substring(1);
                    }
                    parameter.setSysparameter_value(v_str);
                }
                if (parameter.getNew_flag() == 1) {
                    CommUtil.saveEntity(parameter);
                } else {
                    CommUtil.updateEntity(parameter);
                }
                click_ok = true;
                dispose();
            }
        });
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        ComponentUtil.setSysFuntionNew(this, false);
    }

    private void Locate(int step) {
        if (search.getText() == null || search.getText().replace(" ", "").equals("")) {
            return;
        }
        String tmp_str = search.getText().replace(" ", "");
        index = index + step;
        if (!tmp_str.equals(search_text)) {
            index = 0;
            search_text = tmp_str;
            selected_nodes.clear();
            selected_nodes.addAll(SysUtil.locateEmp(list2, search_text));
            sum = selected_nodes.size();
        }
        if (sum == 0) {
            return;
        }
        if (index == -1) {
            index = sum - 1;
        } else if (index == sum) {
            index = 0;
        }
        fieds_list.setSelectedIndex(list2.indexOf(selected_nodes.get(index)));
        fieds_list.ensureIndexIsVisible(list2.indexOf(selected_nodes.get(index)));
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
