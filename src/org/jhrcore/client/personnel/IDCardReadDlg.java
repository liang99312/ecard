/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IDCardReadDlg.java
 *
 * Created on 2009-11-10, 9:53:18
 */
package org.jhrcore.client.personnel;

import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import net.sf.fjreport.util.ModalDialog;
import org.jhrcore.client.CommUtil;
import org.jhrcore.comm.HrLog;
import org.jhrcore.util.SysUtil;
import org.jhrcore.util.TransferAccessory;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.Code;
import org.jhrcore.comm.CodeManager;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.comm.ConfigManager;
import org.jhrcore.entity.SysParameter;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.emp.EmpMngMsg;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author Administrator
 */
public class IDCardReadDlg extends javax.swing.JDialog implements IModuleCode {

    private A01 person = null;
    private DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    private File photo_url = null;
    private IDCardRead idc = null;
    private String cur_name;
    private String cur_sex;
    private Date cur_born;
    private String cur_addr;
    private String cur_nation;
    private List<String> fields;
    private HrLog log = new HrLog("EmpMng." + this.getTitle());
    private Hashtable<String, String> id_update_keys = new Hashtable<String, String>();
    private Hashtable<String, TempFieldInfo> a01_field_keys = new Hashtable<String, TempFieldInfo>();
    private SysParameter paramter = null;
    private List<TempFieldInfo> a01_fields = null;
    private Hashtable<String, String> set_keys = new Hashtable<String, String>();
    private String a01_class = "";
    private String module_code = "EmpMng.mi_IDCardRead";

    /** Creates new form IDCardReadDlg */
    public IDCardReadDlg() {
        initComponents();
        this.setTitle("身份证信息比较");
        initOthers();
        setupEvents();
    }

    public IDCardReadDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public IDCardReadDlg(List<String> fields, String a01_class) {
        this.fields = fields;
        this.a01_class = a01_class;
        initComponents();
        this.setTitle("身份证信息比较");
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnRead = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        cb_photo = new javax.swing.JCheckBox();
        updatePhoto = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jtf_ID_name = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        id_photo = new javax.swing.JPanel();
        jtf_ID_sex = new javax.swing.JTextField();
        jtf_ID_nation = new javax.swing.JTextField();
        jtf_ID_born = new javax.swing.JTextField();
        jtf_ID_addr = new javax.swing.JTextField();
        jtf_ID_id = new javax.swing.JTextField();
        jtf_ID_dept = new javax.swing.JTextField();
        jtf_ID_date = new javax.swing.JTextField();
        cb_name = new javax.swing.JCheckBox();
        cb_sex = new javax.swing.JCheckBox();
        cb_nation = new javax.swing.JCheckBox();
        cb_bir = new javax.swing.JCheckBox();
        cb_addr = new javax.swing.JCheckBox();
        cb_idno = new javax.swing.JCheckBox();
        cb_qfjg = new javax.swing.JCheckBox();
        cb_yxq = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        sex = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        nation = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        born = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        addr = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        idd = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        person_code = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        person_type = new javax.swing.JTextField();
        photo = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        dept = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        btnRead.setText("读身份证");

        btnUpdate.setText("更新数据库");

        btnCancel.setText("关闭");

        cb_photo.setText("是否更新照片");

        updatePhoto.setText("更新照片");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(cb_photo)
                .addGap(186, 186, 186)
                .addComponent(btnRead)
                .addGap(18, 18, 18)
                .addComponent(updatePhoto)
                .addGap(20, 20, 20)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCancel)
                        .addComponent(updatePhoto)
                        .addComponent(btnUpdate)
                        .addComponent(btnRead))
                    .addComponent(cb_photo))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("身份证信息"));

        id_photo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        id_photo.setLayout(new java.awt.BorderLayout());

        cb_name.setText("姓名：");

        cb_sex.setText("性别：");

        cb_nation.setText("民族：");

        cb_bir.setText("出生：");

        cb_addr.setText("地址：");

        cb_idno.setText("公民身份号码：");

        cb_qfjg.setText("签发机关：");

        cb_yxq.setText("有效期限：");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cb_name)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_ID_name, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cb_sex)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_ID_sex))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cb_nation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_ID_nation))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cb_bir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_ID_born)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                        .addComponent(id_photo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(cb_idno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_ID_id, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(cb_qfjg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_ID_dept, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(cb_yxq)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_ID_date, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(cb_addr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_ID_addr, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtf_ID_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_name))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtf_ID_sex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_sex))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtf_ID_nation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_nation))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtf_ID_born, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_bir)))
                    .addComponent(id_photo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_addr)
                    .addComponent(jtf_ID_addr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_ID_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_idno))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_ID_dept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_qfjg))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_ID_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_yxq))
                .addGap(36, 36, 36))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("数据库信息"));

        jLabel9.setText("姓名：");
        jLabel9.setPreferredSize(new java.awt.Dimension(36, 23));

        jLabel10.setText("性别：");
        jLabel10.setPreferredSize(new java.awt.Dimension(36, 23));

        jLabel11.setText("民族：");
        jLabel11.setMaximumSize(new java.awt.Dimension(36, 23));
        jLabel11.setMinimumSize(new java.awt.Dimension(36, 23));
        jLabel11.setPreferredSize(new java.awt.Dimension(36, 23));

        jLabel12.setText("出生日期：");
        jLabel12.setMaximumSize(new java.awt.Dimension(36, 23));
        jLabel12.setMinimumSize(new java.awt.Dimension(36, 23));
        jLabel12.setPreferredSize(new java.awt.Dimension(36, 23));

        jLabel13.setText("住址：");
        jLabel13.setMaximumSize(new java.awt.Dimension(36, 23));
        jLabel13.setMinimumSize(new java.awt.Dimension(36, 23));
        jLabel13.setPreferredSize(new java.awt.Dimension(36, 23));

        jLabel14.setText("公民身份号码：");
        jLabel14.setPreferredSize(new java.awt.Dimension(84, 23));

        jLabel15.setText("人员编号：");
        jLabel15.setPreferredSize(new java.awt.Dimension(60, 23));

        jLabel16.setText("人员类别：");
        jLabel16.setPreferredSize(new java.awt.Dimension(60, 23));

        photo.setBackground(new java.awt.Color(204, 204, 255));
        photo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        photo.setLayout(new java.awt.BorderLayout());

        jLabel17.setText("部门：");
        jLabel17.setPreferredSize(new java.awt.Dimension(36, 23));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(idd, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dept, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(person_type, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(person_code, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nation))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sex))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                                .addComponent(photo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(born, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                                    .addComponent(addr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(born, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(photo, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(person_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(person_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleParent(null);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addr;
    private javax.swing.JTextField born;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnRead;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox cb_addr;
    private javax.swing.JCheckBox cb_bir;
    private javax.swing.JCheckBox cb_idno;
    private javax.swing.JCheckBox cb_name;
    private javax.swing.JCheckBox cb_nation;
    private javax.swing.JCheckBox cb_photo;
    private javax.swing.JCheckBox cb_qfjg;
    private javax.swing.JCheckBox cb_sex;
    private javax.swing.JCheckBox cb_yxq;
    private javax.swing.JTextField dept;
    private javax.swing.JPanel id_photo;
    private javax.swing.JTextField idd;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jtf_ID_addr;
    private javax.swing.JTextField jtf_ID_born;
    private javax.swing.JTextField jtf_ID_date;
    private javax.swing.JTextField jtf_ID_dept;
    private javax.swing.JTextField jtf_ID_id;
    private javax.swing.JTextField jtf_ID_name;
    private javax.swing.JTextField jtf_ID_nation;
    private javax.swing.JTextField jtf_ID_sex;
    private javax.swing.JTextField name;
    private javax.swing.JTextField nation;
    private javax.swing.JTextField person_code;
    private javax.swing.JTextField person_type;
    private javax.swing.JPanel photo;
    private javax.swing.JTextField sex;
    private javax.swing.JButton updatePhoto;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        SysParameter register_photo = null;
        Object obj2 = CommUtil.fetchEntityBy("from SysParameter sp where sp.sysParameter_key='Register.save_photo'");
        if (obj2 == null) {
            register_photo = new SysParameter();
            register_photo.setSysParameter_key("Register.save_photo");
            register_photo.setSysparameter_code("Register.save_photo");
            register_photo.setSysparameter_name(EmpMngMsg.msg092.toString());
            register_photo.setSysparameter_value("0");
            CommUtil.saveOrUpdate(register_photo);
        } else {
            register_photo = (SysParameter) obj2;
        }
        cb_photo.setSelected("1".equals(register_photo.getSysparameter_value()));
        addr.setEditable(false);
        born.setEditable(false);
        dept.setEditable(false);
        idd.setEditable(false);
        jtf_ID_addr.setEditable(false);
        jtf_ID_born.setEditable(false);
        jtf_ID_date.setEditable(false);
        jtf_ID_dept.setEditable(false);
        jtf_ID_id.setEditable(false);
        jtf_ID_name.setEditable(false);
        jtf_ID_nation.setEditable(false);
        jtf_ID_sex.setEditable(false);
        name.setEditable(false);
        nation.setEditable(false);
        person_code.setEditable(false);
        person_type.setEditable(false);
        sex.setEditable(false);

        a01_fields = EntityBuilder.getCommFieldInfoListOf(A01.class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : a01_fields) {
            a01_field_keys.put(tfi.getField_name().replace("_code_", "").replace(" ", ""), tfi);
        }
        paramter = (SysParameter) CommUtil.fetchEntityBy("from SysParameter s where s.sysParameter_key ='Register.id_cmp'");
        if (paramter != null) {
            String strs = paramter.getSysparameter_value();
            String[] tmp_strs = strs.split(";");
            for (String tmp_s : tmp_strs) {
                String[] field_strs = tmp_s.split(":");
                id_update_keys.put(field_strs[0], field_strs[1]);
            }
        }
        for (String id_name : id_update_keys.keySet()) {
            if ("personName".equalsIgnoreCase(id_name) || "personIDCardNo".equalsIgnoreCase(id_name)) {
                continue;
            }
            String field_name = id_update_keys.get(id_name);
            TempFieldInfo tfi = a01_field_keys.get(field_name);
            if ("personSex".equalsIgnoreCase(id_name)) {
                jLabel10.setText(tfi.getCaption_name() + "：");
                set_keys.put("sex", field_name);
            }
            if ("personBorn".equalsIgnoreCase(id_name)) {
                jLabel12.setText(tfi.getCaption_name() + "：");
                set_keys.put("born", field_name);
            }
            if ("personNation".equalsIgnoreCase(id_name)) {
                jLabel11.setText(tfi.getCaption_name() + "：");
                set_keys.put("nation", field_name);
            }
            if ("personAddress".equalsIgnoreCase(id_name)) {
                jLabel13.setText(tfi.getCaption_name() + "：");
                set_keys.put("addr", field_name);
            }
        }
        refresh();
    }

    private void setupEvents() {
        btnRead.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                idc = new IDCardRead();
                if (!idc.getLinkM()) {
//                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnRead),
//                            "没有找到读卡器",
//                            "提示",
//                            JOptionPane.INFORMATION_MESSAGE);
                    MsgUtil.showInfoMsg(EmpMngMsg.msg040);
                    log.info("没有找到读卡器");
                    return;
                }
                cur_name = idc.getPersonName().replace(" ", "");
                if ("".equals(cur_name)) {
//                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnRead),
//                            "读卡失败",
//                            "提示",
//                            JOptionPane.INFORMATION_MESSAGE);
                    MsgUtil.showInfoMsg(EmpMngMsg.msg041);
                    log.info("读卡失败");
                    return;
                }
                String text = idc.getPersonIDCardNo().replace(" ", "");
                String other_id = "";
                if (text.length() == 18) {
                    other_id += text.substring(0, 6);
                    other_id += text.substring(8, 17);
                }
                String person_class = "";
                if (!"所有人员".equals(a01_class)) {
//                if (!(EmpMngMsg.msg043.toString()).equals(a01_class)) {
                    person_class = " and a.a0191='" + a01_class + "'";
                }
                List same_persons = new ArrayList();
                String person_right = "";//添加权限控制
                if (!UserContext.isSA) {
                    person_right += " and a.deptCode.deptCode_key in (" + UserContext.person_right_str + ")";
                    person_right += " and (" + UserContext.getPerson_class_right_str(A01.class, "a") + ")";
                }
                String s_sql = "from A01 a join fetch a.deptCode where a.a0193=0 and a.a0177 = '" + text + "'" + person_class + person_right;
                if ("".equals(other_id)) {
                } else {
                    s_sql = "from A01 a join fetch a.deptCode where a.a0193=0 and (a.a0177 = '" + text + "' or a.a0177 = '" + other_id + "')" + person_class + person_right;
                }
                same_persons = CommUtil.fetchEntities(s_sql);
                System.out.println(same_persons);
                if (same_persons.size() > 1) {
                    FTable tmp_ftable = new FTable(A01.class, false, false, false, "Emp");
                    tmp_ftable.setFields(fields);
                    JPanel panel = new JPanel();
                    panel.setPreferredSize(new Dimension(700, 400));
                    panel.setLayout(new java.awt.BorderLayout());
                    panel.add(tmp_ftable, BorderLayout.CENTER);
                    tmp_ftable.setObjects(same_persons);
//                    ModalDialog.doModal(btnRead, panel, "身份证号码重复人员:");
                    ModalDialog.doModal(btnRead, panel, EmpMngMsg.msg044.toString());
                    return;
                }
                String cardNo = idc.getPersonIDCardNo().replace(" ", "");
                jtf_ID_id.setText(cardNo);
                jtf_ID_name.setText(cur_name);
                cur_sex = idc.getPersonSex();
                cur_sex = cur_sex.replace(" ", "");
                cur_sex = cur_sex.replace("0", "");
                if ("1".equals(cur_sex)) {
//                    jtf_ID_sex.setText("男");
                    jtf_ID_sex.setText(EmpMngMsg.msg045.toString());
                } else if ("2".equals(cur_sex)) {
//                    jtf_ID_sex.setText("女");
                    jtf_ID_sex.setText(EmpMngMsg.msg046.toString());
                }
                jtf_ID_dept.setText(idc.getPersonGrantDept());
                jtf_ID_date.setText(idc.getPersonUserLifeBegin() + "-" + idc.getPersonUserLifeEnd());
                cur_addr = idc.getPersonAddress();
//                address = cur_addr.replace(" ", "");
                jtf_ID_addr.setText(cur_addr);
                cur_nation = idc.getPersonNation().replace(" ", "");
//                Code nation_code = CodeManager.getCodeManager().getCodeBy("民族 (GB/T 3304)", cur_nation);
                Code nation_code = CodeManager.getCodeManager().getCodeBy(EmpMngMsg.msg047.toString(), cur_nation);
                //person.setA0121(idc.getPersonNation().replace(" ", ""));
                if (nation_code != null) {
                    jtf_ID_nation.setText(nation_code.getCode_name());
                } else {
                    jtf_ID_nation.setText(cur_nation);
                }
                addPersonPhoto(idc.getPersonPhotoFileName().replace(" ", ""));
                updatePerson();
//                idc = null;
                if (same_persons == null || same_persons.size() == 0) {
                    setNullPerson();
//                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnRead), "数据库中没有此人员记录",
//                            "提示",
//                            JOptionPane.INFORMATION_MESSAGE);
                    MsgUtil.showInfoMsg(EmpMngMsg.msg042);
                    return;
                }
                person = (A01) same_persons.get(0);
//                person = (A01) CommUtil.fetchEntityBy("from A01 a join fetch a.deptCode where a.a0177='" + cardNo + "'");
//                if (person == null) {
//                    setNullPerson();
//                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnRead), "数据库中没有此人员记录",
//                            "提示",
//                            JOptionPane.INFORMATION_MESSAGE);
//                    return;
//                }
                setPerson();
            }
        });
        btnUpdate.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                log.info(e);
                if (person == null) {
                    return;
                }
                if (paramter == null) {
//                    JOptionPane.showMessageDialog(null, "请到系统设置里面设置二代证与人员信息对应");
                    MsgUtil.showInfoMsg(EmpMngMsg.msg048);
                    return;
                }
                List<String> src_fields = new ArrayList<String>();
                List<String> dst_fields = new ArrayList<String>();
                for (String key : id_update_keys.keySet()) {
                    String value = id_update_keys.get(key);
                    TempFieldInfo tfi = a01_field_keys.get(value.replace("_code_", ""));
                    if (tfi == null) {
                        continue;
                    }

                    if (cb_name.isSelected() && key.equals("personName")) {
                        src_fields.add(key);
                        dst_fields.add(tfi.getField_name());
                    }
                    if (cb_nation.isSelected() && key.equals("personNation")) {
                        src_fields.add(key);
                        dst_fields.add(tfi.getField_name());
                    }
                    if (cb_sex.isSelected() && key.equals("personSex")) {
                        src_fields.add(key);
                        dst_fields.add(tfi.getField_name());
                    }
                    if (cb_bir.isSelected() && key.equals("personBorn")) {
                        src_fields.add(key);
                        dst_fields.add(tfi.getField_name());
                    }
                    if (cb_idno.isSelected() && key.equals("personIDCardNo")) {
                        src_fields.add(key);
                        dst_fields.add(tfi.getField_name());
                    }
                    if (cb_addr.isSelected() && key.equals("personAddress")) {
                        src_fields.add(key);
                        dst_fields.add(tfi.getField_name());
                    }
                    if (cb_qfjg.isSelected() && key.equals("PersonGrantDept")) {
                        src_fields.add(key);
                        dst_fields.add(tfi.getField_name());
                    }
                    if (cb_yxq.isSelected() && key.equals("PersonUserLifeBegin")) {
                        src_fields.add(key);
                        dst_fields.add(tfi.getField_name());
                    }
                }
                if (src_fields.isEmpty()) {
//                    JOptionPane.showMessageDialog(null, "请勾选要更新的字段信息！");
                    MsgUtil.showInfoMsg(EmpMngMsg.msg049);
                    return;
                }
                PublicUtil.person_copyProperties(idc, person, src_fields, dst_fields, a01_fields);
                //person.setAddress(address);
                if (photo_url != null && cb_photo.isSelected()) {
                    TransferAccessory.uploadPicture(photo_url, person.getDeptCode().getDept_code() + "", person.getA0190() + "");
                    person.setPic_path(person.getDeptCode().getDept_code() + "/" + person.getA0190() + photo_url.getName().substring(photo_url.getName().lastIndexOf(".")));
                }
                CommUtil.updateEntity(person);
//                JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnUpdate),
//                        "更新成功",
//                        "提示",
//                        JOptionPane.INFORMATION_MESSAGE);
                MsgUtil.showInfoMsg(CommMsg.UPDATESUCCESS_MESSAGE);
                log.info("更新成功");
                refreshPerson();
            }
        });
        //仅更新图片
        updatePhoto.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (person == null) {
                    return;
                }
                if (photo_url != null) {
                    TransferAccessory.uploadPicture(photo_url, person.getDeptCode().getDept_code() + "", person.getA0190() + "");
                    person.setPic_path(person.getDeptCode().getDept_code() + "/" + person.getA0190() + photo_url.getName().substring(photo_url.getName().lastIndexOf(".")));
                    CommUtil.updateEntity(person);
//                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnUpdate),
//                            "更新成功",
//                            "提示",
//                            JOptionPane.INFORMATION_MESSAGE);
                    MsgUtil.showInfoMsg(CommMsg.UPDATESUCCESS_MESSAGE);
                    refreshPhoto();
                    log.info("更新成功");
                }
            }
        });
        CloseAction.doCloseAction(btnCancel);

        cb_name.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveSelect(cb_name.isSelected(), "IDCardReadDlg.cb_name");
            }
        });
        cb_sex.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveSelect(cb_sex.isSelected(), "IDCardReadDlg.cb_sex");
            }
        });
        cb_nation.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveSelect(cb_nation.isSelected(), "IDCardReadDlg.cb_nation");
            }
        });
        cb_bir.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveSelect(cb_bir.isSelected(), "IDCardReadDlg.cb_bir");
            }
        });
        cb_addr.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveSelect(cb_addr.isSelected(), "IDCardReadDlg.cb_addr");
            }
        });
        cb_idno.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveSelect(cb_idno.isSelected(), "IDCardReadDlg.cb_idno");
            }
        });
        cb_qfjg.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveSelect(cb_qfjg.isSelected(), "IDCardReadDlg.cb_qfjg");
            }
        });
        cb_yxq.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveSelect(cb_yxq.isSelected(), "IDCardReadDlg.cb_yxq");
            }
        });
        ComponentUtil.setSysFuntionNew(this, false);
    }

    private void refreshPerson() {
        if (person == null) {
            return;
        }
        A01 a = (A01) CommUtil.fetchEntityBy("from A01 a join fetch a.deptCode where a.a01_key ='" + person.getA01_key() + "'");
        if (a != null) {
            person = a;
            setPerson();
        }
    }

    private void addPersonPhoto(String photoPath) {
        photoPath = photoPath.replace("\\", "/");
        photoPath = photoPath.replace("ProgramFiles", "Program Files");
        File oldPhoto = new File(photoPath);
        if (oldPhoto.isFile() && oldPhoto.exists()) {
            int flag = TransferAccessory.checkPic(oldPhoto);
            if (flag == -1) {
                photo_url = oldPhoto;
                id_photo.removeAll();
                Icon tmpIcon = null;
                try {
                    tmpIcon = new ImageIcon(new ImageIcon(ImageIO.read(oldPhoto)).getImage().getScaledInstance(102, 126, Image.SCALE_DEFAULT));
                } catch (IOException ex) {
                    log.error(ex);
                }

                JLabel picLabel = new JLabel(tmpIcon);
                picLabel.setPreferredSize(new Dimension(102, 126));
                id_photo.add(picLabel, BorderLayout.CENTER);
                id_photo.updateUI();
            } else if (flag == -2) {
//                JOptionPane.showMessageDialog(this,
//                        "图片格式必须为JPG、PNG、GIF、BMP中一种!", // message
//                        "错误", // title
//                        JOptionPane.ERROR_MESSAGE);
                MsgUtil.showErrorMsg(EmpMngMsg.msg050);
            } else {
//                JOptionPane.showMessageDialog(this,
//                        "图片大小不能超过" + flag + "K!", // message
//                        "错误", // title
//                        JOptionPane.ERROR_MESSAGE);
                MsgUtil.showErrorMsg(EmpMngMsg.msg051);

            }
        }
    }

    private int updatePerson() {
        String text = jtf_ID_id.getText();
        if (SysUtil.isRightIdentity(text)) {
            cur_born = SysUtil.getBirthFromIdentityCard(text);
            jtf_ID_born.setText(format.format(cur_born));
            return 1;
        } else {
//            JOptionPane.showMessageDialog(this,
//                    "身份证号码错误!", // message
//                    "错误", // title
//                    JOptionPane.ERROR_MESSAGE);
            MsgUtil.showErrorMsg(EmpMngMsg.msg052);
            return -1;
        }
    }

    private void setNullPerson() {
        name.setText("");
        idd.setText("");
        born.setText("");
        nation.setText("");
        person_code.setText("");
        person_type.setText("");
        dept.setText("");
        sex.setText("");
        photo.removeAll();
        photo.updateUI();
    }

    private void setPerson() {
        name.setText(person.getA0101());
        idd.setText(person.getA0177());
        String str_person = null;
        String field_name = set_keys.get("born");
        Object obj = null;
        TempFieldInfo tfi = null;
        if (field_name != null && !"".equals(field_name.replace(" ", ""))) {
            obj = getFieldObject(person, field_name);
            if (obj != null) {
                Date b_date = (Date) obj;
                str_person = format.format(b_date);
                born.setText(str_person);
            }
        }

        field_name = set_keys.get("nation");
        obj = null;
        str_person = "";
        if (field_name != null && !"".equals(field_name.replace(" ", ""))) {
            tfi = a01_field_keys.get(field_name);
            obj = getFieldObject(person, tfi.getField_name());
            if (obj != null) {
                if (obj instanceof Code) {
                    Code c = (Code) obj;
                    str_person = c.getCode_name();
                } else {
                    str_person = obj.toString();
                }
            }
        }
        nation.setText(str_person);

        field_name = set_keys.get("sex");
        obj = null;
        str_person = "";
        if (field_name != null && !"".equals(field_name.replace(" ", ""))) {
            tfi = a01_field_keys.get(field_name);
            obj = getFieldObject(person, tfi.getField_name());
            if (obj != null) {
                if (obj instanceof Code) {
                    Code c = (Code) obj;
                    str_person = c.getCode_name();
                } else {
                    str_person = obj.toString();
                }
            }
        }
        sex.setText(str_person);

        field_name = set_keys.get("addr");
        obj = null;
        str_person = "";
        if (field_name != null && !"".equals(field_name.replace(" ", ""))) {
            tfi = a01_field_keys.get(field_name);
            obj = getFieldObject(person, tfi.getField_name());
            if (obj != null) {
                if (obj instanceof Code) {
                    Code c = (Code) obj;
                    str_person = c.getCode_name();
                } else {
                    str_person = obj.toString();
                }
            }
        }
        addr.setText(str_person);

//        if (person.getA0111() != null) {
//            str_born = format.format(person.getA0111());
//        }
//        born.setText(str_born);
        //addr.setText(person.getAddress());
//        if (person.getA0121() != null) {
//            Code nation_code = CodeManager.getCodeManager().getCodeBy("民族 (GB/T 3304)", person.getA0121().replace(" ", ""));
//            if (nation_code != null) {
//                nation.setText(nation_code.getCode_name());
//            }else{
//                nation.setText(person.getA0121().replace(" ", ""));
//            }
//        }
        person_code.setText(person.getA0190());
        person_type.setText(person.getA0191());
        //addr.setText();
        dept.setText(person.getDeptCode().getContent());
//        if (person.getA0107() != null) {
//            Code sex_code = CodeManager.getCodeManager().getCodeBy("性别", person.getA0107().replace(" ", ""));
//            if (sex_code != null) {
//                sex.setText(sex_code.getCode_name());
//            } else {
//                sex.setText(person.getA0107());
//            }
//        }
        refreshPhoto();
    }

    private void refreshPhoto() {
        Icon tmpIcon = null;
        BufferedImage tmpImage = TransferAccessory.downloadPicture(person.getPic_path());
        if (tmpImage != null) {
            tmpIcon = new ImageIcon(tmpImage.getScaledInstance(102, 126, Image.SCALE_DEFAULT));
        }
        JLabel label = new JLabel(tmpIcon);
        photo.removeAll();
        photo.add(label, BorderLayout.CENTER);
        photo.updateUI();
    }

    private Object getFieldObject(A01 obj, String field_name) {
        Class aclass = A01.class;
        Object object = null;
        try {
            Method method = aclass.getMethod("get" + field_name.substring(0, 1).toUpperCase() + field_name.substring(1), new Class[]{});
            object = method.invoke(obj, new Object[]{});
        } catch (InvocationTargetException ex) {
            Logger.getLogger(IDCardReadDlg.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException e1) {
            e1.printStackTrace();
        } catch (IllegalAccessException e1) {
            e1.printStackTrace();
        } catch (SecurityException e1) {
            e1.printStackTrace();
        } catch (NoSuchMethodException e1) {
            e1.printStackTrace();
        }
        return object;
    }

    private void saveSelect(boolean title, String str) {
        if (title) {
            ConfigManager.getConfigManager().setProperty(str, "1");//选择
        } else {

            ConfigManager.getConfigManager().setProperty(str, "0");//未选择
        }
        ConfigManager.getConfigManager().save2();

    }

    private void refresh() {
        ConfigManager cm = ConfigManager.getConfigManager();
        cb_name.setSelected(!"0".equals(cm.getProperty("IDCardReadDlg.cb_name")));
        cb_sex.setSelected(!"0".equals(cm.getProperty("IDCardReadDlg.cb_sex")));
        cb_nation.setSelected(!"0".equals(cm.getProperty("IDCardReadDlg.cb_nation")));
        cb_bir.setSelected(!"0".equals(cm.getProperty("IDCardReadDlg.cb_bir")));
        cb_addr.setSelected(!"0".equals(cm.getProperty("IDCardReadDlg.cb_addr")));
        cb_idno.setSelected(!"0".equals(cm.getProperty("IDCardReadDlg.cb_idno")));
        cb_qfjg.setSelected(!"0".equals(cm.getProperty("IDCardReadDlg.cb_qfjg")));
        cb_yxq.setSelected(!"0".equals(cm.getProperty("IDCardReadDlg.cb_yxq")));
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
