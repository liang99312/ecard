/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmpInfoMainPanel.java
 *
 * Created on 2009-2-19, 14:38:57
 */
package org.jhrcore.client.personnel;

import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.ui.BeanPanel;

/**
 *
 * @author DB2INST3
 */
public class EmpInfoMainPanel extends javax.swing.JPanel {

    private BeanPanel beanPanel = new BeanPanel();
    private A01 cur_person;
    private Hashtable<String, EntityDef> appendix_entitys = new Hashtable<String, EntityDef>();
    private Class appendixClass;
    private Hashtable<String, List> appendix_objs = new Hashtable<String, List>();
    private String module_code = "EmpMng.mi_personAppendixView";

    /** Creates new form EmpInfoMainPanel */
    public EmpInfoMainPanel(A01 bp) {
        this.cur_person = bp;
        initComponents();
        initOthers();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();
        pnlBaseInfo = new javax.swing.JPanel();
        pnlAppendixInfo = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(580, 505));

        pnlMain.setLayout(null);

        pnlBaseInfo.setLayout(new java.awt.BorderLayout());
        pnlMain.add(pnlBaseInfo);
        pnlBaseInfo.setBounds(0, 0, 580, 220);

        javax.swing.GroupLayout pnlAppendixInfoLayout = new javax.swing.GroupLayout(pnlAppendixInfo);
        pnlAppendixInfo.setLayout(pnlAppendixInfoLayout);
        pnlAppendixInfoLayout.setHorizontalGroup(
            pnlAppendixInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 580, Short.MAX_VALUE)
        );
        pnlAppendixInfoLayout.setVerticalGroup(
            pnlAppendixInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );

        pnlMain.add(pnlAppendixInfo);
        pnlAppendixInfo.setBounds(0, 230, 580, 270);

        jScrollPane1.setViewportView(pnlMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlAppendixInfo;
    private javax.swing.JPanel pnlBaseInfo;
    private javax.swing.JPanel pnlMain;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        pnlAppendixInfo.setLayout(new GridLayout(appendix_entitys.size(), 1));
        pnlAppendixInfo.setSize(pnlAppendixInfo.getWidth(), appendix_entitys.size() * 150);
        pnlAppendixInfo.setPreferredSize(pnlAppendixInfo.getSize());
    }

    public void setPerson(A01 bp, List<String> fields, ShowScheme ss) {
        cur_person = bp;
        beanPanel.setBean(cur_person, fields);
        beanPanel.setShow_scheme(ss);
        beanPanel.bind();
        pnlBaseInfo.setPreferredSize(beanPanel.getPreferredSize());
        pnlBaseInfo.setSize(beanPanel.getPreferredSize());
        pnlBaseInfo.removeAll();
        pnlBaseInfo.add(beanPanel, BorderLayout.CENTER);
        pnlBaseInfo.updateUI();
        pnlAppendixInfo.setLocation(pnlAppendixInfo.getX(), pnlBaseInfo.getHeight() + 10);
        pnlMain.setSize(pnlAppendixInfo.getWidth(), pnlAppendixInfo.getY() + pnlAppendixInfo.getHeight());
        pnlMain.setPreferredSize(pnlMain.getSize());
    }

    public void setAppendixEntity(List<EntityDef> list) {
        for (EntityDef ed : list) {
            if (appendix_entitys.get(ed.getEntityName()) != null) {
                continue;
            }
            appendix_entitys.put(ed.getEntityName(), ed);
        }
        List<String> remove_list = new ArrayList<String>();
        for (EntityDef ed : appendix_entitys.values()) {
            boolean exist_flag = false;
            for (EntityDef ed1 : list) {
                if (ed.getEntityName().equals(ed1.getEntityName())) {
                    exist_flag = true;
                    break;
                }
            }
            if (!exist_flag) {
                remove_list.add(ed.getEntityName());
            }
        }
        for (String entity_name : remove_list) {
            appendix_entitys.remove(entity_name);
        }
        refreshAppendixPanel();
    }

    public void refreshAppendixPanel() {
        pnlAppendixInfo.setLayout(new GridLayout(appendix_entitys.size(), 1));
        pnlAppendixInfo.setSize(pnlMain.getWidth(), appendix_entitys.size() * 150);
        pnlAppendixInfo.setPreferredSize(pnlAppendixInfo.getSize());
        pnlMain.setSize(pnlMain.getWidth(), pnlAppendixInfo.getY() + pnlAppendixInfo.getHeight());
        pnlMain.setPreferredSize(pnlMain.getSize());
        pnlAppendixInfo.removeAll();
        List<EntityDef> entitys = new ArrayList<EntityDef>();
        entitys.addAll(appendix_entitys.values());
        SysUtil.sortListByInteger(entitys, "order_no");
        for (EntityDef ed : entitys) {
            FTable beanTablePanel3;
            try {
                JPanel panel = new JPanel();
                panel.setBorder(javax.swing.BorderFactory.createTitledBorder(ed.getEntityCaption()));
                panel.setLayout(new BorderLayout());
                JPanel pnl1 = new JPanel();
                pnl1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                pnl1.setLayout(new BorderLayout());
                appendixClass = Class.forName("org.jhrcore.entity." + ed.getEntityName());
                beanTablePanel3 = new FTable(appendixClass, false, false, false, "EmpMngPanel");
                if (cur_person != null) {
                    List list = appendix_objs.get(ed.getEntityName() + "_" + cur_person.getA01_key());
                    if (list == null) {
                        String hql = "from " + ed.getEntityName() + " ed where ed.a01.a01_key='" + cur_person.getA01_key() + "' order by ed.a_id";
                        list = CommUtil.fetchEntities(hql);
                        appendix_objs.put(ed.getEntityName() + "_" + cur_person.getA01_key(), list);
                    }
                    beanTablePanel3.setObjects(list);
                }
                pnl1.add(beanTablePanel3, BorderLayout.CENTER);
                panel.add(pnl1, BorderLayout.CENTER);
                pnlAppendixInfo.add(panel);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EmpInfoMainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        pnlAppendixInfo.updateUI();
        pnlMain.updateUI();
    }
}
