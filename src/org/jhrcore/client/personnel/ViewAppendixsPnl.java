/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddAppendixsPnl.java
 *
 * Created on 2009-5-9, 16:51:02
 */
package org.jhrcore.client.personnel;

import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.apache.log4j.Logger;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.TransferAccessory;
import org.jhrcore.client.personnel.comm.IPickRowSelectListener;
import org.jhrcore.client.personnel.comm.PersonSelectPanel;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.ui.BeanPanel;
import org.jhrcore.ui.JCheckBoxList;
import org.jhrcore.ui.ShowImageComponent;
import org.jhrcore.util.ImageUtil;

/**
 *
 * @author DB2INST3
 */
public class ViewAppendixsPnl extends javax.swing.JPanel {

    /** Creates new form AddAppendixsPnl */
    private PersonSelectPanel pnlPersonSelect;
    private Class appendixClass;
    private JLabel person_photo = new JLabel();
    /** Creates new form AddAppendixsFrame */
    private List appendix_entitys = new ArrayList();
    private JCheckBoxList jls_appendix_entity;
    private List<EntityDef> select_entitys = new ArrayList<EntityDef>();
    private A01 cur_person;
    private List person_list;
    private Hashtable<String, FTable> exist_tables = new Hashtable<String, FTable>();
    private Hashtable<String, List> exist_appendixs = new Hashtable<String, List>();
    private Logger log = Logger.getLogger(ViewAppendixsPnl.class.getName());
    private BeanPanel beanPanel = new BeanPanel();
    private final Icon none_icon =ImageUtil.getIcon("UserPhoto.jpg");

    /** Creates new form AddAppendixsPanel */
    public ViewAppendixsPnl(List list, A01 person) {
        this.person_list = list;
        this.cur_person = person;
        initComponents();
        initOthers();
        setEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        pnlPerson = new javax.swing.JPanel();
        pnl = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        pnlMain = new javax.swing.JPanel();
        pnlAppendixsPhoto = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlPhoto = new javax.swing.JPanel();
        pnlAppendixs = new javax.swing.JPanel();

        jSplitPane2.setDividerLocation(150);
        jSplitPane2.setDividerSize(1);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlPerson.setBorder(javax.swing.BorderFactory.createTitledBorder("人员基本信息（输入员工编号、姓名、拼音码）"));
        pnlPerson.setLayout(new java.awt.BorderLayout());
        jSplitPane2.setTopComponent(pnlPerson);

        jSplitPane3.setDividerLocation(400);
        jSplitPane3.setOneTouchExpandable(true);

        pnlMain.setLayout(new java.awt.BorderLayout());
        jSplitPane3.setLeftComponent(pnlMain);

        jSplitPane1.setDividerLocation(120);
        jSplitPane1.setDividerSize(3);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlPhoto.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setTopComponent(pnlPhoto);

        pnlAppendixs.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(pnlAppendixs);

        javax.swing.GroupLayout pnlAppendixsPhotoLayout = new javax.swing.GroupLayout(pnlAppendixsPhoto);
        pnlAppendixsPhoto.setLayout(pnlAppendixsPhotoLayout);
        pnlAppendixsPhotoLayout.setHorizontalGroup(
            pnlAppendixsPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
        );
        pnlAppendixsPhotoLayout.setVerticalGroup(
            pnlAppendixsPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
        );

        jSplitPane3.setRightComponent(pnlAppendixsPhoto);

        javax.swing.GroupLayout pnlLayout = new javax.swing.GroupLayout(pnl);
        pnl.setLayout(pnlLayout);
        pnlLayout.setHorizontalGroup(
            pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
        );
        pnlLayout.setVerticalGroup(
            pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(pnl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JPanel pnl;
    private javax.swing.JPanel pnlAppendixs;
    private javax.swing.JPanel pnlAppendixsPhoto;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPerson;
    private javax.swing.JPanel pnlPhoto;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        appendix_entitys.addAll(CommUtil.fetchEntities("from EntityDef ed where ed.entityClass.entityType_code='ANNEX' order by ed.entityName"));
        jls_appendix_entity = new JCheckBoxList(appendix_entitys);
        pnlAppendixs.add(new JScrollPane(jls_appendix_entity), BorderLayout.CENTER);
        person_photo.setIcon(none_icon);
        pnlPersonSelect = new PersonSelectPanel(A01.class);
        pnlPersonSelect.addObject(person_list);
        pnlPerson.add(pnlPersonSelect, BorderLayout.CENTER);
    }

    public void refreshAppendixPanel() {
        pnlMain.removeAll();
        JPanel pnlAppendix = new JPanel();
        pnlAppendix.setLayout(new GridLayout(select_entitys.size(), 1));
        for (EntityDef ed : select_entitys) {
            FTable beanTablePanel3;
            try {
                JPanel panel = new JPanel();
                panel.setBorder(javax.swing.BorderFactory.createTitledBorder(ed.getEntityCaption()));
                panel.setLayout(new BorderLayout());
                JPanel pnl1 = new JPanel();
                pnl1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                pnl1.setLayout(new BorderLayout());
                appendixClass = Class.forName("org.jhrcore.entity." + ed.getEntityName());
                beanTablePanel3 = exist_tables.get(ed.getEntityName());
                if (beanTablePanel3 == null) {
                    beanTablePanel3 = new FTable(appendixClass, false, false, false);
                    beanTablePanel3.setEditable(false);
                    exist_tables.put(ed.getEntityName(), beanTablePanel3);
                    refreshAppendixForPerson(cur_person);
                }
                pnl1.add(beanTablePanel3, BorderLayout.CENTER);
                panel.add(pnl1, BorderLayout.CENTER);
                panel.setSize(panel.getWidth(), 125);
                panel.setPreferredSize(panel.getSize());
                pnlAppendix.add(panel);
            } catch (ClassNotFoundException ex) {
                log.error(ex);
            }
        }
        beanPanel.setBean(cur_person);
        beanPanel.setShow_scheme(pnlPersonSelect.getFtable().getCur_show_scheme());
        beanPanel.setFields(pnlPersonSelect.getFtable().getFields());
        beanPanel.bind();
        JPanel pnl2 = new JPanel(new BorderLayout());
        JPanel pnlBean = new JPanel(new BorderLayout());
        pnlBean.add(beanPanel, BorderLayout.CENTER);
        pnlBean.setBorder(javax.swing.BorderFactory.createTitledBorder("人员基本信息"));
        pnl2.add(pnlBean, BorderLayout.NORTH);
        pnl2.add(pnlAppendix, BorderLayout.CENTER);
        pnlMain.add(new JScrollPane(pnl2), BorderLayout.CENTER);
        pnlMain.updateUI();
    }

    private void refreshAppendixForPerson(A01 a01) {
        if (a01 == null) {
            return;
        }
        for (EntityDef ed : select_entitys) {
            FTable beanTablePanel3 = exist_tables.get(ed.getEntityName());
            List list = exist_appendixs.get(ed.getEntityName() + "_" + a01.getA01_key());
            if (list == null) {
                String hql = "from " + ed.getEntityName() + " ed where ed.a01.a01_key='" + a01.getA01_key() + "' order by a_id";
                list = new ArrayList();
                list.addAll(CommUtil.fetchEntities(hql));
            }
            exist_appendixs.put(ed.getEntityName() + "_" + a01.getA01_key(), list);
            beanTablePanel3.setObjects(list);
        }
    }

    public void getPersonPic(A01 person) {
        pnlPhoto.removeAll();
        BufferedImage tmpImage = TransferAccessory.downloadPicture(person.getPic_path());
        if (tmpImage != null) {
            pnlPhoto.add(new ShowImageComponent(tmpImage), BorderLayout.CENTER);
        } else {
            pnlPhoto.add(person_photo, BorderLayout.CENTER);
        }
        pnlPhoto.updateUI();
    }

    private void setEvents() {
        pnlPersonSelect.addPickPersonSelectListener(new IPickRowSelectListener() {

            @Override
            public List pickPerson(String hql) {
                return CommUtil.fetchEntities(hql);
            }

            @Override
            public void pickRow(Object obj) {
                if (obj instanceof A01) {
                    A01 a01 = (A01) obj;
                    cur_person = a01;
                    exist_appendixs.clear();
                    getPersonPic(cur_person);
                    refreshAppendixForPerson(a01);
                }
            }

            @Override
            public void pickFields(List<String> fields) {
                refreshAppendixPanel();
            }

            @Override
            public void addRows(List list) {
                
            }
        });
        jSplitPane3.addComponentListener(new ComponentListener() {

            @Override
            public void componentResized(ComponentEvent e) {
                jSplitPane3.setDividerLocation(jSplitPane3.getWidth() - 200);
                jSplitPane3.updateUI();
            }

            @Override
            public void componentMoved(ComponentEvent e) {
            }

            @Override
            public void componentShown(ComponentEvent e) {
            }

            @Override
            public void componentHidden(ComponentEvent e) {
            }
        });
        jls_appendix_entity.getModel().addListDataListener(new ListDataListener() {

            @Override
            public void intervalAdded(ListDataEvent e) {
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
                select_entitys.clear();
                select_entitys.addAll(jls_appendix_entity.getCheckedObjects());
                refreshAppendixPanel();
            }
        });
        refreshAppendixPanel();
        pnlPersonSelect.pickRow(person_list.indexOf(cur_person));
    }
}
