/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddAppendixsPanel.java
 *
 * Created on 2009-5-7, 16:12:45
 */
package org.jhrcore.client.personnel;

import com.foundercy.pf.control.table.FTable;
import com.foundercy.pf.control.table.FTableModel;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.jhrcore.client.CommUtil;
import org.jhrcore.comm.HrLog;
import org.jhrcore.client.UserContext;
import org.jhrcore.client.personnel.comm.IPickRowSelectListener;
import org.jhrcore.client.personnel.comm.PersonSelectPanel;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.BasePersonAppendix;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.RSImpl;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.mutil.EmpUtil;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.JCheckBoxList;
import org.jhrcore.ui.ModelFrame;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author DB2INST3
 */
public class AddAppendixsPanel extends javax.swing.JPanel implements IModuleCode {

    private PersonSelectPanel pnlPersonSelect;
    private List appendix_entitys = new ArrayList();
    private JCheckBoxList jls_appendix_entity;
    private List<EntityDef> select_entitys = new ArrayList<EntityDef>();
    private A01 cur_person;
    private List person_list;
    private Class appendixClass;
    private BasePersonAppendix basePersonAppendix;
    private Hashtable<String, FTable> exist_tables = new Hashtable<String, FTable>();
    private HrLog log = new HrLog("EmpMng.同时录入多张附表");
    private String module_code = "EmpMng.addAppendixs";

    public AddAppendixsPanel() {
        initComponents();
        initOthers();
        setEvents();
    }

    /** Creates new form AddAppendixsPanel */
    public AddAppendixsPanel(List list, A01 person) {
        this.person_list = list;
        this.cur_person = person;
        initComponents();
        initOthers();
        setEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        pnlPerson = new javax.swing.JPanel();
        pnl = new javax.swing.JPanel();
        jspMain = new javax.swing.JSplitPane();
        pnlAppendixs = new javax.swing.JPanel();
        pnlMain = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(720, 600));

        btnOk.setText("保存");

        btnCancel.setText("取消");

        jCheckBox1.setText("保存完不关闭窗口");

        jLabel5.setText("（提示：F2添加记录，F5删除记录）");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(64, 64, 64)
                .addComponent(btnCancel)
                .addGap(154, 154, 154))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk)
                    .addComponent(jCheckBox1)
                    .addComponent(jLabel5))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jSplitPane2.setDividerLocation(150);
        jSplitPane2.setDividerSize(1);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlPerson.setBorder(javax.swing.BorderFactory.createTitledBorder("人员基本信息（输入员工编号、姓名、拼音码）"));
        pnlPerson.setLayout(new java.awt.BorderLayout());
        jSplitPane2.setTopComponent(pnlPerson);

        jspMain.setDividerLocation(573);
        jspMain.setOneTouchExpandable(true);

        pnlAppendixs.setLayout(new java.awt.BorderLayout());
        jspMain.setRightComponent(pnlAppendixs);

        pnlMain.setPreferredSize(new java.awt.Dimension(650, 650));
        pnlMain.setLayout(new java.awt.BorderLayout());
        jspMain.setLeftComponent(pnlMain);

        javax.swing.GroupLayout pnlLayout = new javax.swing.GroupLayout(pnl);
        pnl.setLayout(pnlLayout);
        pnlLayout.setHorizontalGroup(
            pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspMain, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
        );
        pnlLayout.setVerticalGroup(
            pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspMain, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(pnl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jspMain;
    private javax.swing.JPanel pnl;
    private javax.swing.JPanel pnlAppendixs;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPerson;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        List entity_list = CommUtil.fetchEntities("from EntityDef ed where  ed.entityClass.entityType_code='ANNEX' order by ed.order_no");
        if (!UserContext.isSA) {
            for (Object obj : entity_list) {
                EntityDef ed = (EntityDef) obj;
                if (UserContext.hasEntityAddRight(ed.getEntityName())) {
                    appendix_entitys.add(ed);
                }
            }
        } else {
            appendix_entitys.addAll(entity_list);
        }
        jls_appendix_entity = new JCheckBoxList(appendix_entitys);
        pnlAppendixs.add(new JScrollPane(jls_appendix_entity), BorderLayout.CENTER);
        pnlPersonSelect = new PersonSelectPanel(A01.class, true);
        pnlPersonSelect.setReplaceEnable(false);
        pnlPerson.add(pnlPersonSelect, BorderLayout.CENTER);
    }

    private void setEvents() {
        pnlPersonSelect.addPickPersonSelectListener(new IPickRowSelectListener() {

            @Override
            public List pickPerson(String hql) {
                return CommUtil.fetchEntities(hql);
            }

            @Override
            public void pickRow(Object a01) {
                if (a01 instanceof A01) {
                    changePerson((A01) a01);
                }
            }

            @Override
            public void pickFields(List<String> fields) {
            }

            @Override
            public void addRows(List list) {
            }
        });
        jls_appendix_entity.getModel().addListDataListener(new ListDataListener() {

            @Override
            public void intervalAdded(ListDataEvent e) {
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
                select_entitys.clear();
                select_entitys.addAll(jls_appendix_entity.getCheckedObjects());
                JPanel pnl = new JPanel(new GridLayout(select_entitys.size(), 1));
                pnlMain.removeAll();
                for (EntityDef ed : select_entitys) {
                    FTable beanTablePanel3;
                    try {
                        JPanel panel = new JPanel();
                        panel.setBorder(javax.swing.BorderFactory.createTitledBorder(ed.getEntityCaption()));
                        panel.setLayout(new BorderLayout());
                        JPanel pnl1 = new JPanel();
                        pnl1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                        pnl1.setLayout(new BorderLayout());
                        appendixClass = Class.forName("org.jhrcore.entity." + ed.getEntityName());
                        beanTablePanel3 = exist_tables.get(ed.getEntityName());
                        if (beanTablePanel3 == null) {
                            beanTablePanel3 = new FTable(appendixClass, false, false, false);
                            beanTablePanel3.setEditable(true);
                            final FTable ftable = beanTablePanel3;
                            ftable.addKeyListener(new KeyAdapter() {

                                @Override
                                public void keyPressed(KeyEvent e) {
                                    if (e.getKeyCode() == KeyEvent.VK_F2) {
                                        int maxId = 0;
                                        for (Object obj : ftable.getObjects()) {
                                            BasePersonAppendix tmp_bpa = (BasePersonAppendix) obj;
                                            tmp_bpa.setLast_flag("");
                                            maxId = Math.max(maxId, tmp_bpa.getA_id());
                                        }
                                        BasePersonAppendix temp = (BasePersonAppendix) UtilTool.createUIDEntity(((FTableModel) ftable.getModel()).getEntityClass());
                                        temp.setA_id(maxId + 1);
                                        temp.setLast_flag("最新");
                                        temp.setA01(cur_person);
                                        ftable.addObject(temp);
                                    } else if (e.getKeyCode() == KeyEvent.VK_F5) {
                                        if (ftable.getObjects().isEmpty()) {
                                            return;
                                        }
                                        ftable.deleteRow(ftable.getObjects().size() - 1);
                                        if (ftable.getObjects().isEmpty()) {
                                            return;
                                        }
                                        BasePersonAppendix tmp_bpa = (BasePersonAppendix) ftable.getObjects().get(ftable.getRowCount() - 1);
                                        tmp_bpa.setLast_flag("最新");
                                    }
                                }
                            });
                        }
                        exist_tables.put(ed.getEntityName(), beanTablePanel3);
                        pnl1.add(beanTablePanel3, BorderLayout.CENTER);
                        panel.add(pnl1, BorderLayout.CENTER);
                        panel.setSize(panel.getWidth(), 125);
                        panel.setPreferredSize(panel.getSize());
                        pnl.add(panel);
                    } catch (ClassNotFoundException ex) {
                        log.error(ex);
                    }
                }
                changePerson(cur_person);
                pnlMain.add(new JScrollPane(pnl), BorderLayout.CENTER);
                pnlMain.updateUI();
            }
        });
        CloseAction.doCloseAction(btnCancel);
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                addAppendixs();
                if (!jCheckBox1.isSelected()) {
                    ModelFrame.close();
                }
            }
        });
        ComponentUtil.refreshJSplitPane(jspMain, "AddAppendixsPanel.jspMain", jspMain.getWidth() - 200);
        pnlPersonSelect.addObject(person_list);
        cur_person = (A01) pnlPersonSelect.getFtable().getCurrentRow();
    }

    private void changePerson(A01 a01) {
        if (a01 == null) {
            return;
        }
        cur_person = a01;
        for (EntityDef ed : select_entitys) {
            FTable beanTablePanel3 = exist_tables.get(ed.getEntityName());
            Class entityClass = ((FTableModel) beanTablePanel3.getModel()).getEntityClass();
            beanTablePanel3.deleteAllRows();
            int tmp_id = 1;
            if (a01.getA01_key() != null) {
                Object obj = CommUtil.fetchEntityBy("select max(a.a_id) from " + entityClass.getSimpleName() + " a where a.a01.a01_key='" + a01.getA01_key() + "'");
                if (obj != null) {
                    tmp_id = Integer.valueOf(obj.toString());
                    tmp_id += 1;
                }
            }
            basePersonAppendix = (BasePersonAppendix) UtilTool.createUIDEntity(entityClass);
            basePersonAppendix.setA_id(tmp_id);
            basePersonAppendix.setA01(cur_person);
            basePersonAppendix.setLast_flag("最新");
            beanTablePanel3.addObject(basePersonAppendix);
        }
    }

    private void addAppendixs() {
        List<String> checkTables = EmpUtil.getCheckAppendixTable();
        List<BasePersonAppendix> savelist = new ArrayList<BasePersonAppendix>();
        for (EntityDef ed : select_entitys) {
            FTable beanTablePanel3 = exist_tables.get(ed.getEntityName());
            beanTablePanel3.editingStopped();
            for (Object obj : beanTablePanel3.getObjects()) {
                BasePersonAppendix bpa = (BasePersonAppendix) obj;
                if (bpa.getA01() == null || bpa.getA01().getA01_key() == null) {
                    continue;
                }
                boolean needcheck = checkTables.contains(bpa.getClass().getSimpleName());
                if (needcheck) {
                    PublicUtil.setValueBy2(bpa, "wf_state", "未提交");
//                    PublicUtil.setValueBy2(bpa, "check_flag", "未提交");
                    PublicUtil.setValueBy2(bpa, "person_code", UserContext.person_code);
                }
                savelist.add((BasePersonAppendix) obj);
            }
        }
        if (savelist.isEmpty()) {
            return;
        }
        ValidateSQLResult result = RSImpl.addAppendixs(savelist);
        if (result.getResult() == 0) {
            for (EntityDef ed : select_entitys) {
                FTable beanTablePanel3 = exist_tables.get(ed.getEntityName());
                beanTablePanel3.deleteAllRows();
            }
            pnlPersonSelect.delCurRow();
            MsgUtil.showInfoMsg(CommMsg.SAVESUCCESS_MESSAGE);
            log.info("保存成功");
        } else {
            MsgUtil.showHRSaveErrorMsg(result);
            log.info("保存失败，原因" + result.getMsg());
        }
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
