/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChangePersonNoDlg.java
 *
 * Created on 2010-6-26, 15:26:50
 */
package org.jhrcore.client.personnel;

import com.foundercy.pf.control.listener.IPickPopupListener;
import com.foundercy.pf.control.table.FTable;
import com.foundercy.pf.control.table.RowChangeListner;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JPopupMenu;
import org.jhrcore.client.CommUtil;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.SysParameter;
import org.jhrcore.entity.base.TempFieldInfo;
import javax.swing.JButton;
import javax.swing.JMenuItem;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.personnel.comm.PersonContainer;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.RSImpl;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.emp.EmpMngMsg;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author Administrator
 */
public class ChangePersonNoDlg extends javax.swing.JDialog implements IModuleCode {

    private JButton btnSetPersonNo = new JButton("设置员工序号字段");
    private JButton btnSave = new JButton("保存序号");
    private JButton btnCancel = new JButton("退出");
    private List a01_list;
    private FTable ftable;
    private List<TempFieldInfo> person_default_fields;
    private List<TempFieldInfo> person_all_fields;
    private Object change_obj = null;
    private Hashtable<String, Integer> exist_fields = new Hashtable<String, Integer>();
    private SysParameter parameter = null;
    private String field_name = "";
    private List<Integer> no_list = new ArrayList<Integer>();
    private JMenuItem miAdd = new JMenuItem("添加人员容器人员");
    private JMenuItem miDel = new JMenuItem("删除");
    private boolean change_flag = false;
    private String module_code = "EmpMng.mi_personNoSet";

    public boolean isChange_flag() {
        return change_flag;
    }
    private RowChangeListner change_listener = new RowChangeListner() {

        @Override
        public void rowChanged(Object obj) {
            if (obj == null) {
                return;
            }
            change_obj = obj;
            Integer old_order_no = 0;
            Integer new_order_no = 0;
            if (obj instanceof A01) {
                A01 a01 = (A01) obj;
                old_order_no = exist_fields.get(a01.getA01_key());
                new_order_no = getPersonNo(a01);
                if (new_order_no < 0) {
                    setPersonNo(a01, old_order_no);
                    return;
                }
                exist_fields.put(a01.getA01_key(), new_order_no);
            }

            if (new_order_no.intValue() != old_order_no.intValue()) {
                if (no_list.contains(new_order_no)) {
                    changeOrder_no(old_order_no, new_order_no, change_obj);
                } else {
                    int index = -1;
                    for (int i = 0; i < no_list.size(); i++) {
                        if (no_list.get(i) == old_order_no) {
                            index = i;
                            break;
                        }
                    }
                    if (index != -1) {
                        no_list.remove(index);
                    }
                    no_list.add(new_order_no);
                }
            }
//            CommUtil.updateEntity(change_obj);
            change_flag = true;
            sortA01s();
            sortPersons();
        }
    };

    /** Creates new form ChangePersonNoDlg */
    public ChangePersonNoDlg() {
        initComponents();
        initOthers();
        setupEvents();
    }

    public ChangePersonNoDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public ChangePersonNoDlg(List a01_list, List<TempFieldInfo> person_all_fields, List<TempFieldInfo> person_default_fields) {
        this.person_all_fields = person_all_fields;
        this.person_default_fields = person_default_fields;
        this.a01_list = a01_list;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setPreferredSize(new java.awt.Dimension(100, 24));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        initToolbar();
        ftable = new FTable(A01.class, true, false, false, "empNo");
        ftable.setAll_fields(person_all_fields, person_default_fields, new ArrayList(), "empNo");
        ftable.setRight_allow_flag(true);
        ftable.removeItemByCodes("query;order;sum;replace");
        ftable.addPickPopupListener(new IPickPopupListener() {

            @Override
            public void addMenuItem(JPopupMenu pp) {
                pp.add(miAdd);
                pp.add(miDel);
            }
        });
        jPanel2.add(ftable, BorderLayout.CENTER);
        ftable.setObjects(a01_list);
        initData(1);

    }

    private void initData(int i) {
        ftable.setEditable(false);
        ftable.editingStopped();
        Object object = CommUtil.fetchEntityBy("from SysParameter where sysparameter_code = 'person_no'");
        if (object == null) {
            if (i == 1) {
//                JOptionPane.showMessageDialog(null, "请先设置员工序号字段",
//                        "提示", JOptionPane.INFORMATION_MESSAGE);
                MsgUtil.showInfoMsg(EmpMngMsg.msg023);
            }
            return;
        } else {
            parameter = (SysParameter) object;
            if (parameter.getSysparameter_value() == null || "".equals(parameter.getSysparameter_value().replace(" ", ""))) {
                if (i == 1) {
//                    JOptionPane.showMessageDialog(null, "请先设置员工序号字段",
//                            "提示", JOptionPane.INFORMATION_MESSAGE);
                    MsgUtil.showInfoMsg(EmpMngMsg.msg023);
                }
                return;
            } else {
                field_name = parameter.getSysparameter_value();
            }
        }

        for (Object obj : ftable.getObjects()) {
            A01 a01 = (A01) obj;
            int no = getPersonNo(a01);
            exist_fields.put(a01.getA01_key(), no);
            no_list.add(no);
        }
        List<String> disable_fields = new ArrayList<String>();
        for (TempFieldInfo tfi : person_all_fields) {
            if (!tfi.getField_name().toLowerCase().equals(field_name.toLowerCase())) {
                disable_fields.add(tfi.getField_name());
            }
        }
        ftable.setDisable_fields(disable_fields);
        if (field_name != null && !"".equals(field_name)) {
            ftable.setEditable(true);
        }
    }

    private void initToolbar() {
        jToolBar1.add(btnSetPersonNo);
        jToolBar1.add(btnSave);
        jToolBar1.addSeparator();
        jToolBar1.add(btnCancel);
    }

    private void setupEvents() {
        miAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                PersonContainer.getPersonContainer().setVisible(true);
                ftable.addObjects(PersonContainer.getPersonContainer().getAllPersons());
                exist_fields.clear();
                no_list.clear();
                for (Object obj : ftable.getObjects()) {
                    A01 a01 = (A01) obj;
                    int no = getPersonNo(a01);
                    exist_fields.put(a01.getA01_key(), no);
                    no_list.add(no);
                }
                sortA01s();
            }
        });
        miDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (ftable.getSelectObjects().size() == 0) {
                    return;
                }
                ftable.deleteSelectedRows();
                exist_fields.clear();
                no_list.clear();
                for (Object obj : ftable.getObjects()) {
                    A01 a01 = (A01) obj;
                    int no = getPersonNo(a01);
                    exist_fields.put(a01.getA01_key(), no);
                    no_list.add(no);
                }
            }
        });
        ftable.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() >= 2) {
                    if (field_name == null || "".equals(field_name)) {
                        MsgUtil.showInfoMsg(EmpMngMsg.msg023); 
                    }
                }
            }
        });
        btnSetPersonNo.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                PersonNoSetDlg dlg = new PersonNoSetDlg("person_no", EmpMngMsg.msg077.toString(), 0);
                dlg.setTitle( EmpMngMsg.msg078.toString());
                ContextManager.locateOnMainScreenCenter(dlg);
                dlg.setVisible(true);
                if (dlg.IsClick_ok()) {
                    initData(0);
                }
            }
        });
        CloseAction.doCloseAction(btnCancel);
        ftable.addRowChangeListner(change_listener);
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveNoChange(ftable.getObjects());
            }
        });
        ComponentUtil.setSysFuntionNew(this, false);
    }

    private void sortA01s() {
        List list = ftable.getObjects();
        for (int j = 1; j < list.size(); j++) {
            for (int i = 0; i < list.size() - 1; i++) {
                A01 a1 = (A01) list.get(i);
                A01 a2 = (A01) list.get(i + 1);
                if (getPersonNo(a1) > getPersonNo(a2)) {
                    list.remove(i);
                    list.add(i + 1, a1);
                }
            }
        }
    }

    private void sortPersons() {
        if (ftable.getObjects().size() == 0) {
            return;
        }
        exist_fields.clear();
        no_list.clear();
        int index = -1;
        List list = ftable.getObjects();
        List update_list = new ArrayList();
        index = getPersonNo((A01) list.get(0));
        for (int i = 0; i < list.size(); i++) {
            if (index + i != getPersonNo((A01) list.get(i))) {
                setPersonNo((A01) list.get(i), index + i);
                update_list.add((A01) list.get(i));
            }
            no_list.add(index + i);
            exist_fields.put(((A01) list.get(i)).getA01_key(), index + i);
        }
    }

    private void changeOrder_no(int old_order_no, int new_order_no, Object change_obj) {
        List list = ftable.getObjects();
        A01 a01 = null;
        A01 change_a01 = (A01) change_obj;
        List update_objs = new ArrayList();
        for (Object obj : list) {
            a01 = (A01) obj;
            int a = getPersonNo(a01);
            if (a01.getA01_key().equals(change_a01.getA01_key())) {
                continue;
            }
            if ((a > new_order_no || a < old_order_no) && new_order_no > old_order_no) {
                continue;
            }
            if ((a < new_order_no || a > old_order_no) && new_order_no < old_order_no) {
                continue;
            }
            if (new_order_no > old_order_no) {
                setPersonNo(a01, a - 1);
                exist_fields.remove(a01.getA01_key());
                exist_fields.put(a01.getA01_key(), getPersonNo(a01));
                update_objs.add(a01);
            } else if (new_order_no < old_order_no) {
                setPersonNo(a01, a + 1);
                exist_fields.remove(a01.getA01_key());
                exist_fields.put(a01.getA01_key(), getPersonNo(a01));
                update_objs.add(a01);
            }

        }
        no_list.clear();
        for (Object obj : ftable.getObjects()) {
            A01 a01_1 = (A01) obj;
            int no = getPersonNo(a01_1);
            no_list.add(no);
        }
        ftable.setObjects(list);
    }

    private void saveNoChange(List update_objs) {
        List<String[]> nos = new ArrayList<String[]>();
        for (Object obj : update_objs) {
            A01 a01 = (A01) obj;
            nos.add(new String[]{a01.getA01_key(), getPersonNo(a01) + ""});
        }
        ValidateSQLResult result = RSImpl.changePersonNo(nos, field_name);
        if (result.getResult() == 0) {
            MsgUtil.showInfoMsg(CommMsg.SAVESUCCESS_MESSAGE); 
        } else {
            MsgUtil.showHRSaveErrorMsg(result);
        }
    }

    private int getPersonNo(A01 a01) {
        Object obj = PublicUtil.getProperty(a01, field_name);
        return SysUtil.objToInt(obj);
    }

    private void setPersonNo(A01 a01, int person_no) {
        PublicUtil.setValueBy2(a01, field_name, person_no);
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
