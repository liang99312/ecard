/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PersonContainerIpExcel.java
 *
 * Created on 2012-12-25, 16:31:51
 */
package org.jhrcore.client.personnel.comm;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.swing.SwingUtilities;
import org.jhrcore.client.CommUtil;
import org.jhrcore.comm.HrLog;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.ExportDetail;
import org.jhrcore.entity.ExportScheme;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.emp.EmpMngMsg;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.importxls.ReadXLS;
import org.jhrcore.ui.importxls.XlsImportInfo;
import org.jhrcore.util.FileChooserUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author Administrator
 */
public class PersonContainerIpExcel extends javax.swing.JDialog implements IModuleCode {

    private File select_file = null;//当前选择的文件
    private HrLog log = new HrLog("PersonContainerIpExcel.导入人员容器信息");
    private ExportScheme exportScheme;//当前导入方案
    private List<String> n_fields = new ArrayList<String>();
    private Hashtable<String, TempFieldInfo> field_keys = new Hashtable<String, TempFieldInfo>();
    private List<TempFieldInfo> a01_fields = new ArrayList<TempFieldInfo>();
    private List<String> keys = new ArrayList<String>();
    public List lista01s;
    private boolean click_ok = false;
    private String module_code = "EmpMng.btnContainer.miExcel";

    /** Creates new form PersonContainerIpExcel */
    public PersonContainerIpExcel(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        this.setTitle("导入人员容器人员");
        initOthers();
        setupEvents();
    }

    public boolean isClick_ok() {
        return click_ok;
    }

    public List lista01s() {
        return lista01s;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        btnFile = new javax.swing.JButton();
        btnCheck = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("选择导入文件："));

        btnFile.setText("..");

        btnCheck.setText("导入");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFile, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCheck)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFile, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheck))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnFile;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        List<TempFieldInfo> fields = EntityBuilder.getCommFieldInfoListOf(A01.class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : fields) {
            if (tfi.getField_name().equals("deptCode")) {
                continue;
            }
            field_keys.put(tfi.getField_name(), tfi);
            if (tfi.getField_type().equals("Date") || tfi.getField_type().toLowerCase().equals("boolean") || tfi.getField_type().equals("Code") || tfi.getField_type().toLowerCase().equals("float") || tfi.getField_type().toLowerCase().equals("bigdecimal")) {
                continue;
            }
            a01_fields.add(tfi);
        }
        List<TempFieldInfo> dept_infos = EntityBuilder.getCommFieldInfoListOf(DeptCode.class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : dept_infos) {
            tfi.setField_name("deptCode." + tfi.getField_name());
            field_keys.put(tfi.getField_name(), tfi);
        }
    }

    private void setupEvents() {
        btnFile.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                log.info(e);
                File file = FileChooserUtil.getXLSFile(CommMsg.SELECTXLSFILE_MESSAGE);
                if (file == null) {
                    return;
                }
                select_file = file;
                jTextField1.setText(select_file.getPath());
            }
        });
        btnCheck.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Runnable run = new Runnable() {

                    @Override
                    public void run() {
                        final int i = check(select_file.getPath());
                        Runnable tmp_run = new Runnable() {

                            @Override
                            public void run() {
                                report_msg(select_file.getPath(), true, i);
                            }
                        };
                        SwingUtilities.invokeLater(tmp_run);
                    }
                };
                new Thread(run).start();
            }
        });
    }

    private int check(String fileName) {
        XlsImportInfo xlsImportInfo = null;
        //检查读excel
        try {
            xlsImportInfo = ReadXLS.importXls(new File(fileName));
        } catch (Exception e) {
            return 6;
        }
        exportScheme = xlsImportInfo.getExportScheme();//当前显示方案
        boolean a0190_flag = false;//是否存在人员编号字段
        final int num_jbp = exportScheme.getExportDetails().size();
        Hashtable<String, TempFieldInfo> use_fields = new Hashtable<String, TempFieldInfo>();
        String compare_val;//匹配值
        List<ExportDetail> error_details = new ArrayList<ExportDetail>();
        for (ExportDetail exportDetail : exportScheme.getExportDetails()) {
            String field_name = exportDetail.getField_name();
            n_fields.add(field_name.toLowerCase());
            if (field_name.equals("deptCode.dept_code")) {
                use_fields.put(field_name, field_keys.get("deptCode.dept_code"));
                exportDetail.setField_type("String");
            } else if (field_name.startsWith("deptCode.")) {
                exportDetail.setField_type("String");
                error_details.add(exportDetail);
                continue;
            } else {
                if (field_name.equals("a0190")) {
                    exportDetail.setField_type("String");
                    use_fields.put(field_name, field_keys.get("a0190"));
                    a0190_flag = true;
                }

            }
        }

        if (!a0190_flag) {
            return 1;
        }
        //---------获得权限字段----------------------------------------------
        final int len = xlsImportInfo.getValues().size();
        String c_val = "";
        String cm_str = "";
        for (int i = 0; i < len; i++) {
            cm_str = "";
            Hashtable<String, String> row_data = xlsImportInfo.getValues().get(i);
            compare_val = row_data.get("a0190");
            c_val = compare_val;
            keys.add(compare_val);
            cm_str = compare_val;
        }
        String hql = "from A01 bp join fetch bp.deptCode where bp.a0193=0 ";
        hql += " and (" + UserContext.getDept_right_rea_str("bp.deptCode") + ")";
        hql += " and (" + UserContext.getPerson_class_right_str(A01.class, "bp") + ")";
        hql += " and bp.a0190 in";
        lista01s = CommUtil.fetchEntities(hql, keys);
        click_ok = true;
        dispose();
        return 0;
    }

    private void report_msg(String fileName, boolean ischeck, int check_flag) {
        if (check_flag == 0) {
            fileName = fileName.replace(".xls", "1.xls");
            String export_msg = EmpMngMsg.msg098.toString() + "\n";
            if (ischeck) {
                export_msg += EmpMngMsg.msg141.toString() + lista01s.size() + EmpMngMsg.msg144.toString() + "\n";
                export_msg += EmpMngMsg.msg142.toString() + keys.size() + EmpMngMsg.msg144.toString() + "\n";
                export_msg += EmpMngMsg.msg143.toString() + (keys.size() - lista01s.size()) + EmpMngMsg.msg144.toString() + "\n";
            }
            MsgUtil.showHRValidateReportMsg(export_msg);
        } else if (check_flag == 1) {
            MsgUtil.showErrorMsg(EmpMngMsg.msg140);
        } else if (check_flag == 6) {
            MsgUtil.showErrorMsg(EmpMngMsg.msg139);
        }
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
