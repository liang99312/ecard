/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportXLSDialog.java
 *
 * Created on 2009-6-14, 11:39:49
 */
package org.jhrcore.client.personnel.comm;

import com.foundercy.pf.control.table.FTable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.DateUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.util.ExportUtil;
import org.jhrcore.entity.A01;
import org.jhrcore.comm.CodeManager;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.ExportDetail;
import org.jhrcore.entity.ExportScheme;
import org.jhrcore.entity.FileManager;
import org.jhrcore.entity.SysParameter;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.annotation.ClassAnnotation;
import org.jhrcore.entity.annotation.ObjectListHint;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.ImportImpl;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.msg.emp.EmpJdMsg;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.DeptSelectDlg;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.ShowProcessDlg;
import org.jhrcore.ui.XlsFileSelectPnl;
import org.jhrcore.ui.importxls.ReadXLS;
import org.jhrcore.ui.importxls.XlsImportInfo;
import org.jhrcore.ui.listener.IPickWindowCloseListener;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class ImportXLSDialog extends javax.swing.JDialog implements IModuleCode {

    private Class cur_class;
    private Hashtable<String, String> field_type_keys = new Hashtable<String, String>();//以字段名为索引、字段类型为值的数据    
    private int u_type = -1;
    private List<TempFieldInfo> a01_fields = new ArrayList<TempFieldInfo>();
    private TempFieldInfo cur_field = null;
    private DeptCode cur_dept = null;
    private List<IPickWindowCloseListener> listeners = new ArrayList();
    private String module_code = "EmpJd.mi_personAppendixIn";
    private XlsFileSelectPnl pnlXls;
    private int import_flag = 0;//0:正常导入;1:合同签订;2:合同导入

    public void addPickWindowCloseListener(IPickWindowCloseListener listener) {
        listeners.add(listener);
    }

    public void delPickWindowCloseListener(IPickWindowCloseListener listener) {
        listeners.remove(listener);
    }

    /** Creates new form ImportXLSDialog */
    public ImportXLSDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public ImportXLSDialog() {
        initComponents();
        initOthers();
        setupEvents();
    }

    public ImportXLSDialog(java.awt.Frame parent, Class import_class, String module_code) {
        super(parent, true);
        cur_class = import_class;
        this.module_code = module_code;
        import_flag = 0;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnRead = new javax.swing.JButton();
        btnModel = new javax.swing.JButton();
        jcbUpdate = new javax.swing.JCheckBox();
        jcbAdd = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        cb_bhxm = new javax.swing.JCheckBox();
        cb_otherp = new javax.swing.JCheckBox();
        lb_p = new javax.swing.JLabel();
        cb_field = new javax.swing.JComboBox();
        lb_d = new javax.swing.JLabel();
        tf_dept = new javax.swing.JTextField();
        btnDept = new javax.swing.JButton();
        lb_zhu1 = new javax.swing.JLabel();
        lb_zhu2 = new javax.swing.JLabel();
        btnDel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        jPanel2.setLayout(new java.awt.BorderLayout());

        btnOk.setText("确定");

        btnCancel.setText("取消");

        btnRead.setText("读取文件");

        btnModel.setText("查看模板");

        jcbUpdate.setText("更新");

        jcbAdd.setSelected(true);
        jcbAdd.setText("追加");

        jCheckBox3.setSelected(true);
        jCheckBox3.setText("序号自动生成");

        jCheckBox4.setText("忽略关联代码错误");

        cb_bhxm.setText("匹配项为人员编号+姓名");

        cb_otherp.setText("设置其他匹配项");

        lb_p.setText("匹配项：");

        cb_field.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lb_d.setText("部门范围：");

        tf_dept.setEditable(false);

        btnDept.setText("jButton1");
        btnDept.setMaximumSize(new java.awt.Dimension(20, 20));

        lb_zhu1.setText("注：其他匹配项，即除人员编号外的字段；");

        lb_zhu2.setText("    部门范围不选，默认是全部。");

        btnDel.setText("删除");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnRead)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDel))
                    .addComponent(btnModel)
                    .addComponent(jcbUpdate)
                    .addComponent(jcbAdd)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_bhxm)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lb_p)
                        .addGap(18, 18, 18)
                        .addComponent(cb_field, 0, 115, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lb_d)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_dept, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDept, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cb_otherp))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lb_zhu2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lb_zhu1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 189, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addGap(77, 77, 77))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRead)
                            .addComponent(btnDel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnModel)
                        .addGap(13, 13, 13)
                        .addComponent(jcbUpdate)
                        .addGap(9, 9, 9)
                        .addComponent(jcbAdd)
                        .addGap(11, 11, 11)
                        .addComponent(jCheckBox3)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox4)
                        .addGap(18, 18, 18)
                        .addComponent(cb_bhxm)
                        .addGap(14, 14, 14)
                        .addComponent(cb_otherp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cb_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lb_p))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lb_d)
                            .addComponent(tf_dept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDept, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancel)
                            .addComponent(btnOk)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(lb_zhu1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lb_zhu2)))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnDept;
    private javax.swing.JButton btnModel;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRead;
    private javax.swing.JCheckBox cb_bhxm;
    private javax.swing.JComboBox cb_field;
    private javax.swing.JCheckBox cb_otherp;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox jcbAdd;
    private javax.swing.JCheckBox jcbUpdate;
    private javax.swing.JLabel lb_d;
    private javax.swing.JLabel lb_p;
    private javax.swing.JLabel lb_zhu1;
    private javax.swing.JLabel lb_zhu2;
    private javax.swing.JTextField tf_dept;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        pnlXls = new XlsFileSelectPnl();
        jPanel2.add(pnlXls);
        Class super_class = cur_class.getSuperclass();
        jcbAdd.setEnabled(import_flag <= 1);
        if (!jcbAdd.isEnabled()) {
            jcbAdd.setSelected(false);
        }
        jcbUpdate.setEnabled(import_flag != 1);
        if (!jcbUpdate.isEnabled()) {
            jcbUpdate.setSelected(false);
        }
        if (!cur_class.getSimpleName().equalsIgnoreCase("ht01")) {
            cb_bhxm.setVisible(false);
        } else {
            btnDept.setVisible(false);
            cb_field.setVisible(false);
            cb_otherp.setVisible(false);
            lb_d.setVisible(false);
            lb_p.setVisible(false);
            lb_zhu1.setVisible(false);
            lb_zhu2.setVisible(false);
            tf_dept.setVisible(false);
        }
        ClassAnnotation ca = (ClassAnnotation) cur_class.getAnnotation(ClassAnnotation.class);
        this.setTitle("导入[" + ca.displayName() + "]表信息");
        if (super_class != null) {
            List<TempFieldInfo> super_infos = EntityBuilder.getCommFieldInfoListOf(super_class, EntityBuilder.COMM_FIELD_VISIBLE);
            for (TempFieldInfo tfi : super_infos) {
                tfi.setEntity_caption(ca.displayName());
                field_type_keys.put(tfi.getField_name(), tfi.getField_type());
            }
        }
        List<TempFieldInfo> cur_class_info = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_ALL);
        for (TempFieldInfo tfi : cur_class_info) {
            field_type_keys.put(tfi.getField_name(), tfi.getField_type());
        }
        List<TempFieldInfo> a01_infos = EntityBuilder.getCommFieldInfoListOf(A01.class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : a01_infos) {
            tfi.setField_name("a01." + tfi.getField_name());
            field_type_keys.put(tfi.getField_name(), tfi.getField_type());
        }
        List<TempFieldInfo> dept_infos = EntityBuilder.getCommFieldInfoListOf(DeptCode.class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : dept_infos) {
            tfi.setField_name("deptCode." + tfi.getField_name());
            field_type_keys.put(tfi.getField_name(), tfi.getField_type());
        }
        List<TempFieldInfo> fields2 = EntityBuilder.getCommFieldInfoListOf(A01.class, EntityBuilder.COMM_FIELD_VISIBLE);
        for (TempFieldInfo tfi : fields2) {
            if (tfi.getField_name().equals("deptCode")) {
                continue;
            }
            if (tfi.getField_name().equals("a0190")) {
                continue;
            }
            if (tfi.getField_type().equals("Date") || tfi.getField_type().toLowerCase().equals("boolean") || tfi.getField_type().equals("Code") || tfi.getField_type().toLowerCase().equals("float") || tfi.getField_type().toLowerCase().equals("bigdecimal")) {
                continue;
            }
            a01_fields.add(tfi);
        }
        JComboBoxBinding person_fields_binding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, a01_fields, cb_field);
        person_fields_binding.bind();
    }

    private void setupEvents() {
        btnDept.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                DeptSelectDlg dlg = new DeptSelectDlg(UserContext.getDepts(false));
                ContextManager.locateOnMainScreenCenter(dlg);
                dlg.setVisible(true);
                if (dlg.isClick_ok()) {
                    cur_dept = dlg.getCurDept();
                    tf_dept.setText(cur_dept.getContent() + "(" + cur_dept.getDept_code() + ")");
                } else {
                    return;
                }
            }
        });
        cb_otherp.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cb_otherp.isSelected()) {
                    cb_bhxm.setSelected(false);
                    cb_bhxm.setEnabled(false);
                    btnDept.setEnabled(true);
                    cb_field.setEnabled(true);
                } else {
                    cb_bhxm.setEnabled(true);
                    btnDept.setEnabled(false);
                    cb_field.setEnabled(false);
                }
            }
        });
        pnlXls.doXlsSelectAction(btnRead);
        pnlXls.doXlsDelAction(btnDel);
        btnModel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (!UserContext.hasFieldRight("HT01.a0190".toUpperCase())) {
                    return;
                }
                ExportScheme es = (ExportScheme) UtilTool.createUIDEntity(ExportScheme.class);
                List<TempFieldInfo> field_infos = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
                int i = 0;
                es.setEntity_name(cur_class.getSimpleName());
                List<ExportDetail> details = new ArrayList<ExportDetail>();
                for (TempFieldInfo tfi : field_infos) {
                    ExportDetail ed = (ExportDetail) UtilTool.createUIDEntity(ExportDetail.class);
                    ed.setEntity_caption(tfi.getEntity_caption());
                    ed.setEntity_name(cur_class.getSimpleName());
                    ed.setField_name(tfi.getField_name());
                    ed.setField_caption(tfi.getCaption_name());
                    ed.setField_type(tfi.getField_type());
                    ed.setOrder_no(i);
                    ed.setExportScheme(es);
                    if (tfi.getFormat() != null) {
                        ed.setFormat(tfi.getFormat());
                    }
                    details.add(ed);
                    i++;
                }
                es.setExportDetails(details);
                ClassAnnotation ca = (ClassAnnotation) cur_class.getAnnotation(ClassAnnotation.class);
                String label = EmpJdMsg.msg019.toString();
                if (cur_class.getSimpleName().equals("HT01")) {
                    label = EmpJdMsg.msg020.toString();
                }
                if (cur_class.getSuperclass().getSimpleName().equals("BasePersonAppendix")) {
                    label = EmpJdMsg.msg019.toString();
                } else if (cur_class.getSuperclass().getSimpleName().equals("BaseContractAppendix")) {
                    label = EmpJdMsg.msg021.toString();
                }
                label += "(" + ca.displayName() + ")" + EmpJdMsg.msg022.toString();
                es.setScheme_titile(label);
                List list = CommUtil.fetchEntitysBy("from " + cur_class.getSimpleName() + " a join fetch a.a01 where a.a01.deptCode.deptCode_key in(" + UserContext.person_right_str + ") ", 1, 10);
                FTable ftable = new FTable(cur_class);
                ftable.setObjects(list);
                ExportUtil.export(UserContext.file_path + cur_class.getSimpleName() + ".xls", es, ftable);
            }
        });
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int update_type = -1;
                if (jcbUpdate.isSelected()) {
                    if (jcbAdd.isSelected()) {
                        update_type = 1;
                    } else {
                        update_type = 2;
                    }
                } else {
                    if (jcbAdd.isSelected()) {
                        update_type = 0;
                    } else {
                        update_type = -1;
                    }
                }
                if (update_type == -1) {
                    return;
                }
                if (cb_otherp.isSelected()) {
                    if (cb_field.getSelectedItem() == null) {
                        return;
                    }
                    cur_field = (TempFieldInfo) cb_field.getSelectedItem();
                }
                u_type = update_type;
                ShowProcessDlg.startProcess(ImportXLSDialog.this);
                ImportXLSDialog.this.setEnabled(false);
                Runnable run = new Runnable() {

                    @Override
                    public void run() {
                        try {
                            int aa = 0;
                            for (FileManager fm : pnlXls.getSelectFiles()) {
                                importXLS(fm.getFile(), cur_class, u_type, jCheckBox3.isSelected(), aa);
                                aa++;
                            }
                            ShowProcessDlg.endProcess();
                            ImportXLSDialog.this.setEnabled(true);
                            ImportXLSDialog.this.setVisible(true);
                        } catch (Exception e1) {
                        }
                    }
                };
                new Thread(run).start();

            }
        });
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        btnDept.setEnabled(false);
        cb_field.setEnabled(false);
        ComponentUtil.setSysFuntionNew(this, false);
    }

    /**
     * 导入数据（包括人员附表，合同，合同附表，工资表等）
     * @param file:导入的文件
     * @param cur_class：当前表
     * @param update_type：更新类型，0：追加；1：更新并追加；2：仅更新
     * @param a_id_flag：是否自动生成序号
     */
    private void importXLS(File file, Class cur_class, int update_type, boolean a_id_flag, int aa) {
        //辅助变量定义部分---------------------------------------------------------------------------------------------
        boolean isHt_flag = cur_class.getSimpleName().equals("HT01");
        boolean com_flag = cb_bhxm.isSelected();
        XlsImportInfo xlsImportInfo = null;
        try {
            xlsImportInfo = ReadXLS.importXls(file);
        } catch (Exception e) {
            e.printStackTrace();
            ShowProcessDlg.endProcess();
            String tx_str = "";
            if (e.getMessage() == null) {
                tx_str = EmpJdMsg.msg006.toString();
            } else {
                tx_str = e.getMessage();
            }
//            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnOk), "读取Excel表出错：" + tx_str, "错误", JOptionPane.ERROR_MESSAGE);
            MsgUtil.showErrorMsg(EmpJdMsg.msg005 + tx_str);
            return;
        }
        ExportScheme exportScheme = xlsImportInfo.getExportScheme();
        SysParameter update_para = UserContext.getSys_para("System.import_updateable");
        HashSet<String> update_able_fields = new HashSet<String>();
        boolean compare_flag = false;//是否包含匹配字段：a0190
        boolean a0101_flag = false;//是否包含匹配字段：a0191
        boolean contain_a_id_flag = false;
        boolean dept_flag = false;
        boolean state_flag = false;
        boolean code_flag = jCheckBox4.isSelected();
        String compare_col_name = "";
        String compare_a0101 = "a0101";
        String compare_dept_name = "deptCode.dept_code";
        Hashtable<String, String> person_dept = new Hashtable<String, String>();
        for (ExportDetail exportDetail : exportScheme.getExportDetails()) {
            String field_name = exportDetail.getField_name();
            if (isHt_flag) {
                if (field_name.equalsIgnoreCase("a0190")) {
                    compare_flag = true;
                    compare_col_name = "a0190";
                    exportDetail.setField_type("String");
                }
                if (field_name.equalsIgnoreCase("a0101")) {
                    a0101_flag = true;
                    compare_a0101 = "a0101";
                    exportDetail.setField_type("String");
                }
            } else {
                if (cb_otherp.isSelected()) {
                    if (field_name.equalsIgnoreCase("a01." + cur_field.getField_name())) {
                        compare_flag = true;
                        compare_col_name = "a01." + cur_field.getField_name();
                        exportDetail.setField_type(cur_field.getField_type());
                    }
                } else {
                    if (field_name.equalsIgnoreCase("a01.a0190")) {
                        compare_flag = true;
                        compare_col_name = "a01.a0190";
                        exportDetail.setField_type("String");
                    }
                }
            }
            if (field_name.toLowerCase().startsWith("contract_state")) {
                state_flag = true;
            }
            if (compare_dept_name.equals(field_name)) {
                dept_flag = true;
                exportDetail.setField_type("String");
            }
            if (UserContext.getFieldRight(cur_class.getSimpleName() + "." + field_name) == 1 || UserContext.getFieldRight(cur_class.getSimpleName() + "." + field_name.replace("_code_", "")) == 1) {
                update_able_fields.add(field_name);
            } else if ((UserContext.getFieldRight(cur_class.getSimpleName() + "." + field_name) == 2 || UserContext.getFieldRight(cur_class.getSimpleName() + "." + field_name.replace("_code_", "")) == 2) && update_para.getSysparameter_value().equals("1")) {
                update_able_fields.add(field_name);
            }
            if (field_name.equals("a_id")) {
                contain_a_id_flag = true;
            }
            String type = field_type_keys.get(field_name);
            if (type != null) {
                exportDetail.setField_type(type);
            } else {
                type = field_type_keys.get(field_name + "_code_");
                if (type != null) {
                    exportDetail.setField_type(type);
                } else {
                    type = field_type_keys.get(field_name.substring(0, field_name.length() - 6));
                    if (type != null) {
                        exportDetail.setField_type(type);
                    }
                }
            }
        }
        int files = pnlXls.getSelectFiles().size() - 1;
        if (com_flag && !a0101_flag) {
            if (aa == files) {
                ShowProcessDlg.endProcess();
            }
            MsgUtil.showErrorMsg(EmpJdMsg.msg007);
            return;
        }
        if (!state_flag && isHt_flag) {
            if (aa == files) {
                ShowProcessDlg.endProcess();
            }
            MsgUtil.showErrorMsg(EmpJdMsg.msg008);
            return;
        }
        if (!compare_flag) {
            if (aa == files) {
                ShowProcessDlg.endProcess();
            }
            MsgUtil.showErrorMsg(EmpJdMsg.msg009);
            return;
        }
        if (!contain_a_id_flag && !a_id_flag) {
            if (aa == files) {
                ShowProcessDlg.endProcess();
            }
            MsgUtil.showErrorMsg(EmpJdMsg.msg010);
            return;
        }
        if (contain_a_id_flag && a_id_flag) {
            if (aa == files) {
                ShowProcessDlg.endProcess();
            }
            MsgUtil.showErrorMsg(EmpJdMsg.msg050);
            return;
        }
        List<ExportDetail> details = new ArrayList<ExportDetail>();
        Hashtable<String, A01> exist_a01_keys = new Hashtable<String, A01>();
        List<Hashtable<String, String>> not_exist_list = new ArrayList<Hashtable<String, String>>();//用于记录XLS中的重复记录
        List<Hashtable<String, String>> error_list = new ArrayList<Hashtable<String, String>>();//用于记录错误数据
        Hashtable<String, List<Hashtable<String, Object>>> result_data = new Hashtable<String, List<Hashtable<String, Object>>>();//用于记录读取出来转换成对象的数据
        Hashtable<String, Hashtable<String, Object>> exist_keys = new Hashtable<String, Hashtable<String, Object>>();//用于记录数据库中已经存在的记录，索引为匹配字段值，值为a01_key(即主键值)
        String compare_val;//匹配值
        boolean base_a01 = cur_class.getSuperclass().getSimpleName().equals("BasePersonAppendix");//判断是否是人员附表
        //原始数据处理部分---------------------------------------------------------------------------------------------
        details.addAll(exportScheme.getExportDetails());
        int len = xlsImportInfo.getValues().size();
        int k = 0;
        Hashtable<Integer, List<String>> error_keys = new Hashtable<Integer, List<String>>();
        List<String> keys = new ArrayList<String>();
        for (int i = 0; i < len; i++) {
            boolean error_data_flag = false;
            Hashtable<String, String> row_data = xlsImportInfo.getValues().get(i);
            compare_val = row_data.get(compare_col_name);
            if (com_flag) {
                compare_val += row_data.get(compare_a0101);
            }
            if (compare_val == null || compare_val.replace(" ", "").equals("")) {
                not_exist_list.add(row_data);
            } else {
                List<String> row_error_keys = error_keys.get(k);
                if (row_error_keys == null) {
                    row_error_keys = new ArrayList<String>();
                }
                Hashtable<String, Object> result_row_data = new Hashtable<String, Object>();
                List<Hashtable<String, Object>> result_col_data = result_data.get(compare_val);
                if (result_col_data == null) {
                    result_col_data = new ArrayList<Hashtable<String, Object>>();
                }
                String dept_code = "";
                try {
                    for (String field_name : row_data.keySet()) {
                        Object tmp_obj = row_data.get(field_name);
//                        if (field_name.startsWith("a01") && !field_name.equals("a01.a0190")) {
                        if (field_name.startsWith("a01") && !field_name.equals(compare_col_name)) {
                            continue;
                        }
                        if (base_a01) {
                            if (!jcbUpdate.isSelected() && a_id_flag) {
                                if (field_name.equals("a_id")) {
                                    continue;
                                }
                            }
                            if (field_name.equals("last_flag")) {
                                continue;
                            }
                        }
                        if (field_name.startsWith("deptCode") && !field_name.equals(compare_dept_name)) {
                            continue;
                        }
                        if (!update_able_fields.contains(field_name)) {
                            continue;
                        }
                        if (isHt_flag && field_name.toLowerCase().startsWith("contract_state")) {
                            if (tmp_obj == null || "".equals(tmp_obj.toString())) {
                                row_error_keys.add(field_name);
                                continue;
                            }
                        }
                        if (field_name.endsWith("_code_")) {
                            try {
                                Field field = cur_class.getField(field_name);
                                if (tmp_obj == null || tmp_obj.toString().equals("")) {
                                } else {
                                    ObjectListHint objHint = field.getAnnotation(ObjectListHint.class);
                                    if (objHint != null && objHint.hqlForObjectList().startsWith("from Code ")) {
                                        String hql = objHint.hqlForObjectList();
                                        String code_id = CodeManager.getCodeManager().getCodeIdBy(hql.substring(hql.indexOf("=") + 1), tmp_obj.toString());
                                        if (code_id == null) {
                                            if (code_flag) {
                                                continue;
                                            } else {
                                                row_error_keys.add(field_name);
                                                continue;
                                            }
                                        }
                                        tmp_obj = code_id;
                                    } else {
                                        row_error_keys.add(field_name);
                                        continue;
                                    }
                                }
                                field_name = field_name.substring(0, field_name.length() - 6);
                            } catch (NoSuchFieldException ex) {
                                Logger.getLogger(ImportXLSDialog.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SecurityException ex) {
                                Logger.getLogger(ImportXLSDialog.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            String type = field_type_keys.get(field_name);
                            if (type == null) {
                                continue;
                            }
                            type = type.toLowerCase();
                            if (type.equals("boolean")) {
                                if (tmp_obj.toString().equals("0") || tmp_obj.toString().equals("1")) {
                                    tmp_obj = tmp_obj.toString().equals("1");
                                } else if (tmp_obj.toString().toLowerCase().equals("false")) {
                                    tmp_obj = false;
                                } else if (tmp_obj.toString().toLowerCase().equals("true")) {
                                    tmp_obj = true;
                                } else if ("是".equals(tmp_obj.toString())) {
                                    tmp_obj = true;
                                } else if ("否".equals(tmp_obj.toString())) {
                                    tmp_obj = false;
                                } else {
                                    row_error_keys.add(field_name);
                                    continue;
                                }
                            } else if (type.equals("date")) {
                                Object obj = DateUtil.StrToDate(tmp_obj.toString());
                                if (obj == null) {
                                    continue;
                                }
                                tmp_obj = obj;
                            } else if (type.equals("int")) {
                                Object obj = SysUtil.objToInt(tmp_obj);
                                if (obj == null) {
                                    row_error_keys.add(field_name);
                                    continue;
                                }
                                tmp_obj = obj;
                            } else if (type.equals("integer")) {
                                Object obj = SysUtil.objToInteger(tmp_obj);
                                if (obj == null) {
                                    row_error_keys.add(field_name);
                                    continue;
                                }
                                tmp_obj = obj;
                            } else if (type.equals("float")) {
                                Object obj = (Float) SysUtil.objToFloat(tmp_obj);
                                if (obj == null) {
                                    row_error_keys.add(field_name);
                                    continue;
                                }
                                tmp_obj = obj;
                            } else if (type.equals("bigdecimal")) {
                                Object obj = SysUtil.objToBigDecimal(tmp_obj);
                                if (obj == null) {
                                    row_error_keys.add(field_name);
                                    continue;
                                }
                                tmp_obj = (BigDecimal) obj;
                            }
                        }
                        result_row_data.put(field_name, tmp_obj);
                        if ("deptCode.dept_code".equals(field_name)) {
                            dept_code = tmp_obj.toString();
                        }
                    }
                    error_data_flag = row_error_keys.size() > 0;
                    if (error_data_flag) {
                        error_keys.put(k, row_error_keys);
                        error_list.add(row_data);
                        k++;
                        error_data_flag = false;
                        continue;
                    }
                    if (dept_code != null && !"".equals(dept_code)) {
                        person_dept.put(compare_val, dept_code);
                    }
                    result_col_data.add(result_row_data);
                    result_data.put(compare_val, result_col_data);
                    keys.add(row_data.get(compare_col_name));
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(ImportXLSDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

//        keys.addAll(result_data.keySet());
        String dept_where1 = "";
        String dept_where2 = "";
        if (cb_otherp.isSelected() && cur_dept != null) {
            dept_where1 = " and a.a01.deptCode.dept_code like '" + cur_dept.getDept_code() + "%'";
            dept_where2 = " and a.deptCode.dept_code like '" + cur_dept.getDept_code() + "%'";
        }
        List exist_cur_classes = CommUtil.fetchEntities("from " + cur_class.getSimpleName() + " a  join fetch a.a01 where (" + UserContext.getDept_right_rea_str("a.a01.deptCode") + ") " + dept_where1 + " and a." + compare_col_name + " in", keys);
        List exist_a01s = CommUtil.fetchEntities("from A01 a  join fetch a.deptCode where (" + UserContext.getDept_right_rea_str("a.deptCode") + ") " + dept_where2 + " and a." + compare_col_name.replace("a01.", "") + " in", keys);
        Hashtable<String, DeptCode> dept_table = new Hashtable<String, DeptCode>();
        for (DeptCode d : UserContext.getDepts(false)) {
            dept_table.put(d.getDept_code(), d);
        }
        //数据更新部分---------------------------------------------------------------------------------------------
        String c_fieldname = compare_col_name;
        if (!c_fieldname.contains("a01.")) {
            c_fieldname = "a01." + c_fieldname;
        }
        if (exist_cur_classes != null) {
            for (Object obj : exist_cur_classes) {
                compare_val = PublicUtil.getProperty(obj, c_fieldname).toString();
                if (com_flag) {
                    compare_val += PublicUtil.getProperty(obj, "a01.a0101").toString();
                }
                Hashtable<String, Object> row_keys = exist_keys.get(compare_val);
                if (row_keys == null) {
                    row_keys = new Hashtable<String, Object>();
                }
                row_keys.put(PublicUtil.getProperty(obj, "a_id").toString(), obj);
                exist_keys.put(compare_val, row_keys);
            }
        }
        if (exist_a01s != null) {
            for (Object obj : exist_a01s) {
                A01 a01 = (A01) obj;
                if (com_flag) {
                    exist_a01_keys.put(a01.getA0190() + a01.getA0101(), a01);
                } else {
                    String temp_val = PublicUtil.getProperty(a01, c_fieldname.replace("a01.", "")).toString();
                    exist_a01_keys.put(temp_val, a01);
                }
            }
        }
        HashSet save_objs = new HashSet();
        HashSet update_objs = new HashSet();
        A01 exist_a01 = null;
        int num = 0;//记录检索到excel中的那一条记录
        for (String key1 : result_data.keySet()) {
            List<Hashtable<String, Object>> row_datas = result_data.get(key1);
            compare_val = key1;
            exist_a01 = exist_a01_keys.get(compare_val);
            for (Hashtable<String, Object> row_data : row_datas) {
                Integer a_id = 1;
                boolean update_flag = false;
                boolean exist_a_id_flag = false;//判断是否存在A_ID值
                if (exist_a01 == null) {
                    for (int i = 0; i < len; i++) {
                        Hashtable<String, String> tmp = xlsImportInfo.getValues().get(i);
                        if (tmp.get(compare_col_name).equals(compare_val)) {
                            not_exist_list.add(tmp);
                            break;
                        }
                    }
                } else {
                    int exist_max_a_id = 0;//最大A_ID值
                    a_id = (row_data.get("a_id") == null ? -1 : Integer.valueOf(row_data.get("a_id").toString()));
                    if (!a_id_flag && a_id == -1) {
                        continue;
                    }
                    Hashtable<String, Object> cur_class_datas = exist_keys.get(compare_val);
                    if (cur_class_datas != null) {
                        Object obj = null;
                        for (String tmp : cur_class_datas.keySet()) {
                            if (Integer.valueOf(tmp) > exist_max_a_id) {
                                exist_max_a_id = Integer.valueOf(tmp);
                                obj = cur_class_datas.get(tmp);
                            }
                            if (a_id != -1 && a_id == Integer.valueOf(tmp).intValue()) {
                                exist_a_id_flag = true;
                            }
                            if (save_objs.contains(obj)) {
                                exist_a_id_flag = false;
                            }
                        }
                    }
                    if (a_id == -1) {
                        a_id = exist_max_a_id + 1;
                    }
                    num++;
                    if (update_type == 2 && !exist_a_id_flag) {
                        Hashtable<String, String> tmp = xlsImportInfo.getValues().get(num - 1);
                        not_exist_list.add(tmp);
                        continue;
                    }
                    if (update_type == 0 && exist_a_id_flag) {
                        Hashtable<String, String> tmp = xlsImportInfo.getValues().get(num - 1);
                        not_exist_list.add(tmp);
                        continue;
                    }
                    try {
                        Object obj = null;
                        if (exist_a_id_flag) {
                            obj = cur_class_datas.get(a_id + "");
                            update_objs.add(obj);
                            update_flag = true;
                        } else {
                            if (isHt_flag) {
                                try {
                                    obj = UtilTool.createUIDEntity(cur_class);
                                } catch (Exception ex) {
                                    Logger.getLogger(ImportXLSDialog.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                DeptCode deptCode = null;
                                deptCode = exist_a01.getDeptCode();
                                if (dept_flag) {
                                    if (person_dept.get(compare_val) != null) {
                                        if (dept_table.get(person_dept.get(compare_val)) != null) {
                                            deptCode = dept_table.get(person_dept.get(compare_val));
                                        }
                                    }
                                }
                                Method method2 = cur_class.getMethod("setDeptCode", new Class[]{DeptCode.class});
                                method2.invoke(obj, new Object[]{deptCode});
                            } else {
                                obj = UtilTool.createUIDEntity(cur_class);
                                Hashtable<String, Object> row_keys = exist_keys.get(compare_val);
                                if (row_keys == null) {
                                    row_keys = new Hashtable<String, Object>();
                                }
                                row_keys.put(a_id.toString(), obj);
                                exist_keys.put(compare_val, row_keys);
                            }
                            save_objs.add(obj);
                        }
                        for (String field_name : row_data.keySet()) {
                            if (field_name.startsWith("a01.")) {
                                continue;
                            }
                            if (field_name.startsWith("deptCode.")) {
                                continue;
                            }
                            Object tmp_obj = row_data.get(field_name);
                            Class field_class = cur_class.getField(field_name).getType();
                            Method method = cur_class.getMethod("set" + field_name.substring(0, 1).toUpperCase() + field_name.substring(1), new Class[]{field_class});
                            method.invoke(obj, new Object[]{tmp_obj});
                        }
                        if (!update_flag) {
                            Method method = cur_class.getMethod("setA01", new Class[]{A01.class});
                            method.invoke(obj, new Object[]{exist_a01});
                            if (isHt_flag) {
                                Method method01 = cur_class.getMethod("setA0101", new Class[]{String.class});
                                method01.invoke(obj, new Object[]{exist_a01.getA0101()});
                                Method method90 = cur_class.getMethod("setA0190", new Class[]{String.class});
                                method90.invoke(obj, new Object[]{exist_a01.getA0190()});
                            }
                            Method method1 = cur_class.getMethod("setA_id", new Class[]{Integer.class});
                            method1.invoke(obj, new Object[]{a_id});
                        }
                    } catch (InvocationTargetException ex) {
                        Logger.getLogger(ImportXLSDialog.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NoSuchFieldException ex) {
                        Logger.getLogger(ImportXLSDialog.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SecurityException ex) {
                        Logger.getLogger(ImportXLSDialog.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalArgumentException ex) {
                        Logger.getLogger(ImportXLSDialog.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NoSuchMethodException ex) {
                        Logger.getLogger(ImportXLSDialog.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        Logger.getLogger(ImportXLSDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }
        }
        List<Hashtable<String, Object>> error_update_data = new ArrayList<Hashtable<String, Object>>();
        ValidateSQLResult result = new ValidateSQLResult();
        if (save_objs.size() > 0 || update_objs.size() > 0) {
            result = ImportImpl.importCommData(save_objs, update_objs, cur_class.getSimpleName());
            if (result.getError_result() > 0) {
                for (String key : result.getError_comp_keys()) {
                    error_update_data.addAll(result_data.get(key));
                }
            }
        }
        if (aa == pnlXls.getSelectFiles().size() - 1) {
            ShowProcessDlg.endProcess();
        }
        String file_path = file.getPath();
        file_path = file_path.replace(".xls", "1.xls");
        ExportUtil.export(file_path, exportScheme, not_exist_list, error_list, error_keys, error_update_data);
        String export_msg = CommMsg.EXPORT_MESSAGE + "\n";
        export_msg += CommMsg.EXPORT_SUCCESS.toString() + result.getInsert_result() + CommMsg.EXPORT_TIAO + "\n";
        export_msg += CommMsg.EXPORT_UPDATE.toString() + result.getUpdate_result() + CommMsg.EXPORT_TIAO + "\n";
        export_msg += CommMsg.EXPORT_NOFIND.toString() + not_exist_list.size() + CommMsg.EXPORT_TIAO + "\n";
        export_msg += CommMsg.EXPORT_ERROR.toString() + error_list.size() + CommMsg.EXPORT_TIAO + "\n";
        export_msg += CommMsg.EXPOET_DBERROR.toString() + error_update_data.size() + CommMsg.EXPORT_TIAO + "\n";
        MsgUtil.showHRValidateReportMsg(export_msg);
        if (result.getInsert_result() > 0 || result.getUpdate_result() > 0) {
            for (IPickWindowCloseListener listener : listeners) {
                listener.pickClose();
            }
        }

    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}
