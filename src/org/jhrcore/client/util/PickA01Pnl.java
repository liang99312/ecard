/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Created on 2010-1-12, 15:02:32
 */
package org.jhrcore.client.util;

import com.foundercy.pf.control.listener.IPickFieldOrderListener;
import com.foundercy.pf.control.listener.IPickQueryExListener;
import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.ui.DeptPersonPanel;
import org.jhrcore.ui.listener.IPickPersonClassListener;
import org.jhrcore.util.PublicUtil;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.listener.IPickDeptListener;
import org.jhrcore.ui.listener.IPickPersonsListener;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.ImageUtil;

/**
 *
 * @author mxliteboss
 */
public class PickA01Pnl extends javax.swing.JPanel {

    private DeptPersonPanel deptPersonPanel;
    private FTable ftable;//当前部门人员
    private FTable ftable2;//已选择人员
    private Set<String> exist_person = new HashSet<String>();
    private List<TempFieldInfo> all_fields = new ArrayList<TempFieldInfo>();
    private String query_order_sql = " bp.a0190";
    private String module_code = PickA01Pnl.class.getSimpleName();
    private JButton btnSearch = new JButton("", ImageUtil.getSearchIcon());
    private JTextField cbBoxSearch = new JTextField();
    private JCheckBox chbCurColumn = new JCheckBox("当前列", false);
    private JButton btnIn = new JButton("加入");
    private JButton btnOut = new JButton("移出");
    private StringBuffer strBuf;
    private String s_filter = "1=1";
    private List<IPickPersonsListener> listeners = new ArrayList<IPickPersonsListener>();
    private List<DeptCode> depts;

    public void addPickJ_SysPersonListener(IPickPersonsListener listener) {
        listeners.add(listener);
    }

    public void delPickJ_SysPersonListener(IPickPersonsListener listener) {
        listeners.remove(listener);
    }

    public PickA01Pnl() {
        this(" 1=1 ", null, null);
    }

    public PickA01Pnl(String s_where) {
        this(s_where, null, null);
    }

    public PickA01Pnl(List<DeptCode> depts) {
        this(" 1=1 ", depts, null);
    }

    public PickA01Pnl(String s_where, List<DeptCode> depts) {
        this(s_where, depts, null);
    }

    public PickA01Pnl(String s_where, Set<String> existsA01) {
        this(s_where, null, existsA01);
    }

    public PickA01Pnl(String s_where, List<DeptCode> depts, Set<String> existsA01) {
        if (existsA01 != null) {
            this.exist_person.addAll(existsA01);
        }
        this.s_filter = s_where;
        this.depts = depts;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlDept = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        pnlTable = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();
        pnlPerson = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        pnlSelectTable = new javax.swing.JPanel();

        jSplitPane1.setDividerLocation(200);

        pnlDept.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(pnlDept);

        jSplitPane2.setDividerLocation(220);
        jSplitPane2.setDividerSize(3);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        pnlPerson.setBorder(javax.swing.BorderFactory.createTitledBorder("当前人员："));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout pnlPersonLayout = new javax.swing.GroupLayout(pnlPerson);
        pnlPerson.setLayout(pnlPersonLayout);
        pnlPersonLayout.setHorizontalGroup(
            pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );
        pnlPersonLayout.setVerticalGroup(
            pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
            .addComponent(pnlPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableLayout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane2.setTopComponent(pnlTable);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("已选人员："));

        pnlSelectTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlSelectTable.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSelectTable, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSelectTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(jPanel11);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel9);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JPanel pnlDept;
    private javax.swing.JPanel pnlPerson;
    private javax.swing.JPanel pnlSelectTable;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        initToolBar();
        deptPersonPanel = new DeptPersonPanel(false, depts != null ? depts : UserContext.getDepts(false));
        deptPersonPanel.setQuery_tab_flag(false);
        deptPersonPanel.setData_table_init_flag(false);
        deptPersonPanel.init();
        List<TempFieldInfo> default_fields = new ArrayList<TempFieldInfo>();
        EntityBuilder.buildInfo(DeptCode.class, all_fields, default_fields, "deptCode");
        EntityBuilder.buildInfo(A01.class, all_fields, default_fields, "");
        pnlDept.add(deptPersonPanel, BorderLayout.CENTER);
        ftable = new FTable(A01.class, true, true, false);
        ftable.setAll_fields(all_fields, default_fields, module_code);
        ftable.setRight_allow_flag(true);
        ftable.removeSumAndReplaceItem();
        jPanel2.add(ftable, BorderLayout.CENTER);
        ftable2 = new FTable(A01.class, false, false);
        ftable2.setAll_fields(all_fields, default_fields, module_code);
        pnlSelectTable.add(ftable2, BorderLayout.CENTER);
        refleshStr();
    }

    private void initToolBar() {
        toolbar.add(new JLabel("查找："));
        toolbar.add(cbBoxSearch);
        toolbar.add(btnSearch);
        toolbar.add(chbCurColumn);
        toolbar.add(btnIn);
        toolbar.add(btnOut);
        ComponentUtil.setSize(cbBoxSearch, 120, 22);
        ComponentUtil.setSize(btnIn, 40, 22);
        ComponentUtil.setSize(btnOut, 40, 22);
    }

    private void setupEvents() {
        ActionListener al = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String text = cbBoxSearch.getText();
                if (text.trim().equals("")) {
                    return;
                }
                locateEmp(text.toUpperCase());
            }
        };
        cbBoxSearch.addActionListener(al);
        btnSearch.addActionListener(al);
        ftable.addPickFieldOrderListener(new IPickFieldOrderListener() {

            @Override
            public void pickOrder(ShowScheme showScheme) {
                query_order_sql = SysUtil.getOrderString(showScheme, "bp", query_order_sql, all_fields);
                pickPerson(null, ftable.getCur_query_scheme());
            }
        });
        ftable.addPickQueryExListener(new IPickQueryExListener() {

            @Override
            public void pickQuery(QueryScheme qs) {
                pickPerson(null, qs);
            }
        });
        btnIn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addPerson();
            }
        });
        btnOut.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                removePerson();
            }
        });
        deptPersonPanel.addPickDeptListener(new IPickDeptListener() {

            @Override
            public void pickDept(Object dept) {
                pickPerson(null, null);
            }
        });
        deptPersonPanel.addPickPersonClassListner(new IPickPersonClassListener() {

            @Override
            public void pickPersonClass(Class personClass) {
                pickPerson(null, null);
            }
        });
        pickPerson(null, null);
    }

    private void locateEmp(String text) {
        String val = SysUtil.getQuickSearchText(text);
        String hql = "";
        if (chbCurColumn.isSelected()) {
            hql += " and (" + ftable.getQuickSearchSQL("bp", val) + ")";
        } else {
            hql += " and (upper(bp.pydm) like '" + val + "' or upper(bp.a0101) like '" + val + "'  or upper(bp.a0190) like '" + val + "' )";
        }
        pickPerson(hql, null);
    }

    private void pickPerson(String s_where, QueryScheme qs) {
        Class person_class = this.deptPersonPanel.getPersonClass();
        Object curobj = deptPersonPanel.getCurDept();
        if (curobj == null) {
            ftable.deleteAllRows();
            return;
        }
        String hql = "select bp.a01_key from A01 bp  where ";
        if (curobj instanceof DeptCode) {
            DeptCode dept = (DeptCode) curobj;
            hql += "bp.deptCode.dept_code like '" + dept.getDept_code() + "%'";
        }
        hql += " and bp.a0193=0 and (" + UserContext.getDept_right_rea_str("bp.deptCode") + ") and (" + UserContext.getPerson_class_right_str(A01.class, "bp") + ")";
        if (s_where != null) {
            hql += s_where;
        }
        if (qs != null) {
            hql = qs.buildHql(hql, "bp");
        }
        hql += " and (" + UserContext.getPerson_class_right_str(person_class, "bp") + ")";
        hql += " and (" + s_filter + ")";
        hql += " order by " + query_order_sql;
        List list = CommUtil.fetchEntities(hql);
        list.removeAll(this.exist_person);
        PublicUtil.getProps_value().setProperty(A01.class.getName(), "from A01 bp join fetch bp.deptCode left join fetch bp.g10 where bp.a01_key in");
        PublicUtil.getProps_value().setProperty(person_class.getName(), "from " + person_class.getSimpleName() + " bp join fetch bp.deptCode left join fetch bp.g10 where bp.a01_key in");
        ftable.setObjects(list);
    }

    /**
     * 添加人员
     * @param all_flag:全部添加/添加选中人员
     */
    private void addPerson() {
        List in_list = new ArrayList();
        List<A01> result_list = new ArrayList<A01>();
        in_list = ftable.getAllSelectObjects();
        for (Object obj : in_list) {
            A01 bp = (A01) obj;
            if (!exist_person.contains(bp.getA01_key())) {
                exist_person.add(bp.getA01_key());
                result_list.add(bp);
                strBuf.append(",'").append(bp.getA01_key()).append("'");
            }
        }
        if (result_list.size() > 0) {
            ftable2.addObjects(result_list);
        }
        ftable.deleteSelectedRows();
    }

    /**
     * 移除人员
     * @param all_flag：全部移除/移除选中人员
     */
    private void removePerson() {
        for (Object obj : ftable2.getSelectObjects()) {
            A01 bp = (A01) obj;
            exist_person.remove(bp.getA01_key());
        }
        ftable2.deleteSelectedRows();
        refleshStr();
        pickPerson(null, null);
        ftable.updateUI();
    }

    private void refleshStr() {
        strBuf = new StringBuffer();
        strBuf.append("'-1'");
        if (exist_person.size() > 0) {
            for (Object obj : exist_person) {
                String tmp_str = obj.toString();
                strBuf.append(",'").append(tmp_str).append("'");
            }
        }
    }

    public List getSelectedA01() {
        return ftable2.getAllObjects();
    }

    public FTable getFtable2() {
        return ftable2;
    }

    public void refleshPerson() {
        refleshPerson(this.s_filter);
    }

    public void refleshPerson(String f_str) {
        this.s_filter = f_str;
        ftable2.setObjects(new ArrayList());
        exist_person.clear();
        refleshStr();
        pickPerson(null, null);
    }
}
